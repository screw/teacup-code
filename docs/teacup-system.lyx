#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass IEEEtran
\begin_preamble
\usepackage{fixltx2e}
\usepackage[noadjust]{cite}
%\usepackage[breaklinks=true,colorlinks=true,linkcolor=black,citecolor=black,urlcolor=black]{hyperref}
\usepackage{url}
\usepackage{balance}
\usepackage{textcomp}
%\usepackage{txfonts}

% against orphans/widows
\widowpenalty=10000
\clubpenalty=10000
\raggedbottom

% against overful hboxes
\sloppy

\usepackage{color}
\definecolor{lightgray}{gray}{0.95}

\usepackage[parfill]{parskip}

\usepackage{changepage}

\usepackage{lastpage}

% Change the \footnoterule command to separate footnotes from 
% the main text by a short horizontal rule (borrowed
% from the CAIA style)
\renewcommand{\footnoterule}
{
  \kern-3\p@
  \hrule\@width.4\columnwidth
  \kern2.6\p@
}

%% Mimic CAIA TR use of hyperlinks

% The "xcolor" package allows us to define the colours we will use for links   %
% within the PDF when we later load the "hyperref" package.                    %

\RequirePackage{xcolor}
\xdefinecolor{linkc}{RGB}{33,0,99}
\xdefinecolor{citec}{RGB}{0,0,0}
\xdefinecolor{caiablack}{RGB}{0,0,0}
\xdefinecolor{urlc}{RGB}{33,0,99}

% The "hyperref" package allows us to generate a PDF with associated PDF links %
% and bookmarks and other funky PDF stuff.                                     %

\RequirePackage[colorlinks=true,                  % Links are marked as coloured text, not coloured box.
                linkcolor= linkc,                 % Colour of in-document links (e.g. in the table of contents).
                citecolor= caiablack,             % Colour of bibliographic citations.
                urlcolor= urlc,                   % Colour of hyperlinks to the Net.
                pdfpagelayout=SinglePage,         % Initial view is page-by-page
                pdfstartview=FitV,                % Fit the document to window height.
               ]{hyperref}
\end_preamble
\options 11pt, a4paper, conference
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding default
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbh
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 0
\use_package amssymb 0
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle fancy
\tracking_changes true
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\author 193492759 "gja"
\author 1685850735 "russell"
\author 1870295737 "Jonathan Kua"
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
title{TEACUP v1.
\change_inserted 1685850735 1494305058
1
\change_deleted 1685850735 1494305058
X
\change_deleted 193492759 1491893154
0
\change_unchanged
 -- A System for Automated TCP Testbed Experiments}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
author{
\backslash
IEEEauthorblockN{
\change_inserted 193492759 1517561870
Editors: 
\change_unchanged
Sebastian Zander, Grenville Armitage}
\end_layout

\begin_layout Plain Layout

\change_deleted 193492759 1517561892


\backslash
IEEEauthorblockA{Centre for Advanced Internet Architectures
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\change_deleted 193492759 1517561877

Swinburne University of Technology
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\change_deleted 193492759 1517561877

Melbourne, Australia
\backslash

\backslash

\change_unchanged

\end_layout

\begin_layout Plain Layout

\change_inserted 193492759 1517561895


\backslash
IEEEauthorblockA{
\change_unchanged

\backslash
url{
\change_deleted 193492759 1517561917
szander@swin.edu.au
\change_inserted 193492759 1517561917
s.zander@murdoch.edu.au
\change_unchanged
}, 
\backslash
url{garmitage@swin.edu.au}}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
IEEEoverridecommandlockouts
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%This is how to make the abstract/index one column
\end_layout

\begin_layout Plain Layout

%
\backslash
IEEEoverridecommandlockouts
\end_layout

\begin_layout Plain Layout


\backslash
IEEEaftertitletext{
\backslash
vspace{-0.5
\backslash
baselineskip}
\end_layout

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{2.5cm}{2.5cm}
\end_layout

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\begin_layout Plain Layout


\backslash
begin{abstract} Over the last few decades several TCP congestion control
 algorithms were developed in order to optimise TCP's behaviour in certain
 situations.
 While TCP was traditionally used mainly for file transfers, more recently
 it is also becoming the protocol of choice for streaming applications,
 for example video streaming from YouTube and Netflix is TCP-based 
\backslash
cite{Finamore2011,Rao2011} and there is an ISO standard for Dynamic Adaptive
 Streaming over HTTP (DASH) 
\backslash
cite{dash-standard}.
 However, the impact of different TCP congestion control algorithms on TCP-based
 streaming flows (within a mix of other typical traffic) is not well understood.
 Experiments in a controlled testbed allow shedding more light on this issue.
 This report describes TEACUP (TCP Experiment Automation Controlled Using
 Python) version 1.
\change_inserted 193492759 1494480788
1
\change_deleted 193492759 1493286968
0
\change_unchanged
 -- a software tool for running automated TCP experiments in a testbed.
 Based on a configuration file TEACUP can perform a series of experiments
 with different traffic mixes, different bottleneck configurations (such
 as bandwidths, queue mechanisms), different emulated network delays and/or
 loss rates, and different host settings (e.g.
 used TCP congestion control algorithm).
 For each experiment TEACUP automatically collects relevant information
 that allows analysing TCP behaviour, such as tcpdump files and TCP stack
 information.
\end_layout

\begin_layout Plain Layout


\backslash
end{abstract} 
\end_layout

\begin_layout Plain Layout

%
\backslash
vspace{0.5
\backslash
baselineskip}
\end_layout

\begin_layout Plain Layout


\backslash
noindent
\backslash
begin{
\change_inserted 193492759 1517792863
IEEE
\change_unchanged
keywords} TCP, experiments, automated control
\end_layout

\begin_layout Plain Layout


\backslash
end{
\change_inserted 193492759 1517792866
IEEE
\change_unchanged
keywords} 
\end_layout

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{1
\backslash
baselineskip}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
maketitle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fancypagestyle{firstpage}{% Page style for first page
\end_layout

\begin_layout Plain Layout

  
\backslash
fancyhf{}% Clear header/footer
\end_layout

\begin_layout Plain Layout

  
\backslash
renewcommand{
\backslash
headrulewidth}{0pt}% Header rule
\end_layout

\begin_layout Plain Layout

  
\backslash
renewcommand{
\backslash
footrulewidth}{0pt}% Footer rule
\end_layout

\begin_layout Plain Layout

  
\backslash
fancyfoot[C]{
\backslash
small{
\change_deleted 193492759 1517561958

\backslash
copyright~2015 -- 2016 CAIA, Swinburne University of Technology
\backslash

\backslash
Originally published as 
\backslash
url{http://caia.swin.edu.au/reports/150529A/CAIA-TR-150529A.pdf}
\backslash

\backslash

\change_deleted 1685850735 1494305447
This version
\change_deleted 193492759 1517561958
Version 1.0 was released June 2016 under Creative Commons BY-SA 4.0 License
 -- s
\change_inserted 193492759 1517561958
Based on a version of  
\backslash
url{http://caia.swin.edu.au/reports/150529B/CAIA-TR-150529B.pdf}, orginally
 released June 2016 under Creative Commons BY-SA 4.0 License, 
\backslash
copyright~2015 -- 2016 CAIA, Swinburne University of Technology.
 S
\change_unchanged
ee terms on page~
\backslash
pageref{sec:Copying}}}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
thispagestyle{firstpage}
\end_layout

\begin_layout Plain Layout

  
\backslash
pagestyle{fancy}
\end_layout

\begin_layout Plain Layout

  
\backslash
headheight 13.4pt
\end_layout

\begin_layout Plain Layout

  
\backslash
renewcommand{
\backslash
headrulewidth}{0pt}
\end_layout

\begin_layout Plain Layout

  
\backslash
lfoot{
\backslash
small{TEACUP v1.
\change_inserted 1685850735 1494305065
1
\change_deleted 1685850735 1494305064
X
\change_deleted 193492759 1491893113
0
\change_unchanged
 -- A System for Automated TCP Testbed Experiments}}
\end_layout

\begin_layout Plain Layout

  
\backslash
cfoot{}
\end_layout

\begin_layout Plain Layout

  
\backslash
rfoot{
\backslash
small{
\change_deleted 1685850735 1494305486
June
\change_deleted 193492759 1517600663
May
\change_inserted 193492759 1517600663
Feb
\change_unchanged
 9, 201
\change_inserted 193492759 1517600666
8
\change_deleted 193492759 1517600667
7
\change_deleted 1685850735 1494305491
6
\change_unchanged
~~page 
\backslash
thepage ~of 
\backslash
pageref{LastPage}}} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset Newpage clearpage
\end_inset


\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
pdfbookmark{
\backslash
contentsname}{toc}
\end_layout

\begin_layout Plain Layout


\backslash
addtocontents{toc}{
\backslash
protect{
\backslash
pdfbookmark[0]{
\backslash
contentsname}{ToC}}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Over the last few decades several TCP congestion control algorithms were
 developed in order to optimise TCP's behaviour in certain situations.
 While TCP was traditionally used mainly for file transfers, more recently
 it is also becoming the protocol of choice for streaming applications,
 for example video streaming from YouTube and Netflix is TCP-based 
\begin_inset CommandInset citation
LatexCommand cite
key "Finamore2011,Rao2011"

\end_inset

 and there is an ISO standard for Dynamic Adaptive Streaming over HTTP (DASH)
 
\begin_inset CommandInset citation
LatexCommand cite
key "dash-standard"

\end_inset

.
 However, the impact of different TCP congestion control algorithms on TCP-based
 streaming flows (within a mix of other typical traffic) is not well understood.
 Experiments in a controlled testbed allow shedding more light on this issue.
 
\end_layout

\begin_layout Standard
This report
\change_inserted 193492759 1517896431

\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\change_inserted 193492759 1517896431
Available online at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

\change_inserted 193492759 1517896431

https://sourceforge.net/projects/teacup/files/TEACUP-System-v1.1.pdf
\end_layout

\end_inset

 and updating a previous report that covered TEACUP version 1.0 
\begin_inset CommandInset citation
LatexCommand cite
key "CAIA-TR-150529A"

\end_inset

.
\end_layout

\end_inset


\change_unchanged
 describes TEACUP (TCP Experiment Automation Controlled Using Python) version
 1.
\change_deleted 193492759 1493287988
0
\change_inserted 1685850735 1494305074
1
\change_deleted 1685850735 1494305073
X
\change_unchanged
 – a software tool for running automated TCP experiments in a testbed.

\change_deleted 193492759 1517650549
 It updates the previous report describing TEACUP version 0.9 
\begin_inset CommandInset citation
LatexCommand cite
key "CAIA-TR-150529A"

\end_inset

.

\change_unchanged
 The TEACUP project originated at Swinburne University of Technology's Centre
 for Advanced Internet Architectures (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://caia.swin.edu.au/tools/teacup
\end_layout

\end_inset

), and from version 1.0 the source code is freely available on SourceForge
 at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://sourceforge.net/projects/teacup
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
IEEEpubidadjcol
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Based on a 
\change_inserted 193492759 1517564145
python 
\change_unchanged
configuration file
\change_inserted 193492759 1517997363
,
\change_unchanged
 TEACUP can perform a series of experiments with different traffic mixes,
 different bottlenecks (such as bandwidths, queue mechanisms), different
 emulated network delays and/or loss rates, and different host settings
 (e.g.
 TCP congestion control algorithm).
 For each experiment TEACUP automatically collects relevant information
 that allows analysing TCP behaviour, such as tcpdump files, SIFTR 
\begin_inset CommandInset citation
LatexCommand cite
key "siftr"

\end_inset

 and Web10G 
\begin_inset CommandInset citation
LatexCommand cite
key "web10g"

\end_inset

 logs.
 A related technical report 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

 describes the design and implementation of a specific testbed designed
 to be controlled by TEACUP.
 
\end_layout

\begin_layout Standard
TEACUP also provides a number of tasks for the analysis of data collected
 during experiments.
 The analysis aspect of TEACUP is quite distinct from the tasks that actually
 run experiments and gather testbed data, hence these are described in the
 accompanying technical report 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2018_teacup_v1.1_analysis"

\end_inset

.
 
\end_layout

\begin_layout Standard
This report is organised as follows.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Design"

\end_inset

 describes the overall design of TEACUP – the testbed network model, process
 flow and use of Fabric.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Traffic-generation-and"

\end_inset

 outlines the traffic generators and logging available under TEACUP, while
 host and bottleneck router configuration is summarised in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Host-and-Router"

\end_inset

.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Config"

\end_inset

 describes the configuration options available when running experiments
 as described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Running"

\end_inset

.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Utility"

\end_inset

 describes utility functions that can be used for host maintenance.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Extending"

\end_inset

 outlines how to extend TEACUP.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Issues"

\end_inset

 lists known issues.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Conclusions"

\end_inset

 concludes and outlines future work.
\end_layout

\begin_layout Section
TEACUP 
\change_deleted 193492759 1517724735
Requirements
\change_inserted 193492759 1517724740
Motivation
\change_unchanged
 and Design
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Design"

\end_inset


\end_layout

\begin_layout Standard
This section describes the 
\change_deleted 193492759 1517724760
design 
\change_inserted 193492759 1517724748
goals that motivated 
\change_deleted 193492759 1517724750
of 
\change_unchanged
TEACUP
\change_inserted 193492759 1517724757
's design
\change_unchanged
.
 We first list the 
\change_inserted 193492759 1517724769
intended 
\change_unchanged
requirements.
 Then we describe the overall functional block design and the process flow.
 Finally, we describe the naming scheme for log files.
\end_layout

\begin_layout Subsection

\change_inserted 193492759 1517724808
Motivations and 
\change_deleted 193492759 1517724809
R
\change_inserted 193492759 1517724809
r
\change_unchanged
equirements
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517724784
The following paragraphs
\change_inserted 193492759 1517724785
Here we
\change_unchanged
 describe the requirements that motivated our design of TEACUP.
\end_layout

\begin_layout Subsubsection
General
\end_layout

\begin_layout Standard
Create a system to automate performing a series of TCP experiments with
 varying parameters.
\end_layout

\begin_layout Subsubsection
Topology
\end_layout

\begin_layout Standard
TEACUP runs experiments in a controlled environment like that shown in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Testbed-topology"

\end_inset


\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

, where one bottleneck router interconnects two 
\emph on
experiment networks
\emph default
.
 The experiment networks contain hosts that can act as traffic sources and
 sinks.
 The router, all hosts and TEACUP (on a control server) are also connected
 to a separate 
\emph on
control network
\emph default
.
\begin_inset Foot
status open

\begin_layout Plain Layout
The control server also runs a DHCP+TFTP server for the PXE boot setup described
 in 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

.
\end_layout

\end_inset

 TEACUP configures hosts before each experiment and collects data from hosts
 after each experiment.
\begin_inset Foot
status open

\begin_layout Plain Layout
If the networks are implemented as VLANs on a suitable Ethernet switch,
 TEACUP can also automate the assignment of hosts to one or the other experiment
 network and associated VLAN (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:topology_config"

\end_inset

).
 
\end_layout

\end_inset

 Where the control network is a private network, the control server may
 act as a NAT gateway enabling all testbed hosts to access the public Internet
 if necessary.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/testbed2.pdf
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Testbed-topology"

\end_inset

Testbed topology
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
TCP algorithms
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517724838
The following
\change_inserted 193492759 1517724838
Multiple
\change_unchanged
 TCP congestion control algorithms must be supported
\change_inserted 193492759 1517724842
, including
\change_unchanged
: NewReno and CUBIC (representing classic loss-based algorithms), CompoundTCP
 (Microsoft's hybrid), CDG (CAIA's hybrid), and HD (Hamilton Institutes'
 delay-based TCP).
 Optionally other TCPs may be supported.
 All the noted TCP algorithms are sender-side variants, so the destination
 can be any standard TCP implementation.
 
\end_layout

\begin_layout Subsubsection
Path characteristics
\end_layout

\begin_layout Standard
The system must be able to create bottleneck bandwidth limits to represent
 likely consumer experience (e.g.
 ADSL) and some data centre scenarios.
 Emulation of constant path delay and loss in either direction is required
 to simulate different conditions between traffic sources and sinks.
 The emulation is implemented by the bottleneck node (router).
\end_layout

\begin_layout Subsubsection
Bottleneck AQM
\end_layout

\begin_layout Standard
The following Active Queuing Management (AQM) mechanisms are required: TailDrop/
FIFO, CoDel, PIE, 
\change_inserted 193492759 1493287014
FQ-CoDel, 
\change_unchanged
RED.
 Optionally other AQM mechanisms may be supported
\change_inserted 1685850735 1488952007
, with the router being able to run either Linux or FreeBSD
\change_inserted 193492759 1493287002
 (10.3 onwards)
\change_deleted 1685850735 1488952016
.
 Since FreeBSD does not support some of the required AQMs the router must
 run Linux (but to allow comparison TEACUP also has some basic support for
 a FreeBSD router)
\change_unchanged
.
 The buffer size must be configurable.
\end_layout

\begin_layout Subsubsection
ECN Support
\end_layout

\begin_layout Standard
It must be possible to enable/disable Explicit Congestion Notification (ECN)
 on hosts and/or router.
\end_layout

\begin_layout Subsubsection
Host OS
\end_layout

\begin_layout Standard

\change_deleted 193492759 1493287058
We are
\change_inserted 193492759 1493287058
TEACUP is largely
\change_unchanged
 OS-agnostic.
 However, to cover the various TCP algorithms 
\emph on
and
\emph default
 their common implementations TEACUP must support scenarios where sources
 and/or destinations are Windows (Compound), Linux (NewReno, CUBIC), FreeBSD
 (NewReno, CUBIC, CDG, HD) or Mac OS X (NewReno).
 Cygwin is used to instrument Windows 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Traffic loads
\end_layout

\begin_layout Standard
The following traffic loads must be supported: Streaming media over HTTP/TCP
 (DASH-like), TCP bulk transfer, UDP flows (VoIP-like), and data centre
 query/response patterns (one query to 
\emph on
N
\emph default
 responders, correlated return traffic causing incast congestion).
\end_layout

\begin_layout Subsection
Overall design
\end_layout

\begin_layout Standard
TEACUP is built on Fabric 
\begin_inset CommandInset citation
LatexCommand cite
key "fabric-1.8"

\end_inset

 (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:FABRIC----Overview"

\end_inset

), a Python (2.5 or higher) library and command-line tool for streamlining
 the remote application deployment or system administration tasks using
 SSH.
 Our design is based on multiple small tasks that are combined to run an
 experiment or a series of experiments (where some may also be executed
 directly from the command line).
 Functions which are not Fabric tasks are ordinary Python functions.
 Currently, we do not make use of the object-oriented capabilities of Python.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TCPPerf-blocks"

\end_inset

 shows the main functional building blocks.
 All the blocks in the diagram have corresponding Python files.
 However, we have summarised a number of Python files in the helper_functions
 block.
 The fabfile block is the entry point for the user.
 It implements tasks for running a single experiment or a series of similar
 experiments with different parameters.
 The fabfile block also provides access to all other tasks via Python imports.
\end_layout

\begin_layout Standard
The experiment block implements the main function that controls a single
 experiment and uses a number of functions of other blocks.
 The sanity_checks block implements functions to check the config file,
 the presence of tools on the hosts, the connectivity between hosts, and
 a function to kill old processes that are still running.
 The host_setup block implements all functions to setup networking on the
 testbed hosts (including basic setup of the testbed router).
 The router_setup block implements the functions that set up the queues
 on the router and the delay/loss emulation.
 The loggers block implements the start and stop functions of the loggers,
 such as tcpdump and SIFTR/web10g loggers.
 The traffic_gens block implements the start and stop functions of all traffic
 generators.
\end_layout

\begin_layout Standard
The util block contains utility tasks that can be executed from the command
 line, such as executing a command on a number of testbed hosts or copying
 a file to a number of testbed hosts.
 The analysis block contains all the post-processing functions that extract
 measurement metrics from log files and plot graphs.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/tcpperf_blocks.pdf
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:TCPPerf-blocks"

\end_inset

TEACUP main functional blocks
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Experiment 
\change_inserted 193492759 1517692620
naming and 
\change_unchanged
process flow
\change_inserted 193492759 1517719389

\begin_inset CommandInset label
LatexCommand label
name "subsec:Experiment-naming-and"

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard

\change_inserted 193492759 1517785181
An individual experiment consists of running one or more traffic generators
 for configurable periods of time across a path emulating specific network
 conditions.
 TEACUP identifies individual experiments by their 
\series bold
test ID
\series default
, a text string used to construct experiment-specific log files (such as
 testbed metadata, captured system state and captured traffic).
 TEACUP also allows grouping of closely related experiments under a common
 
\series bold
test ID prefix
\series default
, where individual experiments (testIDs) are generated for each iteration
 over a range of values for a subset of parameters controlling testbed condition
s (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Log-file-naming"

\end_inset

).
 The test ID prefix for an experiment or group of experiments is also used
 to name distinct sub-directories for storing groups of log files and related
 metadata.
\end_layout

\begin_layout Standard
The following list explains the main steps that are executed during an experimen
t or a series of experiments.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bgroup
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand
\backslash
theenumi{
\backslash
Roman{enumi})} 
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand
\backslash
labelenumi{
\backslash
theenumi} 
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand
\backslash
theenumii{
\backslash
arabic{enumii})} 
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand
\backslash
labelenumii{
\backslash
theenumii}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Initialise and check config file
\end_layout

\begin_layout Enumerate
Get parameter combination for next experiment
\end_layout

\begin_layout Enumerate
Start experiment based on config and parameter configuration 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Log experiment
\series bold
 test ID
\series default
 in file 
\family typewriter
\size small
experiments_started.txt
\end_layout

\begin_layout Enumerate
Get host information: OS, NIC names, NIC MAC addresses
\end_layout

\begin_layout Enumerate
Reboot hosts: reboot hosts as required given the configuration 
\end_layout

\begin_layout Enumerate
Topology reconfiguration (assign hosts to subnets)
\end_layout

\begin_layout Enumerate
Get host information again: OS, NIC names, NIC MAC addresses
\end_layout

\begin_layout Enumerate
Run sanity checks 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Check that tools to be used exist
\end_layout

\begin_layout Itemize
Check connectivity between hosts
\end_layout

\begin_layout Itemize
Kill any leftover processes on hosts 
\end_layout

\end_deeper
\begin_layout Enumerate
Initialise hosts 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Configure NICs (e.g.
 disable TSO) 
\end_layout

\begin_layout Itemize
Configure ECN use 
\end_layout

\begin_layout Itemize
Configure TCP congestion control
\end_layout

\begin_layout Itemize
Initialise router queues 
\end_layout

\end_deeper
\begin_layout Enumerate
Configure router queues: set router queues based on config 
\end_layout

\begin_layout Enumerate
Log host state: log host information (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Host-info"

\end_inset

) 
\end_layout

\begin_layout Enumerate
Start all logging processes: tcpdump, SIFTR/Web10G etc.
 
\end_layout

\begin_layout Enumerate
Start all traffic generators: start traffic generators based on config 
\end_layout

\begin_layout Enumerate
Wait for experiment to finish 
\end_layout

\begin_layout Enumerate
Stop all running processes on hosts 
\end_layout

\begin_layout Enumerate
Collect all log files from logging and traffic generating processes 
\end_layout

\begin_layout Enumerate
Log experiment test ID in file 
\family typewriter
\size small
experiments_completed.txt
\end_layout

\end_deeper
\begin_layout Enumerate
If 
\change_inserted 193492759 1517692383
the config specifies 
\change_deleted 193492759 1517692385
we have 
\change_unchanged
another parameter combination to run 
\change_inserted 193492759 1517785247
under the same test ID prefix, 
\change_unchanged
go to step III, otherwise finish
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
egroup{}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:FABRIC----Overview"

\end_inset

Fabric – overview and installation
\end_layout

\begin_layout Standard
Fabric 
\begin_inset CommandInset citation
LatexCommand cite
key "fabric-1.8"

\end_inset

 provides several basic operations for executing local or remote shell commands
 and uploading/downloading files, as well as auxiliary functions, such as
 prompting the user for input, or aborting execution of the current task.
 Typically, with Fabric one creates a Python module where some functions
 are marked as Fabric tasks (using a Python function decorator).
 
\end_layout

\begin_layout Standard
These tasks can then be executed directly from the command line using the
 Fabric tool 
\family typewriter
\size small
fab
\family default
\size default
.
 The entry point of the module is a file commonly named 
\family typewriter
\size small
fabfile.py
\family default
\size default
, which is typically located in a directory from which we execute Fabric
 tasks (if the file is named differently we must use 
\family typewriter
\size small
fab -f <name>.py
\family default
\size default
).
 The complete list of tasks available in 
\family typewriter
\size small
fabfile.py
\family default
\size default
 can be viewed with the command 
\family typewriter
\size small
fab -l
\family default
\size default
.
 Parameters can be passed to Fabric tasks, however a limitation is that
 all parameter values are passed as strings.
 A Fabric task may also execute another Fabric task with Fabric's 
\family typewriter
\size small
execute()
\family default
\size default
 function.
\end_layout

\begin_layout Standard
Sections 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Running"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Utility"

\end_inset

 contain a number of examples of how to run various TEACUP tasks.
\end_layout

\begin_layout Standard
TEACUP was developed with Fabric versions 1.8–1.10, but it should also run
 with newer versions of Fabric.
 The easiest way to install the latest version of Fabric is using the tool
 
\family typewriter
\size small
pip
\family default
\size default
.
 Under FreeBSD 
\family typewriter
\size small
pip
\family default
\size default
 can be installed with 
\family typewriter
\size small
portmaster
\family default
\size default
:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> portmaster devel/py-pip
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
On Linux 
\family typewriter
\size small
pip
\family default
\size default
 can be installed with the package manager, for example on openSUSE it can
 be installed as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> zypper install python-pip
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then to install Fabric execute:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> pip install fabric
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can test that Fabric is correctly installed:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\backslash
colorbox{lightgray}{
\backslash
footnotesize
\end_layout

\end_inset


\family typewriter

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
> fab --version
\end_layout

\begin_layout Plain Layout

\family typewriter
Fabric 1.8.0 
\end_layout

\begin_layout Plain Layout

\family typewriter
Paramiko 1.12.0
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Fabric manual provides more information about installing Fabric 
\begin_inset CommandInset citation
LatexCommand cite
key "fabric-1.8-install"

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Traffic-generation-and"

\end_inset

Traffic Generation and Logging
\end_layout

\begin_layout Standard
This section describes the implemented traffic sources/sinks and loggers,
 the range of information logged and the log file naming schemes.
\end_layout

\begin_layout Subsection
Traffic sources and sinks
\end_layout

\begin_layout Standard
We now describe 
\change_deleted 193492759 1517600507
the
\change_inserted 193492759 1517600509
TEACUP's
\change_unchanged
 available traffic generator functions
\change_inserted 193492759 1517785322
 that control underlying applications such as iperf, httperf, ping and so
 forth.
 These underlying applications must be separately installed on the end hosts
 before TEACUP can control them
\change_unchanged
.
 
\change_deleted 193492759 1517600617
How these can be used
\change_inserted 193492759 1517600620
Use of these generators
\change_unchanged
 is described in more detail in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Config-traffic-generators"

\end_inset

.
\end_layout

\begin_layout Subsubsection
iperf
\end_layout

\begin_layout Standard
The tool iperf 
\begin_inset CommandInset citation
LatexCommand cite
key "iperf-web"

\end_inset

 can be used to generate TCP bulk transfer flows.
 Note that the iperf client pushes data to the iperf server, so the data
 flows in the opposite direction compared to httperf.
 iperf can also be used to generate unidirectional UDP flows with a specified
 bandwidth and two iperfs can be combined to generate bidirectional UDP
 flows.
\end_layout

\begin_layout Subsubsection
ping
\end_layout

\begin_layout Standard
This starts a ping from one host to another (
\change_inserted 193492759 1517733918
generating pairs of 
\change_unchanged
ICMP Echo
\change_inserted 193492759 1517733943
 Request and Echo Reply packets
\change_unchanged
).
 The rate of pings is configurable for FreeBSD and Linux but limited to
 one ping per second for Windows.
 
\end_layout

\begin_layout Subsubsection
lighttpd
\end_layout

\begin_layout Standard
A lighttpd 
\begin_inset CommandInset citation
LatexCommand cite
key "lighttpd"

\end_inset

 web server is started.
 This can be used as traffic source for httperf-based sinks.
 There are also scripts to setup fake content for DASH-like streaming and
 incast scenario traffic.

\change_inserted 1685850735 1489708535
 
\change_deleted 1870295737 1491538574
Additionally
\change_inserted 1870295737 1491538576
In addition
\change_inserted 1685850735 1489708535
, 
\change_deleted 1870295737 1491803520
a DASH dataset can be hosted on a setup server
\change_inserted 1870295737 1491803537
 lighttpd can be used as a web server that serve
\change_inserted 193492759 1491893478
s
\change_inserted 1870295737 1491803537
 
\change_inserted 193492759 1491893485
genuine 
\change_inserted 1870295737 1491803537
DASH content to 
\change_inserted 193492759 1491893494
a client started by 
\emph on
dash_streaming_dashjs
\change_deleted 193492759 1491893498

\emph default
dash.js
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "dashjs"

\end_inset

 client
\change_inserted 1870295737 1491803537
.
\change_deleted 1870295737 1491803488
, in order to utilise the dash.js or VLC steaming client for generating realistic
 DASH traffic.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\change_inserted 1685850735 1489708562
Potentially remove VLC mention
\change_unchanged

\end_layout

\end_inset


\change_unchanged
 However, for specific experiments one may need to setup web server content
 manually or create new scripts to do this.

\change_deleted 193492759 1517600712
 We choose lighttpd as the web server because it is leaner than some other
 popular web servers, and hence it is easier to configure and provides higher
 performance.
\change_inserted 1870295737 1517868172

\end_layout

\begin_layout Subsubsection

\change_inserted 1870295737 1517868422
nginx (new in TEACUP 1.1)
\end_layout

\begin_layout Standard

\change_inserted 1870295737 1517870328
An nginx 
\begin_inset CommandInset citation
LatexCommand cite
key "nginx"

\end_inset

 web server is started.
 This traffic source can be used as an alternative to lighttpd for serving
 genuine DASH content to a client started by 
\emph on
dash_streaming_dashjs
\emph default
.
 It is currently 
\change_inserted 193492759 1517894019
only 
\change_inserted 1870295737 1517870328
available under FreeBSD
\change_inserted 193492759 1517894007
-based
\change_inserted 1870295737 1517870328
 and Linux-based hosts
\change_deleted 193492759 1517894026
 only
\change_inserted 1870295737 1517870328
.
\change_unchanged

\end_layout

\begin_layout Subsubsection
httperf
\end_layout

\begin_layout Standard
The tool httperf 
\begin_inset CommandInset citation
LatexCommand cite
key "httperf"

\end_inset

 can be used to simulate an HTTP client.
 It can generate simple request patterns, such as accessing some .html file
 
\begin_inset Formula $n$
\end_inset

 times per second.
 It can also generate complex workloads based on work session log files
 (c.f.
 httperf man page at 
\begin_inset CommandInset citation
LatexCommand cite
key "httperf"

\end_inset

).
\change_inserted 193492759 1493288752

\end_layout

\begin_layout Subsubsection

\change_inserted 193492759 1493288753
dash_streaming_dashjs (new in TEACUP 1.1)
\end_layout

\begin_layout Standard

\change_inserted 193492759 1493288753
This starts a HTML-5 based dash.js
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "dashjs"

\end_inset

 client inside a Chrome or Firefox web-browser on one host, which then retrieves
 video content  served by a regular web server (e.g lighttpd) on other host.
 The client's host system must have Xorg, and either Chrome or Firefox installed.
\end_layout

\begin_layout Standard

\change_inserted 193492759 1493288840
In DASH systems
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "stockhammer_dash_principles"

\end_inset

, video content is encoded into multiple versions at different discrete
 bitrates (
\shape italic
representations
\shape default
).
 Each encoded video is then fragmented into small video segments (
\shape italic
chunks
\shape default
), each containing a few seconds worth of video.
 Chunks with different bitrates are all aligned in video timeline so that
 at chunk boundaries the client can smoothly switch bitrates, if necessary.
 
\end_layout

\begin_layout Standard

\change_inserted 193492759 1493288753
When a streaming session starts, DASH client will request the Media Presentation
 Description (MPD) file which describes content information (available represent
ations, metadata, download URLs), then start requesting video chunks as
 fast as possible to fill the playout buffer.
 Once the playout buffer is pre-filled, DASH client enters a steady-state
 phase where it retrieves video chunks periodically (every 
\shape italic
t
\shape default
 seconds, where 
\shape italic
t
\shape default
 is the chunk size in seconds), resulting in an ON-OFF traffic pattern as
 described in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TCP-video-streaming"

\end_inset

.
 A particular adaptive bitrate algorithm (ABR) 
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "comst_dash_abr"

\end_inset

 will be used by the client to determine the representation to be selected
 for the next video chunk.
 
\end_layout

\begin_layout Standard

\change_inserted 193492759 1493288753

\end_layout

\begin_layout Standard

\change_inserted 193492759 1517734303

\series bold
NOTE:
\series default
 
\emph on
dash_streaming_dashjs
\emph default
 uses an actual DASH client (with real ABR heuristics) with genuine video
 content.
 Setting up an appropriately configured host and using 
\emph on
dash_streaming_dashjs
\emph default
 is strongly preferred over the DASH-like traffic emulation of 
\shape italic
httperf_dash
\shape default
.
 
\end_layout

\begin_layout Subsubsection
httperf_dash
\change_inserted 193492759 1517734202
 (deprecated in TEACUP 1.1 but still available)
\change_unchanged

\end_layout

\begin_layout Standard
This starts a 
\change_deleted 193492759 1491893278
TCP video streaming 
\change_unchanged
httperf client 
\begin_inset CommandInset citation
LatexCommand cite
key "modified-httperf"

\end_inset

 that 
\change_inserted 193492759 1491893298
simplistically 
\change_unchanged
emulates the behaviour of DASH or other similar 
\change_inserted 193492759 1517734083
HTTP-based chunked-transfer 
\change_deleted 193492759 1517734087
TCP 
\change_unchanged
streaming algorithms 
\begin_inset CommandInset citation
LatexCommand cite
key "Finamore2011,Rao2011"

\end_inset

.
 In the initial buffering phase the client will download 
\change_deleted 193492759 1491893321
the first part of the
\change_unchanged
 content as fast as possible.
 Then the client will fetch 
\change_deleted 193492759 1491893326
another
\change_inserted 193492759 1491893327
successive
\change_unchanged
 block
\change_inserted 193492759 1491893329
s
\change_unchanged
 of content every 
\begin_inset Formula $t$
\end_inset

 seconds.
 
\change_deleted 193492759 1493288891

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TCP-video-streaming"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 shows an illustration of this behaviour.
 
\change_unchanged
The video rate and the cycle length are configurable (and the size of the
 data blocks depends on these).
\change_inserted 193492759 1491892966

\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/dash_streaming.pdf
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:TCP-video-streaming"

\end_inset


\change_inserted 193492759 1493288913
Simplified illustration of 
\change_unchanged
TCP 
\change_deleted 193492759 1491893361
video streaming
\change_inserted 193492759 1491893365
traffic generated by 
\change_deleted 193492759 1491893369
 (DASH
\change_inserted 193492759 1493288976

\emph on
dash_streaming_dashjs
\change_deleted 193492759 1491893369

\emph default
) behaviour
\change_unchanged

\end_layout

\end_inset


\end_layout

\end_inset


\change_inserted 193492759 1491893393

\end_layout

\begin_layout Standard

\change_inserted 193492759 1517600830

\series bold
NOTE:
\series default
 This generator is deprecated in TEACUP version 1.1.
 If you have installed the required Xorg and 
\change_deleted 1870295737 1517870313
Chromium
\change_inserted 1870295737 1517870314
Chrome
\change_inserted 193492759 1517600830
 or Firefox packages on your intended client end host, we recommend using
 
\emph on
dash_streaming_dashjs
\emph default
 to launch and control a standards-compliant DASH client.
\change_unchanged

\end_layout

\begin_layout Subsubsection
httperf_incast
\end_layout

\begin_layout Standard
This starts an httperf client for the incast scenario.
 The client will request a block of content from 
\begin_inset Formula $n$
\end_inset

 servers every 
\begin_inset Formula $t$
\end_inset

 seconds.
 The requests are sent as close together as possible to make sure the servers
 respond simultaneously.
 The size of the data blocks is configurable.
 Note that emulating the incast problem in a physical testbed is difficult,
 if the number of hosts (number of responders) is relatively small.
\end_layout

\begin_layout Subsubsection
nttcp
\end_layout

\begin_layout Standard
This starts an nttcp 
\begin_inset CommandInset citation
LatexCommand cite
key "nttcp-web"

\end_inset

 client and an nttcp server for simple unidirectional UDP VoIP flow emulation.
 The fixed packet size and inter-packet time can be configured.
 Note, nttcp also opens a TCP control connection between client and server.
 However, on this connection only a few packets are exchanged before and
 after the data flow.
 
\change_inserted 1685850735 1489014008

\end_layout

\begin_layout Subsubsection

\change_inserted 1685850735 1489014015
pktgen
\end_layout

\begin_layout Standard

\change_deleted 193492759 1491894774
The tool 
\change_inserted 193492759 1493289000
TEACUP knows how to use 
\change_inserted 1685850735 1489015187
pktgen
\change_inserted 193492759 1491893759
 0.3.1
\change_inserted 1685850735 1489015187
 
\begin_inset CommandInset citation
LatexCommand cite
key "bitss-web"

\end_inset

 
\change_deleted 193492759 1491894823
can be used
\change_inserted 1685850735 1489015187
 to 
\change_inserted 193492759 1491894707
crudely 
\change_inserted 1685850735 1489015187
emulate 
\change_inserted 193492759 1517785415
the UDP traffic of 
\change_inserted 1685850735 1489015187
first person shooter (
\change_deleted 193492759 1491894841
fps
\change_inserted 193492759 1491894841
FPS
\change_inserted 1685850735 1489015187
) game
\change_inserted 193492759 1491894897
s 
\change_deleted 193492759 1491894900
 traffic based off synthetically generated traffic of popular fps games,
\change_inserted 1685850735 1489015187
 such as Quake 
\change_inserted 193492759 1491893783
III Arena
\change_deleted 193492759 1491893781
3
\change_inserted 1685850735 1489015187
.
 
\change_unchanged
Note that
\change_inserted 193492759 1491894672
 
\change_inserted 1685850735 1489015187
pktgen 
\change_inserted 193492759 1491894715
0.3.1 
\change_unchanged
can only 
\change_inserted 1685850735 1489015187
generate a single UDP unidirectional traffic flow, so 
\change_inserted 193492759 1491894614
TEACUP launches a pair of 
\change_inserted 1685850735 1489015187
pktgen 
\change_inserted 193492759 1517785396
instances between the server and every nominated client (one sending client-to-s
erver traffic and the other sending server-to-client traffic).
 
\change_deleted 193492759 1491894696
must be run twice as many times as there are clients (half of these processes
 generate the client-to-server traffic, and half of these processes generate
 the server-to-client traffic) to emulate a real game scenario.
\change_unchanged

\end_layout

\begin_layout Subsection
Loggers
\end_layout

\begin_layout Standard
Currently, there are 
\change_deleted 193492759 1493289241
two types o
\change_inserted 193492759 1493289244
a range o
\change_unchanged
f loggers that log information on all hosts.
 All 
\change_inserted 193492759 1517600915

\emph on
host-to-host
\emph default
 and 
\emph on
cross router 
\change_unchanged

\emph default
traffic is logged with tcpdump 
\change_deleted 193492759 1493289265
and
\change_inserted 193492759 1493289266
while
\change_unchanged
 
\emph on
TCP state information
\emph default
 
\change_inserted 193492759 1493289271
on each host 
\change_unchanged
is logged with different 
\change_inserted 193492759 1493289224
OS-specific 
\change_unchanged
tools.
\end_layout

\begin_layout Subsubsection
Traffic logger
\end_layout

\begin_layout Standard
tcpdump is used to capture the traffic on all testbed NICs on all hosts.
 All traffic is captured
\change_inserted 193492759 1517785465
.
 
\change_deleted 193492759 1517785467
, but t
\change_inserted 193492759 1517785467
T
\change_unchanged
he snap size 
\change_inserted 193492759 1517788012
defaults to 80 bytes but can be increased in the config file.
\change_deleted 193492759 1517785487
is limited to 68 bytes by default.
\change_unchanged

\end_layout

\begin_layout Subsubsection
TCP statistics logger
\end_layout

\begin_layout Standard
Different tools are used to log TCP state information on all hosts except
 the router.
 On FreeBSD we use SIFTR 
\begin_inset CommandInset citation
LatexCommand cite
key "siftr"

\end_inset

.
 On Linux we use Web10G 
\begin_inset CommandInset citation
LatexCommand cite
key "web10g"

\end_inset


\change_inserted 193492759 1493289177
 (polling) or ttprobe
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "CAIA-TR-150911A"

\end_inset

 (event driven).
 Web10g
\change_deleted 193492759 1493289150
, which
\change_unchanged
 implements the TCP EStats MIB 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc4898"

\end_inset

 inside the Linux kernel, with our own logging tool based on the Web10G
 library.
 
\change_inserted 193492759 1493289164
TEACUP directly interprets ttprobe output.
 
\change_unchanged
For Windows 7 we implemented our own logging tool, which can access the
 TCP EStats MIB inside the Windows 7 kernel.
 SIFTR has not been ported to Mac OS X, so for Mac OS X we implemented our
 own logging tool that outputs TCP statistics logs in SIFTR format based
 on DTrace 
\begin_inset CommandInset citation
LatexCommand cite
key "dtrace"

\end_inset

.
 Note that the DTrace tool collects most but not all statistics collected
 by SIFTR (the tool's documentation describes the
\change_inserted 193492759 1517601043
se
\change_unchanged
 limitations).
\end_layout

\begin_layout Standard
The statistics collected by SIFTR are described in the SIFTR README 
\begin_inset CommandInset citation
LatexCommand cite
key "siftr-readme"

\end_inset

.
 The statistics collected by our Web10G client and the Windows 7 EStats
 logger are described as part of the web100 (the predecessor of Web10G)
 documentation 
\begin_inset CommandInset citation
LatexCommand cite
key "web10g-stats"

\end_inset

.
\change_inserted 193492759 1517601258

\end_layout

\begin_layout Subsection

\change_inserted 193492759 1517785813
Log file naming – syntax and structure
\begin_inset CommandInset label
LatexCommand label
name "subsec:Log-file-naming"

\end_inset


\end_layout

\begin_layout Subsubsection

\change_inserted 193492759 1517785820
test IDs and test ID prefixes
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517721941
As noted in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Experiment-naming-and"

\end_inset

, TEACUP identifies individual experiments by a 
\series bold
test ID
\series default
, a unique string used to construct names for log files specific to individual
 experiments (such as testbed metadata, captured system state and captured
 traffic).
 A test ID is constructed from a 
\series bold
test ID prefix
\series default
 and selected parameter name-value pairs describing a given experiment as
 follows:
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517719641

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517720114

\family typewriter
\size footnotesize
<testID> = <testIDprefix>_[<parName>_<parVal>_]*
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\change_inserted 193492759 1517785573
The 
\series bold
test ID prefix,
\family typewriter
\series default
\size small
 <testIDprefix>
\family default
\size default
, groups together related experiments generated by iterating over range
 of values for a subset of testbed parameters.
 This prefix is either specified in the config file 
\begin_inset Note Note
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517720725
(TPCONF_test_id
\begin_inset Foot
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517720725
Will be renamed TPCONF_test_id_prefix in a future release.
\end_layout

\end_inset

)
\change_unchanged

\end_layout

\end_inset

 or on the command line (as described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Running"

\end_inset

).
 Certain metadata common to all experiments in a group are stored under
 filenames constructed from 
\family typewriter
\size footnotesize
<testIDprefix>
\family default
\size default
 alone, rather than the full 
\family typewriter
\size footnotesize
<testID>
\family default
\size default
.
 Our recommended (and default) 
\family typewriter
\size footnotesize
<testIDprefix>
\family default
\size default
 is a string of the form `exp_YYYYMMDD-HHMMSS' (based on the date and time
 when the experiment or group of experiments was launched).
\begin_inset Foot
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517786034
Changed from the pre TEACUP v1.0 default of `YYYYMMDD-HHMMSS_experiment'
 to simplify test ID parsing.
\change_unchanged

\end_layout

\end_inset

 
\change_deleted 193492759 1517719906

\end_layout

\begin_layout Standard

\change_inserted 193492759 1517785830

\family typewriter
\size small
[<parName>_<parVal>_]*
\family default
\size default
 represents zero to 
\begin_inset Formula $n$
\end_inset

 parameter name-value pairs separated by underscores.
 Parameter names (
\family typewriter
\size small
<parName>
\family default
\size default
) must not contain underscores (by definition) and TEACUP forces all underscores
 in parameter values (
\family typewriter
\size small
<parVal>
\family default
\size default
) to hyphens when an experiment is run.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\change_inserted 193492759 1517723328
This allows later parsing of the name-value pairs using the underscores
 as separators.
 Note the default `exp_YYYYMMDD-HHMMSS' testID prefix may also be parsed
 as a parameter `exp' whose 
\emph on
value
\emph default
 is the date of an experiment (or group of experiments).
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

\change_inserted 193492759 1517785852
Grouping experiments under a test ID prefix
\change_unchanged

\end_layout

\begin_layout Standard

\change_inserted 193492759 1517786656
If an experiment is started with
\family typewriter
\size footnotesize
 
\size small
run_experiment_single
\family default
\size default
 there are no parameter name-value pairs encoded in the testID, and 
\family typewriter
\size footnotesize
<testID>
\family default
\size default
 is just
\family typewriter
\size footnotesize
 <testIDprefix>
\family default
\size default
.
 All testbed parameter values set in the experiment's config are archived
 for post-processing in a separate file named 
\family typewriter
\size footnotesize
<testIDprefix>_tpconf_vars.log.gz
\family default
\size default
.
\change_unchanged

\end_layout

\begin_layout Standard

\change_inserted 193492759 1517786096
However, the more common TEACUP use-case is to launch a group of related
 experiments with 
\family typewriter
\size small
run_experiment_multiple
\family default
\size default
, which iterates across a range of values for a subset of testbed configuration
 parameters.
 In this case each test ID has a list of parameter name-value pairs reflecting
 the list of parameter names specified in configuration variable 
\family typewriter
\size small
TPCONF_vary_parameters
\family default
\size default
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Config-defining-vars"

\end_inset

).
 We end up with as many unique test IDs under a common test ID prefix as
 there are unique combinations of parameter values for parameters listed
 in 
\family typewriter
\size small
TPCONF_vary_parameters
\family default
\size default
.
\begin_inset Foot
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517721895
In other words, the 
\family typewriter
\size footnotesize
<testID>
\family default
\size default
 only contains name-value pairs for parameters that are being varied as
 part of a group of experiments under a given 
\family typewriter
\size footnotesize
<testIDprefix>
\family default
\size default
.
 The entire set of varied and non-varied parameters are also stored in a
 separate file named 
\family typewriter
\size footnotesize
<testIDprefix>_tpconf_vars.log.gz
\family default
\size default
.
\change_unchanged

\end_layout

\end_inset

 
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517786520
Note: You can also run a single experiment using 
\family typewriter
\size small
run_experiment_multiple
\family default
\size default
.
 Do this by specifying only one possible value for any parameters listed
 in 
\family typewriter
\size small
TPCONF_vary_parameters
\family default
\size default
.
 TEACUP then runs a single experiment (as it would with 
\family typewriter
\size small
run_experiment_single
\family default
\size default
) but with a test ID containing a more informative list of parameter name-value
 pairs.
\begin_inset Foot
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517808500
In practical terms 
\family typewriter
\size footnotesize
run_experiment_single
\family default
\size default
 is a subset of 
\family typewriter
\size footnotesize
run_experiment_multiple
\family default
\size default
 that ignores the contents of 
\family typewriter
\size footnotesize
TPCONF_vary_parameters
\family default
\size default
.
\change_unchanged

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

\change_inserted 193492759 1517785899
File name formats
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517722651
Finally, most TEACUP log file and metadata file names share the following
 format:
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517719671

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517722716

\family typewriter
\size footnotesize
filename = <testID>_<host>_ [<traffgenID>_]<fileName>.<extension>[.gz]
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\change_inserted 193492759 1517601259
The 
\family typewriter
\size small
<host>
\family default
\size default
 part specifies the IP or name of the testbed host a log file was collected
 from.
 This corresponds to an entry in TPCONF_router or TPCONF_hosts.
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517651530
If the log file is from a traffic generator specified in TPCONF_traffic_gens,
 the traffic generator number follows the host identifier (
\family typewriter
\size small
[<traffgenID>]
\family default
\size default
).
 Otherwise, 
\family typewriter
\size small
<traffgenID>
\family default
\size default
 does not exist.
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517652288
The 
\family typewriter
\size small
<fileName>
\size footnotesize
 
\family default
\size default
depends on which process logged the data.
 For example it set to `uname' for uname information collected, it is set
 to `httperf_dash' for an httperf client emulating DASH, set to `web10g'
 for a Web10G log file, and so forth.
 tcpdump files are special in that they have an empty file name for tcpdumps
 collected on hosts (assuming they only have one testbed NIC), or the file
 name is 
\family typewriter
\size small
<int_name>_router
\family default
\size default
 for tcpdumps collected on the router, where <int_name> is the name of the
 NIC (e.g.
 eth1).
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517722784
The 
\family typewriter
\size small
<extension>
\family default
\size default
 is either `dmp' indicating a tcpdump file or `log' for all other log files.
 Gzip'ed log files have file names ending with `.gz'.
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517601259
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Example-file-names-1-1"

\end_inset

 shows an example name for a tcpdump file collected on host testhost2 for
 an experiment where two parameters (dash, tcp) where varied, and an example
 name for the output of one httperf traffic generator (traffic generator
 number 3) executed on host testhost2 for the same experiment.
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517601259
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517601259
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517601259

# tcpdump file collected on testhost2 for an experiment where two parameters
 where varied
\end_layout

\begin_layout Plain Layout

\change_inserted 193492759 1517601259

exp_20131206-170846_dash_1000_tcp_compound_testhost2.dmp.gz
\end_layout

\begin_layout Plain Layout

\change_inserted 193492759 1517601259

# output of httperf traffic generator (traffic generator 3) executed on
 testhost2
\end_layout

\begin_layout Plain Layout

\change_inserted 193492759 1517601259

exp_20131206-170846_dash_1000_tcp_compound_testhost2_3_httperf_dash.log.gz
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\change_inserted 193492759 1517601259
\begin_inset Caption Standard

\begin_layout Plain Layout

\change_inserted 193492759 1517601259
\begin_inset CommandInset label
LatexCommand label
name "fig:Example-file-names-1-1"

\end_inset

Example file names
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

\change_inserted 193492759 1517785922
Storing results per test ID prefix
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517787053
When using the provided launch scripts, all log files for one experiment
 (
\family typewriter
\size small
fab run_experiment_single
\family default
\size default
) or a group of experiments (
\family typewriter
\size small
fab run_experiment_multiple
\family default
\size default
) are stored under a sub directory named 
\family typewriter
\size small
<testIDprefix>
\family default
\size default
 created inside the directory where fabfile.py is located.
\begin_inset Foot
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517601259
Prior to version 0.4.7 TEACUP stored all log files in the directory where
 fabfile.py was located.
\end_layout

\end_inset


\change_unchanged

\end_layout

\begin_layout Subsection
Host 
\change_inserted 193492759 1517723487
and router 
\change_unchanged
information logg
\change_deleted 193492759 1517723492
ed
\change_inserted 193492759 1517723492
ing
\change_unchanged

\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Host-info"

\end_inset


\end_layout

\begin_layout Standard

\change_deleted 193492759 1517723556
TEACUP does not only log the
\change_inserted 193492759 1517723558
In addition to logging the
\change_unchanged
 output of traffic generators and loggers, 
\change_inserted 193492759 1517723561
TEACUP 
\change_deleted 193492759 1517723563
but 
\change_unchanged
also collects per-host
\change_inserted 193492759 1517723567
 and per-router
\change_unchanged
 information.
 This section describes the information collected for each host 
\change_inserted 193492759 1517723573
or router 
\change_unchanged
participating in an experiment.
 The following information is gathered 
\emph on
before
\emph default
 an experiment is started (where <
\change_deleted 193492759 1517651886
test_id_prefix
\change_inserted 193492759 1517651886
testIDprefix
\change_unchanged
> is a test ID prefix and <
\change_deleted 193492759 1517651939
test_id
\change_inserted 193492759 1517651939
testID
\change_unchanged
> is a test ID):
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651942
test_id
\change_inserted 193492759 1517651942
testID
\change_unchanged
>_ifconfig.log.gz: This file contains the output of 
\family typewriter
\size small
ifconfig
\family default
\size default
 (FreeBSD, Linux or MacOSX) or 
\family typewriter
\size small
ipconfig
\family default
\size default
 (Windows).
 
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651943
test_id
\change_inserted 193492759 1517651943
testID
\change_unchanged
>_uname.log.gz: This file contains the output of 
\family typewriter
\size small
uname -a
\family default
\size default
.
 
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651943
test_id
\change_inserted 193492759 1517651943
testID
\change_unchanged
>_netstat.log.gz: This file contains information about routing obtained with
 
\family typewriter
\size small
netstat -r
\family default
\size default
.
 
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651944
test_id
\change_inserted 193492759 1517651944
testID
\change_unchanged
>_ntp.log.gz: This file contains information about the NTP status based on
 
\family typewriter
\size small
ntpq -p
\family default
\size default
 (FreeBSD, Linux, MacOSX or Windows with NTP daemon installed) or 
\family typewriter
\size small
w32tm
\family default
\size default
 (Windows).
 
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651945
test_id
\change_inserted 193492759 1517651945
testID
\change_unchanged
>_procs.log.gz: This file contains the list of all running processes (output
 of 
\family typewriter
\size small
ps
\family default
\size default
).
 
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651947
test_id
\change_inserted 193492759 1517651947
testID
\change_unchanged
>_sysctl.log.gz: This file contains the output of 
\family typewriter
\size small
sysctl -a
\family default
\size default
 (FreeBSD, Linux or MacOSX) and various information for Windows.
 
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651948
test_id
\change_inserted 193492759 1517651948
testID
\change_unchanged
>_config_vars.log.gz: This file contains information about all the V_ parameters
 in config.py (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Config"

\end_inset

).
 It logs the actual parameter values for each experiment.
 It also provides an indication of whether a variable was actually used
 or not (caveat: this does not work properly with variables used for TCP
 parameter configuration, they are always shown as used).
 
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651948
test_id
\change_inserted 193492759 1517651948
testID
\change_unchanged
>_host_tcp.log.gz: This file contains information about the TCP congestion
 control algorithm used on each host, and any TCP parameters specified.
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651949
test_id
\change_inserted 193492759 1517651949
testID
\change_unchanged
>_tcpmod.log.gz: This file contains the TCP congestion control kernel module
 parameter settings (Linux only).
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651949
test_id
\change_inserted 193492759 1517651949
testID
\change_unchanged
>_ethtool.log.gz: This file contains the network interface configuration informati
on provided by 
\family typewriter
ethtool
\family default
 (Linux only).
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651889
test_id_prefix
\change_inserted 193492759 1517651889
testIDprefix
\change_unchanged
>_nameip_map.log.gz: This file logs host names and IP addresses (control interface
 IP addresses) of all hosts and routers participating in the 
\change_inserted 193492759 1517723615
experiment or group 
\change_deleted 193492759 1517723617
series 
\change_unchanged
of experiments.
\end_layout

\begin_layout Standard
The following information is gathered
\change_inserted 193492759 1517723581
 from the router
\change_unchanged
 
\emph on
after
\emph default
 an experiment:
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651951
test_id
\change_inserted 193492759 1517651951
testID
\change_unchanged
>_queue_stats.log.gz: Information about the router queue setup (including
 all queue discipline parameters) as well as router queue and filtering
 statistics based on the output of 
\family typewriter
\size small
tc
\family default
\size default
 (Linux) or
\family typewriter
\size footnotesize
 
\size small
ipfw
\family default
\size default
 (FreeBSD).

\change_deleted 193492759 1517723587
 Of course this information is collected 
\emph on
only
\emph default
 for the router.
 
\change_unchanged

\end_layout

\begin_layout Subsection
Config information logg
\change_deleted 193492759 1517723637
ed
\change_inserted 193492759 1517723637
ing
\change_unchanged

\end_layout

\begin_layout Standard
TEACUP also logs information about the configuration of each 
\change_inserted 193492759 1517723658
experiment or group
\change_deleted 193492759 1517723654
series
\change_unchanged
 of experiments and variables set for each experiment.
 The following information is gathered 
\emph on
before
\emph default
 an experiment is started (where <
\change_deleted 193492759 1517651891
test_id_prefix
\change_inserted 193492759 1517651891
testIDprefix
\change_unchanged
> is a test ID prefix and <
\change_deleted 193492759 1517651953
test_id
\change_inserted 193492759 1517651953
testID
\change_unchanged
> is a test ID):
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651954
test_id
\change_inserted 193492759 1517651954
testID
\change_unchanged
>_config_vars.log.gz: This file logs the values of all V_ variables for each
 experiment (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:variables_logged"

\end_inset

).
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651894
test_id_prefix
\change_inserted 193492759 1517651894
testIDprefix
\change_unchanged
>_config.tar.gz: This file contains copies of the config file(s) – there can
 be multiple files if Python's execfile() is used to separate the configuration
 into multiple files.
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651895
test_id_prefix
\change_inserted 193492759 1517651895
testIDprefix
\change_unchanged
>_tpconf_vars.log.gz: This file lists all TPCONF_ parameters specified in
 the config file(s) in a format that can be imported into Python.
\end_layout

\begin_layout Itemize
<
\change_deleted 193492759 1517651827
test_id_pfx
\change_inserted 193492759 1517651827
testIDprefix
\change_unchanged
>_varying_params.log.gz: This file contains a list of all V_ variables varied
 during the experiment(s) and their short names used in file names (see
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:variables_logged"

\end_inset

).
\change_inserted 193492759 1517650751

\end_layout

\begin_layout Standard

\change_deleted 193492759 1517601238
Log file naming
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517601238
The log file names of TEACUP follow a naming scheme that has the following
 format:
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517601238

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
<test_ID_pfx>_[<par_name>_<par_val>_]*_<host>_ [<traffgen_ID>_]_<file_name>.<exte
nsion>.gz
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\change_deleted 193492759 1517601238
The 
\series bold
test ID prefix
\series default
 
\family typewriter
\size small
<test_ID_pfx>
\family default
\size default
 is the start of the file name and either specified in the config file (TPCONF_t
est_id) or on the command line (as described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Running"

\end_inset

).
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517601238
The
\family typewriter
\size footnotesize
 
\size small
[<par_name>_<par_val>_]*
\family default
\size default
 is the zero to 
\begin_inset Formula $n$
\end_inset

 parameter names and parameter values (separated by an underscore).
 Parameter names (
\family typewriter
\size small
<par_name>
\family default
\size default
) should not contain underscores by definition and all underscores in parameter
 values (
\family typewriter
\size small
<par_val>
\family default
\size default
) are changed to hyphens (this allows later parsing of the names and values
 using the underscores as separators).
 If an experiment was started with
\family typewriter
\size footnotesize
 
\size small
run_experiment_single
\family default
\size default
 there are zero parameter names and values.
 If an experiment was started with
\family typewriter
\size footnotesize
 
\size small
run_experiment_multiple
\size footnotesize
 
\family default
\size default
there are as many parameters names and values as specified in TPCONF_vary_parame
ters.
 We also refer to the part 
\family typewriter
\size small
<test_ID_pfx>_[<par_name>_<par_val>_]*
\family default
\size default
 (the part before the 
\family typewriter
\size small
<host>
\family default
\size default
) as 
\series bold
test ID
\series default
.
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517601238
The 
\family typewriter
\size small
<host>
\family default
\size default
 part specifies the IP or name of the testbed host a log file was collected
 from.
 This corresponds to an entry in TPCONF_router or TPCONF_hosts.
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517601238
If the log file is from a traffic generator specified in TPCONF_traffic_gens,
 the traffic generator number follows the host identifier (
\family typewriter
\size small
[<traffgen_ID>]
\family default
\size default
).
 Otherwise, 
\family typewriter
\size small
<traffgen_ID>
\family default
\size default
 does not exist.
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517601238
The 
\family typewriter
\size small
<file_name>
\size footnotesize
 
\family default
\size default
depends on the process which logged the data, for example it set to `uname'
 for uname information collected, it is set to `httperf_dash' for an httperf
 client emulating DASH, or it set to `web10g' for a Web10G log file.
 tcpdump files are special in that they have an empty file name for tcpdumps
 collected on hosts (assuming they only have one testbed NIC), or the file
 name is <int_name>_router for tcpdumps collected on the router, where <int_name
> is the name of the NIC (e.g.
 eth1).
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517601238
The 
\family typewriter
\size small
<extension>
\family default
\size default
 is either `dmp' indicating a tcpdump file or `log' for all other log files.
 All log files are usually compressed with gzip, hence their file names
 end with `.gz'.
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517601238
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Example-file-names-1"

\end_inset

 shows an example name for a tcpdump file collected on host testhost2 for
 an experiment where two parameters (dash, tcp) where varied, and an example
 name for the output of one httperf traffic generator (traffic generator
 number 3) executed on host testhost2 for the same experiment.
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517601238
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

# tcpdump file collected on testhost2 for an experiment where two parameters
 where varied
\end_layout

\begin_layout Plain Layout

\change_inserted 1685850735 1502422218

exp_
\change_unchanged
20131206-170846_
\change_deleted 1685850735 1502422244
windows_
\change_unchanged
dash_1000_tcp_compound_testhost2.dmp.gz
\end_layout

\begin_layout Plain Layout

# output of httperf traffic generator (traffic generator 3) executed on
 testhost2
\end_layout

\begin_layout Plain Layout

\change_inserted 1685850735 1502422221

exp_
\change_unchanged
20131206-170846_
\change_deleted 1685850735 1502422247
windows_
\change_unchanged
dash_1000_tcp_compound_testhost2_3_httperf_dash.log.gz
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Example-file-names-1"

\end_inset

Example file names
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\change_deleted 193492759 1517601238
All log files for one experiment (e.g.
 fab run_experiment_single) or a series of experiments (e.g.
 fab run_experiments_multiple) are stored under a sub directory named 
\family typewriter
\size small
<test_ID_pfx>
\family default
\size default
 created inside the directory where fabfile.py is located.
\begin_inset Foot
status open

\begin_layout Plain Layout
Prior to version 0.4.7 TEACUP stored all log files in the directory where
 fabfile.py was located.
\end_layout

\end_inset


\change_unchanged

\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Host-and-Router"

\end_inset

Host and Router Configuration
\end_layout

\begin_layout Standard
This section provides a general description of how the hosts and router
 are configured for each experiment and test within an experiment.
 The router implements a bottleneck with configurable one-way delays, rate
 limits and AQM (active queue management).

\change_inserted 193492759 1517724106
 A Linux-based bottleneck router uses tc and netem (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Linux-router-setup"

\end_inset

), while a FreeBSD-based bottleneck router uses ipfw and Dummynet (section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:FreeBSD-router-setup"

\end_inset

).
 
\change_unchanged

\end_layout

\begin_layout Subsection
Host setup
\end_layout

\begin_layout Standard
The setup of hosts other than the router is relatively straight-forward.
 First
\change_inserted 193492759 1517808678
:
\end_layout

\begin_layout Itemize

\change_deleted 193492759 1517808680
, 
\change_inserted 193492759 1517808681
E
\change_deleted 193492759 1517808681
e
\change_unchanged
ach host is booted into the selected OS
\change_inserted 193492759 1517808689

\end_layout

\begin_layout Itemize

\change_deleted 193492759 1517808693
.
 Then, h
\change_inserted 193492759 1517808693
H
\change_unchanged
ardware offloading, such as TCP segmentation offloading (TSO), is disabled
 on testbed interfaces (all OS)
\change_inserted 193492759 1517808704

\end_layout

\begin_layout Itemize

\change_deleted 193492759 1517808705
, the 
\change_unchanged
TCP host cache is disabled (Linux) or configured with a very short timeout
 and purged (FreeBSD)
\change_inserted 193492759 1517808710

\end_layout

\begin_layout Itemize

\change_deleted 193492759 1517808712
, and 
\change_unchanged
TCP receive and send buffers are set to 2
\begin_inset space \thinspace{}
\end_inset

MB or more (FreeBSD, Linux).
\end_layout

\begin_layout Standard
Next
\change_inserted 193492759 1517723712
:
\end_layout

\begin_layout Itemize

\change_deleted 193492759 1517723712
 
\change_unchanged
ECN is enabled or disabled depending on the configuration
\change_inserted 193492759 1517723728

\end_layout

\begin_layout Itemize

\change_deleted 193492759 1517723732
.
 Then the 
\change_unchanged
TCP congestion control algorithm is configured for FreeBSD and Linux (including
 loading any necessary kernel modules)
\change_deleted 193492759 1517723738
.
 Then the p
\change_inserted 193492759 1517723740

\end_layout

\begin_layout Itemize

\change_inserted 193492759 1517723739
P
\change_unchanged
arameters for the current TCP congestion control algorithm are configured
 if specified by the user (FreeBSD, Linux).
\change_inserted 193492759 1517723717

\end_layout

\begin_layout Standard

\change_deleted 193492759 1517723716
 
\change_unchanged
Finally,
\change_deleted 193492759 1517723782
 custom
\change_unchanged
 user-specified
\change_inserted 193492759 1517723786
 custom
\change_unchanged
 commands are executed on hosts as specified in the configuration (these
 can overrule the general setup).
\end_layout

\begin_layout Subsection
Linux
\change_inserted 193492759 1517808748
-based bottleneck
\change_unchanged
 router setup
\change_inserted 193492759 1517724070

\begin_inset CommandInset label
LatexCommand label
name "subsec:Linux-router-setup"

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard

\change_deleted 193492759 1493287264
The router setup differs between FreeBSD (where ipfw and Dummynet is used)
 and Linux (where tc and netem is used).
 
\change_deleted 1685850735 1491955771
Our main focus is Linux, because Linux supports more AQM mechanisms than
 FreeBSD and some of the required AQM mechanisms are only implemented on
 Linux.
\change_unchanged

\end_layout

\begin_layout Standard
First, hardware offloading, such as TCP segmentation offloading (TSO) is
 disabled on the two testbed interfaces.
 Then, the queuing is configured.
 In the following two sub sections we first describe our overall approach
 to setup rate limiting, AQM and delay/loss emulation for the Linux router.
 Then, we describe an example setup to illustrate the approach in practice.
\end_layout

\begin_layout Subsubsection
Approach
\end_layout

\begin_layout Standard

\change_deleted 193492759 1493287398
We use the following approach.
 
\change_unchanged
Shaping, AQM and delay/loss emulation is done on the egress NIC (as usual).
 To filter packets and direct them into the `pipes' we use netfilter 
\begin_inset CommandInset citation
LatexCommand cite
key "netfilter"

\end_inset

.
 The hierarchical token bucket (HTB) queuing discipline is used for rate
 limiting with the desired AQM queuing discipline (e.g.
 pfifo, codel) as leaf node (this is similar to a setup mentioned at 
\begin_inset CommandInset citation
LatexCommand cite
key "bufferbloat-bcp"

\end_inset

).
 After rate shaping and AQM, constant loss and delay is emulated with netem
 
\begin_inset CommandInset citation
LatexCommand cite
key "netem"

\end_inset

.
 For each pipe we set up a new tc class on the two testbed NICs of the router.
 If pipes are unidirectional, a class is only used on one of the two interfaces.
 Otherwise it is used on both interfaces.
 In future work we could optimise the unidirectional case and omit the creation
 of unused classes.
 
\end_layout

\begin_layout Standard
The traffic flow is as follows (also see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Flow-of-packets"

\end_inset

): 
\end_layout

\begin_layout Enumerate
Arriving packets are marked at the netfilter mangle table's POSTROUTING
 hook depending on source and destination IP address with a unique mark
 for each pipe.
\begin_inset Foot
status open

\begin_layout Plain Layout
There also is a dummy rule "MARK and 0x0" inserted first, which is used
 to count all packets going through the POSTROUTING hook.
 Note that since this dummy rule has `anywhere' specified for source and
 destination, it also counts packets going through the router's control
 interface.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Marked packets are classified into the appropriate class based on the mark
 (a one-to-one mapping between marks and classes) and redirected to a pseudo
 interface.
 With pseudo device we refer to the so-called intermediate function block
 (IFB) device 
\begin_inset CommandInset citation
LatexCommand cite
key "ifb-device"

\end_inset

.
 
\end_layout

\begin_layout Enumerate
The traffic control rules on the pseudo interface do the shaping with HTB
 (bandwidth as per config) and the chosen AQM (as a leaf queuing discipline).
 
\end_layout

\begin_layout Enumerate
Packets go back to the actual outgoing interface.
 
\end_layout

\begin_layout Enumerate
The traffic control rules on the actual interface do network delay/loss
 emulation with netem.
 We still need classes here to allow for pipe specific delay/loss settings.
 Hence we use a HTB again, but with the bandwidth set to the maximum possible
 rate (so there is effectively no rate shaping or AQM here) and netem plus
 pfifo are used as leaf queuing discipline.
\begin_inset Foot
status open

\begin_layout Plain Layout
The netem queue has a hard-coded size of 1000 packets, which should be large
 enough for our targeted experimental parameter space.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Packets leave the router via the stack and network card driver.
\end_layout

\begin_layout Standard
The main reason for this setup with pseudo interfaces is to cleanly separate
 the rate limiting and AQM from the netem delay/loss emulation.
 One could combine both on the same interface, but then there are certain
 limitation, such as netem must be before the AQM and 
\begin_inset CommandInset citation
LatexCommand cite
key "bufferbloat-bcp"

\end_inset

 reported that in such a setup netem causes problems.
 Also, a big advantage with our setup is that it is possible to emulate
 different delay or loss for different flows that share the same bottleneck/AQM.
 
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
We now show an example of the setup based on partial (and for convenience
 reordered) output of a queue_stats.log.gz file for a scenario with two unidirecti
onal pipes: 8
\begin_inset space \thinspace{}
\end_inset

Mbps downstream and 1
\begin_inset space \thinspace{}
\end_inset

Mbps upstream, both with 30
\begin_inset space \thinspace{}
\end_inset

ms delay and 0% loss.
\end_layout

\begin_layout Standard
First, Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Netfilter-marking-rules"

\end_inset

 shows the netfilter marking rules.
 Our upstream direction is 172.16.10.0/24 to 172.16.11.0/24 and all packets are
 given the mark 0x1.
 Our downstream direction is 172.16.11.0/24 to 172.16.10.0/24 and all packets
 are given the mark 0x2.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\backslash
footnotesize
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
> iptables -t mangle -vL 
\end_layout

\begin_layout Plain Layout

\family typewriter
Chain POSTROUTING (policy ACCEPT 52829 packets, 69M bytes) pkts bytes target
 prot opt in out source destination 
\end_layout

\begin_layout Plain Layout

\family typewriter
52988 69M MARK all -- any any anywhere anywhere MARK and 0x0 
\end_layout

\begin_layout Plain Layout

\family typewriter
22774 1202K MARK all -- any any 172.16.10.0/24 172.16.11.0/24 MARK set 0x1 
\end_layout

\begin_layout Plain Layout

\family typewriter
28936 66M MARK all -- any any 172.16.11.0/24 172.16.10.0/24 MARK set 0x2
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Netfilter-marking-rules"

\end_inset

Netfilter marking rules
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the upstream direction our outgoing interface is eth3 and we have the
 tc filters shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:tc-filter-outgoing"

\end_inset

, which put each packet with mark 0x1 in class 1:1 and redirect it to pseudo
 interface ifb1.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\backslash
footnotesize
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
> tc -s filter show dev eth3 
\end_layout

\begin_layout Plain Layout

\family typewriter
filter parent 1: protocol ip pref 49152 fw 
\end_layout

\begin_layout Plain Layout

\family typewriter
filter parent 1: protocol ip pref 49152 fw handle 0x1 classid 1:1 
\end_layout

\begin_layout Plain Layout

\family typewriter
action order 33: mirred (Egress Redirect to device ifb1) stolen 
\end_layout

\begin_layout Plain Layout

\family typewriter
index 3266 ref 1 bind 1 installed 99 sec used 12 sec 
\end_layout

\begin_layout Plain Layout

\family typewriter
Action statistics: 
\end_layout

\begin_layout Plain Layout

\family typewriter
Sent 1520865 bytes 22774 pkt (dropped 0, overlimits 0 requeues 0) 
\end_layout

\begin_layout Plain Layout

\family typewriter
backlog 0b 0p requeues 0 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:tc-filter-outgoing"

\end_inset

tc filter on outgoing network interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that the class setting is effective for eth3, but it will not `stick'
 across interfaces.
 Hence we need to set the class again on ifb1 as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:tc-filter-pseudo"

\end_inset

 (again class 1:1 is set if the mark is 0x1).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\backslash
footnotesize
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
> tc -d -s filter show dev ifb1 
\end_layout

\begin_layout Plain Layout

\family typewriter
filter parent 1: protocol ip pref 49152 fw 
\end_layout

\begin_layout Plain Layout

\family typewriter
filter parent 1: protocol ip pref 49152 fw handle 0x1 classid 1:1 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:tc-filter-pseudo"

\end_inset

tc filter on pseudo interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
On ifb1 we use the queuing discipline setup as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:queue-disc-pseudo"

\end_inset

.
 The HTB does the rate limiting to 1
\begin_inset space \thinspace{}
\end_inset

Mbps.
 Here 
\change_inserted 1685850735 1489016841
t
\change_unchanged
he leaf queuing discipline is a bfifo (byte FIFO) with a buffer size of
 18.75
\begin_inset space \thinspace{}
\end_inset

kB.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\backslash
footnotesize
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
> tc -d -s class show dev ifb1 
\end_layout

\begin_layout Plain Layout

\family typewriter
class htb 1:1 root leaf 1001: prio 0 quantum 12500 rate 1000Kbit ceil 1000Kbit
 burst 1600b/1 mpu 0b overhead 0b cburst 1600b/1 mpu 0b overhead 0b level
 0 
\end_layout

\begin_layout Plain Layout

\family typewriter
Sent 1520865 bytes 22774 pkt (dropped 0, overlimits 0 requeues 0) 
\end_layout

\begin_layout Plain Layout

\family typewriter
rate 62112bit 117pps backlog 0b 0p requeues 0 
\end_layout

\begin_layout Plain Layout

\family typewriter
lended: 22774 borrowed: 0 giants: 0 
\end_layout

\begin_layout Plain Layout

\family typewriter
tokens: 191750 ctokens: 191750
\end_layout

\begin_layout Plain Layout

\family typewriter
> tc -d -s qdisc show ifb1 
\end_layout

\begin_layout Plain Layout

\family typewriter
qdisc htb 1: dev ifb1 root refcnt 2 r2q 10 default 0 direct_packets_stat
 0 ver 3.17 
\end_layout

\begin_layout Plain Layout

\family typewriter
Sent 1520865 bytes 22774 pkt (dropped 0, overlimits 0 requeues 0) 
\end_layout

\begin_layout Plain Layout

\family typewriter
backlog 0b 0p requeues 0 
\end_layout

\begin_layout Plain Layout

\family typewriter
qdisc bfifo 1001: dev ifb1 parent 1:1 limit 18750b 
\end_layout

\begin_layout Plain Layout

\family typewriter
Sent 1520865 bytes 22774 pkt (dropped 0, overlimits 0 requeues 0) 
\end_layout

\begin_layout Plain Layout

\family typewriter
backlog 0b 0p requeues 0 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:queue-disc-pseudo"

\end_inset

Queuing discipline setup on pseudo interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
After packets are through the bfifo, they are passed back to eth3 where
 we have an HTB with maximum rate and netem as leaf queuing discipline (here
 netem emulates 30
\begin_inset space \thinspace{}
\end_inset

ms constant delay) as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:queue-disc-outgoing"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\backslash
footnotesize
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
> tc -d -s class show dev eth3 
\end_layout

\begin_layout Plain Layout

\family typewriter
class htb 1:1 root leaf 1001: prio 0 rate 1000Mbit ceil 1000Mbit burst 1375b
 cburst 1375b 
\end_layout

\begin_layout Plain Layout

\family typewriter
Sent 1520865 bytes 22774 pkt (dropped 0, overlimits 0 requeues 0) 
\end_layout

\begin_layout Plain Layout

\family typewriter
rate 62184bit 117pps backlog 0b 0p requeues 0 
\end_layout

\begin_layout Plain Layout

\family typewriter
lended: 22774 borrowed: 0 giants: 0 
\end_layout

\begin_layout Plain Layout

\family typewriter
tokens: 178 ctokens: 178
\end_layout

\begin_layout Plain Layout

\family typewriter
> tc -d -s qdisc show eth3 
\end_layout

\begin_layout Plain Layout

\family typewriter
qdisc htb 1: dev eth3 root refcnt 9 r2q 10 default 0 direct_packets_stat
 3 ver 3.17 
\end_layout

\begin_layout Plain Layout

\family typewriter
Sent 1520991 bytes 22777 pkt (dropped 0, overlimits 66602 requeues 0) 
\end_layout

\begin_layout Plain Layout

\family typewriter
backlog 0b 0p requeues 0 
\end_layout

\begin_layout Plain Layout

\family typewriter
qdisc netem 1001: dev eth3 parent 1:1 limit 1000 delay 30.0ms 
\end_layout

\begin_layout Plain Layout

\family typewriter
Sent 1520865 bytes 22774 pkt (dropped 0, overlimits 0 requeues 0) 
\end_layout

\begin_layout Plain Layout

\family typewriter
backlog 0b 0p requeues 0
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:queue-disc-outgoing"

\end_inset

Queuing discipline setup on outgoing interface (netem)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
After leaving netem the packets are passed to the stack which then passes
 them to the NIC driver.
 For the sake of brevity we are not describing the downstream direction
 here, but the principle is exactly the same.
 The only differences are the interfaces used (eth2 and ifb0 instead of
 eth3 and ifb1) and the different HTB, AQM and netem parameters.
 
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Flow-of-packets"

\end_inset

 shows the flow of packets with the different steps carried out in the order
 of the numbers in parenthesis.
 The marking/classifying is not shown explicitly, it takes place between
 step 1 and 2 (netfilter and class on actual interface) and between step
 2 and 3 (class on pseudo interface).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/linux_router_setup_example_packet_flow.pdf
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Flow-of-packets"

\end_inset

Flow of packets through our queue setup
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can see that with our setup it is possible to emulate different delay
 or loss for different flows that share the same bottleneck/AQM.
 Multiple tc filters on the ifb interface can classify different flows as
 the same class so they share the same bottleneck.
 However, on the eth interface we can have one class and one netem queue
 per flow and the tc filters classify each flow into a different class.
\end_layout

\begin_layout Subsubsection
Notes
\end_layout

\begin_layout Standard
Note that in addition to the buffers mentioned earlier, according to 
\begin_inset CommandInset citation
LatexCommand cite
key "bufferbloat-bcp"

\end_inset

 the HTB queuing discipline has a built-in buffer of one packet (that cannot
 be changed) and the device drivers also have separate buffers.
\end_layout

\begin_layout Subsection
FreeBSD
\change_inserted 193492759 1517808761
-based bottleneck
\change_unchanged
 router setup
\change_inserted 193492759 1517724081

\begin_inset CommandInset label
LatexCommand label
name "subsec:FreeBSD-router-setup"

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard

\change_deleted 1685850735 1491956158
While a Linux router is our main focus, we also implemented a basic router
 queue setup for FreeBSD.
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517724168
TEACUP can utilise AQM capabilities built into ipfw/dummynet for bottleneck
 routers based on FreeBSD 10.3 or later (as documented in CAIA-TR-160708A
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "FreeBSD_dummynet"

\end_inset

).
 
\end_layout

\begin_layout Standard

\change_deleted 193492759 1493287647
On FreeBSD e
\change_inserted 193492759 1493287647
E
\change_unchanged
ach pipe is realised as one 
\change_deleted 193492759 1493287678
D
\change_inserted 193492759 1493287678
d
\change_unchanged
ummynet pipe, which does the rate shaping, 
\change_inserted 193492759 1493287662
queuing, and 
\change_unchanged
loss/delay emulation
\change_deleted 193492759 1493287666
 and queuing
\change_deleted 1685850735 1491956195
 (FIFO or RED only)
\change_unchanged
.
 ipfw rules are used to redirect packets to the pipes based on the specified
 source and destination IP parameters.
 If a pipe is unidirectional then there is a single "
\family typewriter
\size small
pipe <num> ip from <source> to <dest> out
\family default
\size default
" rule.
 If a pipe is bidirectional there is an additional "
\family typewriter
\size small
pipe <num> ip from <dest> to <source> out
\family default
\size default
" rule.
 The pipe number 
\change_deleted 193492759 1494481297
<num>
\change_inserted 193492759 1494481297

\family typewriter
\size small
<num>
\change_unchanged

\family default
\size default
 is automatically determined by TEACUP.

\change_deleted 1685850735 1491956145
 A more sophisticated setup for FreeBSD remains future work.
 
\change_inserted 1685850735 1491956648

\end_layout

\begin_layout Subsubsection

\change_inserted 1685850735 1491956712
Setting up ipfw/dummynet for AQM experiments
\end_layout

\begin_layout Standard

\change_inserted 1685850735 1491957101
The three main object types (link, queue and scheduler) are required for
 
\change_inserted 1870295737 1517871164
d
\change_deleted 1870295737 1517871164
D
\change_inserted 1685850735 1491957101
ummynet to setup a functional pipe.
 These object provide the following: 
\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1491956877
Link object - provides traffic shaping, network delay and loss emulation
 functions.
 
\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1491956960
Queue object - configurable-size buffer that is used to store packets temporaril
y to absorb network bursts, and managed by a queue management scheme (Droptail,
 RED, CoDel or PIE).
\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1491956974
Scheduler object - responsible for fetching packets from queues and send
 them through the connected link.
 
\end_layout

\begin_layout Standard

\change_inserted 193492759 1493287765
TEACUP directs 
\change_deleted 193492759 1493287737
D
\change_inserted 193492759 1493287737
d
\change_inserted 1685850735 1491958062
ummynet
\change_inserted 193492759 1493287749
 to
\change_inserted 1685850735 1491958062
 create
\change_deleted 193492759 1493287750
s
\change_inserted 1685850735 1491958062
 all three objects and connect
\change_deleted 193492759 1493287753
s
\change_inserted 1685850735 1491958062
 them together to form a new pipe, which can then be added to ipfw rules.
 For a multi-queue scheduler, such as QFQ and RR, they can serve multiple
 queues depending on the scheduling algorithm.
 Each 
\change_deleted 193492759 1493287789
one of these 
\change_inserted 1685850735 1491958062
queue
\change_deleted 193492759 1493287791
s
\change_inserted 1685850735 1491958062
 can be configured with different size and AQM.
\end_layout

\begin_layout Standard

\change_inserted 1685850735 1491960927
For more complex AQM schemes such as FQ-CoDel, the scheduler implements
 as a single-queue scheduler with multiple internal sub-queue managed by
 a non FQ AQM (CoDel for FQ-CoDel).
 To configure a pipe for FQ-CoDel
\change_inserted 193492759 1494481345
 or FQ-
\change_deleted 193492759 1494481346
/
\change_inserted 1685850735 1491960927
PIE, a queue, scheduler and link should be created separately and be connected
 together, then the created queue should be added to ipfw rules.
\end_layout

\begin_layout Subsubsection

\change_inserted 1685850735 1491961170
Ensuring same delays for all flows in Dummynet pipe
\end_layout

\begin_layout Standard

\change_inserted 1685850735 1491961782
TEACUP generates and runs ipfw commands based on router queues configurations
 in config.py.
 For each tuple in a queues configuration, TEACUP creates a 
\change_inserted 1870295737 1517871175
d
\change_deleted 1870295737 1517871174
D
\change_inserted 1685850735 1491961782
ummynet pipe with a specific amount of rate limiting, delay and loss emulation.
 If 
\family typewriter
\size small
queue_disc
\family default
\size default
 argument is a pure queue management name (‘fifo’, ‘codel’ or ‘pie’), TEACUP
 sets the queue size limit (if any) to the pipe, and adds it to ipfw rule.
 
\end_layout

\begin_layout Standard

\change_inserted 1685850735 1491962318
If 
\change_deleted 193492759 1494481386
queue_disc
\change_inserted 193492759 1494481386

\family typewriter
\size small
queue_disc
\change_inserted 1685850735 1491962318

\family default
\size default
 argument is set to an fq variant (‘fq_codel’ or ‘fq_pie’), TEACUP creates
 a queue and respective scheduler, and sets the queue size limit to the
 scheduler.
 This queue size limit is for whole sub-queues that were created by the
 fq scheduler.
 The created queue is then added to ipfw rules.
 For a detailed example and more in depth explanation of how FreeBSD router
 is setup for TEACUP, 
\change_inserted 193492759 1493289470
see 
\change_deleted 193492759 1494481386
the technical report 
\begin_inset CommandInset citation
LatexCommand cite
key "FreeBSD_dummynet"

\end_inset

 can be viewed
\change_inserted 193492759 1493289481
CAIA-TR-160708A
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "FreeBSD_dummynet"

\end_inset


\change_inserted 1685850735 1491962318
.
 
\end_layout

\begin_layout Section
Config File
\change_inserted 193492759 1517895427
 – format and functionality 
\change_unchanged

\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Config"

\end_inset


\end_layout

\begin_layout Standard
This section describes TEACUP's top-level 
\series bold
config.py
\series default
 file that 
\change_deleted 193492759 1517787139
controls
\change_inserted 193492759 1517787154
defines the parameters and conditions of
\change_unchanged
 
\change_deleted 193492759 1517787158
the
\change_inserted 193492759 1517787164
an experiment or group of
\change_unchanged
 experiments.

\change_inserted 193492759 1517894462
 Available traffic generators are summarised in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Config-traffic-generators"

\end_inset

.
\change_unchanged

\end_layout

\begin_layout Subsection

\change_deleted 193492759 1517894494
Config file l
\change_inserted 193492759 1517894494
L
\change_unchanged
ocation
\change_inserted 193492759 1517894501
 of config.py
\change_unchanged

\end_layout

\begin_layout Standard
By default TEACUP will load the config.py file that is in the directory where
 fabfile.py is located – the directory from which experiments are started.
 Since TEACUP version 0.9, alternative config files can be specified using
 fab's 
\family typewriter
\size footnotesize
--set
\family default
\size default
 parameter.
 For example, if we want to run a series of experiments with the configuration
 in myconfig.py, we simple need to run TEACUP as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab --set teacup_config=myconfig.py run_experiment_multiple
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
V_variables
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517894570
To iterate over parameter settings for each experiment 
\change_unchanged
TEACUP uses 
\emph on
V_variables
\change_inserted 193492759 1517894565

\emph default
 to support iteratation over a range of parameter values for groups of experimen
ts
\change_unchanged
.
 These are identifiers of the form V_<name>, where <name> must consist of
 only letters, numbers, hyphens (-) or underscores (_).
 V_variables can be used in router queue settings (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Config-router-queues"

\end_inset

), traffic generator settings (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Config-traffic-generators"

\end_inset

), TCP algorithm settings (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Config-mandatory-vars"

\end_inset

) or host setup commands (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Config-custom-host-setup"

\end_inset

).
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Config-defining-vars"

\end_inset

 describes how to define V_variables.
\end_layout

\begin_layout Subsection
Fabric configuration
\end_layout

\begin_layout Standard
The following settings in the config file are Fabric settings.
 For a more in-depth description refer to the Fabric documentation 
\begin_inset CommandInset citation
LatexCommand cite
key "fabric-1.8"

\end_inset

.
 All Fabric settings are part of the Fabric 
\family typewriter
\size small
env
\family default
\size default
 dictionary and hence are Python variables (and must adhere to the Python
 syntax).
\end_layout

\begin_layout Standard
The user used for the SSH login is specified with env.user.
 For example:
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
env.user = 'root'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The password used for the SSH login is specified with env.password.
 The password can be empty if public-key authorisation is set up properly,
 e.g.
 the public SSH key of the control PC running TEACUP has been added to all
 hosts 
\family typewriter
\size small
<user>/.ssh/authorized_keys
\family default
\size default
 files (and the corresponding private key on the control host is 
\family typewriter
\size small
~/.ssh/id_rsa
\family default
\size default
 or a file 
\family typewriter
\size small
<key_file>
\family default
\size default
 specified with 
\family typewriter
\size small
fab -i <key_file>
\family default
\size default
 or the 
\family typewriter
\size small
env.key_filename
\family default
\size default
 configuration parameter 
\begin_inset CommandInset citation
LatexCommand cite
key "fabric-1.8"

\end_inset

).
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
env.password = 'testroot'
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\change_deleted 193492759 1494481597
The
\change_inserted 193492759 1494481619
Use env.shell to specify the
\change_unchanged
 shell used to execute commands
\change_deleted 193492759 1494481622
 is specified with env.shell
\change_unchanged
.
 
\change_deleted 193492759 1494481646
By default
\change_unchanged
 Fabric
\change_inserted 193492759 1494481674
's default, 
\change_deleted 193492759 1494481677
 uses 
\change_unchanged
Bash, 
\change_deleted 193492759 1494481684
but Bash 
\change_unchanged
is not standard on FreeBSD
\change_inserted 193492759 1494481689
 so
\change_deleted 193492759 1494481664
.
 So
\change_unchanged
 TEACUP's default setting is:
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
env.shell = '/bin/sh -c'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The timeout for an SSH connection is specified with env.timeout.
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
env.timeout = 5
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The number of concurrent processes used for parallel execution is specified
 with env.pool_size.
 The number should be at least as high as the number of hosts, unless the
 number of hosts is large in which case we may want to limit the number
 of concurrent processes.
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
env.pool_size = 10
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Testbed configuration
\end_layout

\begin_layout Standard
All TEACUP 
\change_inserted 193492759 1517787246
config file 
\change_unchanged
settings start with the 
\size small
\emph on
TPCONF_
\size default
\emph default
 prefix
\change_inserted 193492759 1517787255
.
 They
\change_deleted 193492759 1517787258
 and
\change_unchanged
 are Python variables 
\change_deleted 193492759 1517787262
(
\change_unchanged
and must adhere to the Python syntax
\change_deleted 193492759 1517787265
)
\change_unchanged
.
\end_layout

\begin_layout Standard
TPCONF_script_path specifies the path to the TEACUP scripts, and is appended
 to the Python path.
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_script_path = '/home/test/src/teacup'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Two lists specify the 
\change_inserted 193492759 1517787569
roles of each 
\change_unchanged
testbed host
\change_inserted 193492759 1517787785
 machine
\change_deleted 193492759 1517787572
s
\change_unchanged
.
 TPCONF_router specifies the list of
\change_inserted 193492759 1517787790
 machines to be configured as software
\change_unchanged
 routers
\change_inserted 193492759 1517787799
 (typically only one in a dumbbell configuration)
\change_unchanged
.

\change_deleted 193492759 1517787477
 Note that prior to TEACUP version 0.9 the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

TPCONF_router
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 list was limited to only one router
\change_inserted 193492759 1517787477

\begin_inset Foot
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517787496
Prior to TEACUP version 0.9 the 
\begin_inset ERT
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517787477


\backslash
mbox{
\end_layout

\end_inset

TPCONF_router
\begin_inset ERT
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517787477

}
\end_layout

\end_inset

 list was limited to only one router, but this limitation has been relaxed.
\change_unchanged

\end_layout

\end_inset


\change_deleted 193492759 1517787510
.
 Since version 0.9 a list of routers can be specified.

\change_unchanged
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

TPCONF_hosts
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 specifies the list of 
\change_deleted 193492759 1517787815
hosts
\change_inserted 193492759 1517787815
machines to be configured as traffic sources and/or sinks (end hosts)
\change_unchanged
.
 Router
\change_inserted 193492759 1517787833
(s)
\change_unchanged
 and 
\change_inserted 193492759 1517787740
end 
\change_unchanged
hosts can be specified as IP addresses or 
\change_inserted 193492759 1517787852
human-readable 
\change_unchanged
host names (typically for convenience just the name without the domain part).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_router = [ 'testhost1', ] 
\end_layout

\begin_layout Plain Layout

TPCONF_hosts = [ 'testhost2', 'testhost3' ]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The dictionary TPCONF_host_internal_ip specifies the testbed IP addresses
 for each host.
 The hosts (keys) specified must match the entries in the TPCONF_router
 and TPCONF_hosts lists exactly.
 The current code does simple string matching, it does 
\emph on
not
\emph default
 attempt to resolve host identifiers into some canonical form
\size small
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_host_internal_ip = { 
\end_layout

\begin_layout Plain Layout

'testhost1' : ['172.16.10.1','172.16.11.1'], 
\end_layout

\begin_layout Plain Layout

'testhost2' : ['172.16.10.2'], 
\end_layout

\begin_layout Plain Layout

'testhost3' : ['172.16.10.3'], 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Sanity checks settings
\end_layout

\begin_layout Standard
By default TEACUP checks the connectivity between testbed hosts by performing
 a ping from each host to each other host that should be reachable (according
 to the router configuration and IP address configuration of the hosts).
 This check is carried out before each experiment.
 During a series of experiments the testbed is likely in a stable condition
 and the repeated connectivity check may be unnecessary.
 It can be turned off by setting the variable TPCONF_check_connectivity
 to `0', i.e.
 adding the following line to the config file:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_check_connectivity = '0' 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
General experiment settings
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Experiment-general-settings"

\end_inset


\end_layout

\begin_layout Standard
TPCONF_test_id specifies the default test ID 
\series bold
prefix
\series default
.
 Note that if the test ID prefix is specified on the command line, the command
 line overrules this setting.

\change_inserted 193492759 1517895511
 For example, TEACUP's default test ID prefix can be set by:
\change_unchanged

\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

now = datetime.datetime.today() 
\end_layout

\begin_layout Plain Layout

TPCONF_test_id = 
\change_inserted 193492759 1517737418

\end_layout

\begin_layout Plain Layout

\change_inserted 193492759 1517737429

   'exp_'
\change_unchanged
now.strftime("%Y%m%d-%H%M%S")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TPCONF_remote_dir specifies the directory on the remote host
\change_inserted 193492759 1517895579
(s)
\change_unchanged
 where the log files (e.g.
 tcpdump, SIFTR) are 
\change_inserted 193492759 1517895546
temporarily 
\change_unchanged
stored during an experiment.
 
\change_inserted 193492759 1517895556
These 
\change_deleted 193492759 1517895556
F
\change_inserted 193492759 1517895559
f
\change_unchanged
iles are 
\change_inserted 193492759 1517895567
copied back to the control host and 
\change_unchanged
deleted 
\change_inserted 193492759 1517895575
from the remote host(s) 
\change_unchanged
automatically at the end of an experiment
\change_inserted 193492759 1493289762
.
\change_deleted 193492759 1517895627
, however if an experiment is interrupted files can remain.
 Currently, there is no automatic cleanup of the directory to remove left-over
 files.
\change_inserted 193492759 1517895627

\begin_inset Foot
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517895681
Files can remain if an experiment is interrupted.
 There is currently no automatic cleanup of left-over files in the remote
 directory.
\change_unchanged

\end_layout

\end_inset


\change_deleted 1685850735 1489017744
, but if an experiment is interrupted files can remain.
 Currently, there is no automatic cleanup of the directory to remove left-over
 files.
\change_unchanged

\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_remote_dir = '/tmp/'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TEACUP performs a very simple time synchronisation check at the start (after
 waiting for more than 30 seconds after the hosts were rebooted).
 It checks the time offset between the control host (the host that executes
 TEACUP) and each testbed host listed in the config file.
 TPCONF_max_time_diff specifies the maximum tolerable clock offset, i.e.
 the maximum allowed time difference in seconds.
 If the clock offset for one of the testbed hosts is too large, TEACUP will
 abort the experiment or series of experiments.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\change_deleted 193492759 1517895771

TPCONF_max_time_diff = 1
\change_inserted 193492759 1517895771
TPCONF_max_time_diff = 2
\change_unchanged

\end_layout

\end_inset


\end_layout

\begin_layout Standard
TPCONF_debug_level specifies the debug level for experiments
\change_inserted 193492759 1494481996
 and later analysis
\change_unchanged
.
 At the default level of 0, no debug information is generated.
 If 
\change_deleted 193492759 1493289886
the variable is 
\change_unchanged
set to a higher value debug information is generated
\change_inserted 193492759 1493289896
.
 
\change_deleted 193492759 1493289896
, f
\change_inserted 193492759 1494482022
(F
\change_unchanged
or example at a debug level of 1
\change_inserted 193492759 1494482001
,
\change_unchanged
 
\family typewriter
\size small
.Rout
\family default
\size default
 files are generated when plotting graphs
\change_inserted 193492759 1494482015
 during later analysis
\change_unchanged
.
\change_inserted 193492759 1494482019
)
\change_unchanged

\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_debug_level = 0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The parameter TPCONF_web10g_poll_interval allows
\change_deleted 193492759 1491907794
 the
\change_deleted 1685850735 1489018408
o
\change_unchanged
 specif
\change_inserted 1685850735 1489018412
ication
\change_deleted 1685850735 1489018411
y
\change_inserted 1685850735 1489018448
 of
\change_unchanged
 the poll interval in milliseconds for web10g loggers on Linux or Windows.
 The minimum value is 1
\begin_inset space \thinspace{}
\end_inset

ms and the maximum value is 1000
\begin_inset space \thinspace{}
\end_inset

ms.
 The default value is 10
\begin_inset space \thinspace{}
\end_inset

ms.
 Note that the control of the interval length is not very accurate and with
 small intervals less then 10
\begin_inset space \thinspace{}
\end_inset

ms, the actual interval will likely be larger than the specified interval.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_web10g_poll_interval = 10
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
tcpdump/pcap 
\change_inserted 193492759 1517895801
snaplen 
\change_unchanged
configuration
\end_layout

\begin_layout Standard
The variable TPCONF_pcap_snaplen sets the 
\shape italic
snap length
\shape default
 (number of bytes captured by tcpdump per Ethernet frame).
 If not specified the default is 80 bytes.
 Setting TPCONF_pcap_snaplen=0 means `capture all bytes'.
 The following shows an example where we set the snap length to 128 bytes.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_pcap_snaplen = 128
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Topology configuration
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:topology_config"

\end_inset


\end_layout

\begin_layout Standard
Since version 0.8 TEACUP can automate the assignment of each host into one
 of the two subnets
\change_inserted 193492759 1494482109
, given a testbed where the hosts and router are connected via a single
 VLAN-capable switch
\change_unchanged
.
 
\change_deleted 193492759 1494482063
The
\change_inserted 193492759 1494482064
Automatic
\change_unchanged
 topology configuration is 
\change_inserted 193492759 1493289950

\bar under
experimental
\change_deleted 193492759 1493289947

\emph on
\bar default
EXPERIMENTAL
\change_unchanged

\emph default
 and based on a number of assumptions around the network setup.
\begin_inset Foot
status open

\begin_layout Plain Layout
The most critical 
\change_inserted 193492759 1517734573
current 
\change_unchanged
restriction is that switch reconfiguration has only been tested with Dell
 5324 and Dell N3000 series switches.
\end_layout

\end_inset

 For an experiment 
\change_inserted 193492759 1493289983
(
\change_unchanged
or a 
\change_deleted 193492759 1517734591
series
\change_inserted 193492759 1517734591
group
\change_unchanged
 of experiment
\change_inserted 193492759 1493289990
s)
\change_unchanged
 the topology (re)configuration is (optionally) carried out after the machines
 haven been rebooted and before any sanity checks are done.
\end_layout

\begin_layout Standard
Automatic topology configuration is enabled by setting the variable TPCONF_confi
g_topology to `1'.
 (If this variable is undefined or set to `0' there is no topology configuration.
)
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_config_topology = '1'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When topology configuration is enabled TEACUP 
\emph on
actively (re)configures
\emph default
 each host's test subnet IP address to that specified in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

TPCONF_host_internal_ip
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, then 
\emph on
changes
\emph default
 the VLAN configuration of the testbed switch's ports so all hosts are connected
 to the right subnets.
\end_layout

\begin_layout Standard
Automated VLAN (re)configuration requires SSH access to the switch, with
 the same SSH user name and password as used on all other hosts.
 As many switches limit the number of concurrent SSH sessions allowed, TEACUP
 currently performs the configuration of the ports on switch sequentially
 (host by host).
 However, after the switch has been configured TEACUP carries out the setup
 of each host (network interface and routing configuration) in parallel
 to reduce the overall time for topology configuration.
 
\end_layout

\begin_layout Standard
When mapping switch ports to VLANs, TEACUP assumes we are using /24 subnets
 and that the third octet of the IP address is identical to the VLAN name
 configured on the switch.
 For example, a host being configured with address 172.16.10.2 is mapped to
 a corresponding VLAN named `10' on the switch.
\end_layout

\begin_layout Standard
TEACUP also assumes that all hosts are differentiated by appending consecutive
 numbers to their hostnames.
 The lowest number, 
\begin_inset Formula $h$
\end_inset

, can be chosen arbitrarily.
 For example, if we have two hosts they could be named 'testhost1' and 'testhost
2'.
 TEACUP further assumes that hosts are connected to consecutive ports of
 the switch in the same order as their hostname numbering.
 For example, if we have testhost1 and testhost2, and testhost1 is connected
 to switch port 
\begin_inset Formula $n$
\end_inset

 then testhost2 must be connected to switch port 
\begin_inset Formula $n+1$
\end_inset

.
\end_layout

\begin_layout Standard
The address or host name of the switch can be configured with the variable
 TPCONF_topology_switch.
 To map a host to the corresponding port the variables TPCONF_topology_switch_po
rt_prefix and TPCONF_topology_switch_port_offset (also called 
\begin_inset Formula $o$
\end_inset

) can be defined.
 The name of the switch port used will be the string specified in TPCONF_topolog
y_switch_port_prefix concatenated with the the number 
\begin_inset Formula $h+o$
\end_inset

.
 The following shows the default configuration.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_topology_switch = 'switch2'
\end_layout

\begin_layout Plain Layout

TPCONF_topology_switch_port_prefix = 'Gi1/0/'
\end_layout

\begin_layout Plain Layout

TPCONF_topology_switch_port_offset = 5
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above configuration assumes that testhost1 is connected to switch port
 `Gi1/0/6' and testhost2 is connected to switch port `Gi1/0/7' on a switch
 with the host name `switch2' (which has SSH configuration enabled).
\end_layout

\begin_layout Standard
Topology configuration works with all supported OS (Linux, FreeBSD, Windows/Cygw
in and Mac OS X).
 However, the switch reconfiguration code has only been tested with Dell
 5324 and Dell N3000 series switches.
\end_layout

\begin_layout Standard
Note that the network interfaces on the hosts are currently hard-coded inside
 TEACUP.
 For example, for FreeBSD hosts the topology setup method assumes that em1
 is the testbed interface.
 
\change_inserted 193492759 1493290105
Currently 
\change_deleted 193492759 1493290107
T
\change_inserted 193492759 1493290107
t
\change_unchanged
he
\change_inserted 193492759 1493290108
se
\change_unchanged
 interface names can only be changed by modifying the Python code.
\end_layout

\begin_layout Subsubsection
Link speed selection
\end_layout

\begin_layout Standard
As of version 0.9, TEACUP can set the link speed of the Ethernet links between
 the switch and testbed NICs.
 There are four settings for the speed: `10' (10
\begin_inset space \thinspace{}
\end_inset

Mbps, 10baseT), `100' (100
\begin_inset space \thinspace{}
\end_inset

Mpbs, 100baseT), `1000' (1000
\begin_inset space \thinspace{}
\end_inset

Mbps, 1000baseT), and `auto' (default, which should result in 1000baseT
\change_inserted 193492759 1493290204
 if all links use Gigabit Ethernet NICs
\change_unchanged
).
 The variable TPCONF_linkspeed allows t
\change_inserted 1685850735 1494304859
he
\change_deleted 1685850735 1494304858
o
\change_unchanged
 configur
\change_inserted 1685850735 1494304864
ation of
\change_deleted 1685850735 1494304861
e
\change_unchanged
 the link speed for all hosts.
 For example, if all hosts should use a link speed of 100 Mbps (100baseT)
 we can specify
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_linkspeed = '100'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
However, we can also configure host-specific link speeds with the dictionary
 TPCONF_host_linkspeed.
 Each entry must have as index a host name (as defined in TPCONF_router
 or TPCONF_hosts) and as value one of the possible speed settings explained
 above.
 For example, if testhost1 should be set 100 Mbps and testhost2 to 1000
 Mbps we can define
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_host_linkspeed = {
\end_layout

\begin_layout Plain Layout

	'testhost1' : '100',
\end_layout

\begin_layout Plain Layout

	'testhost2' : '1000'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TPCONF_host_linkspeed entries always overrule TPCONF_linkspeed.
 If neither variable is specified the default link speed setting is `auto'
\change_deleted 193492759 1493290216
, which should result in 1000baseT assuming Gigabit Ethernet NICs
\change_unchanged
.
\end_layout

\begin_layout Standard
Note that the link speed setting is persistent for Linux, FreeBSD and Windows.
 However, for Mac OS X the speed will reset to 1000baseT after a reboot
 (normally this should not be an issue as hosts are only rebooted before
 experiments).
\end_layout

\begin_layout Subsection
Rebooting, OS selection and power cycling
\end_layout

\begin_layout Standard
With suitable external 
\change_inserted 193492759 1494482198
hardware 
\change_unchanged
support, TEACUP 
\change_deleted 193492759 1494482217
enables
\change_inserted 193492759 1494482217
supports
\change_unchanged
 automated rebooting of testbed hosts into different operating systems and
 forced power cycling of hosts that have become unresponsive.
\end_layout

\begin_layout Subsubsection
PXE-based rebooting
\end_layout

\begin_layout Standard
TEACUP's PXE-based rebooting process is explained in 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

.
\end_layout

\begin_layout Standard
The IP address and port of the TFTP or HTTP server that serves the .ipxe
 configuration files during the PXE boot process is specified with the parameter
 TPCONF_tftpserver.
 Both IP address and port number must be specified separated by a colon.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_tftpserver = '10.1.1.11:8080'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The path to the directory that is served by the TFTP or HTTP server is specified
 with TPCONF_tftpboot_dir.
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_tftpboot_dir = '/tftpboot'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Omitting TPCONF_tftpboot_dir, or setting it to an empty string, disables
 PXE booting.
 TPCONF_host_os and TPCONF_force_reboot (see below) are then ignored.
\end_layout

\begin_layout Subsubsection
OS and kernel selection
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:os_kernel_selection"

\end_inset


\end_layout

\begin_layout Standard
The TPCONF_host_os dictionary specifies which OS are booted on the different
 hosts.
 The hosts (keys) specified must match the entries in the TPCONF_router
 and TPCONF_hosts lists exactly (any host specified in TPCONF_host_os must
 be specified in either TPCONF_router or TPCONF_hosts).
 The current code does simple string matching, it does 
\emph on
not
\emph default
 attempt to resolve host identifiers in some canonical form.
\end_layout

\begin_layout Standard
TEACUP currently supports selecting from four different types of OS: `Linux',
 `FreeBSD', `CYGWIN' (Windows) and `Darwin' (Mac OS X).
 Selecting the specific Linux kernels to boot is supported with the TPCONF_linux
_kern_router and TPCONF_linux_kern_hosts parameters (see below).
 The OS selection occurs once during reboot, and cannot subsequently be
 varied during a given experiment.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_host_os = { 
\end_layout

\begin_layout Plain Layout

'testhost1' : 'Linux', 
\end_layout

\begin_layout Plain Layout

'testhost2' : 'FreeBSD', 
\end_layout

\begin_layout Plain Layout

'testhost3' : 'Linux', 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TPCONF_linux_kern_router specifies the Linux kernel booted on the router,
 and TPCONF_linux_kern_hosts specifies the Linux kernel booted on all other
 hosts.
 The name is the kernel image name minus the starting `vmlinuz-', so the
 name starts with the version number.
 It is also possible to specify the keywords `running' or `current' to tell
 TEACUP to use the same kernel that is currently running on the host (this
 
\emph on
requires
\emph default
 that the host is already running Linux).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_linux_kern_router = '3.14.18-10000hz'
\end_layout

\begin_layout Plain Layout

TPCONF_linux_kern_hosts = '3.9.8-web10g'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The parameter TPCONF_os_partition allows us to specify the partitions for
 the different operating systems on the hosts (in GRUB4DOS format since
 our TEACUP-based testbed uses GRUB4DOS to reboot into the desired OS).
 For example, if we have the configuration below then TEACUP will attempt
 to boot from the first partition of the first disk if Windows/Cygwin is
 selected, boot from the second partition of the first disk if Linux is
 selected, and boot from the third partition of the first disk if FreeBSD
 is selected.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_os_partition = { 
\end_layout

\begin_layout Plain Layout

'CYGWIN'  : '(hd0,0)',
\end_layout

\begin_layout Plain Layout

'Linux'   : '(hd0,1)', 
\end_layout

\begin_layout Plain Layout

'FreeBSD' : '(hd0,2)', 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Boot behaviour and timeout
\end_layout

\begin_layout Standard
If TPCONF_force_reboot is set to `1' 
\emph on
all
\emph default
 hosts will be rebooted.
 If TPCONF_force_reboot is set to `0' only hosts where the currently running
 OS (or kernel in case of Linux) is 
\emph on
not
\emph default
 the desired OS (or kernel in case of Linux), as specified in TPCONF_host_os
 (and TPCONF_linux_kern_router or TPCONF_linux_kern_hosts), will be rebooted.
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_force_reboot = '1'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TPCONF_boot_timeout specifies the maximum time in seconds (as integer) a
 reboot can take.
 If the rebooted machine is not up and running the chosen OS after this
 time, the reboot is deemed a failure and the script aborts, unless TPCONF_do_po
wer_cycle is set to `1' (see below).
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_boot_timeout = 100
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Forced power cycling
\end_layout

\begin_layout Standard
If TEACUP-supported power controllers are installed and TPCONF_do_power_cycle
 is set to `1', a host is power cycled if it does not reboot within TPCONF_boot_
timeout seconds.
 If TPCONF_do_power_cycle is omitted or set to `0' there is no power cycling.
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_do_power_cycle = '0'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If TPCONF_do_power_cycle=1 then parameters TPCONF_power_ctrl_type, TPCONF_host_p
ower_ctrlport, TPCONF_power_admin_name and TPCONF_power_admin_pw must also
 be set.
\end_layout

\begin_layout Standard
TPCONF_power_ctrl_type must be used to specify the type of power controller
 – `9258HP' (for an 
\begin_inset Quotes eld
\end_inset

IP Power 9258HP
\begin_inset Quotes erd
\end_inset

) or `SLP-SPP1008' (for a 
\begin_inset Quotes eld
\end_inset

Serverlink SLP-SPP1008-H
\begin_inset Quotes erd
\end_inset

).
 The default is '9258HP'.
 A mix of different types of power controllers is currently not supported.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_power_ctrl_type = '9258HP'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TPCONF_host_power_ctrlport is a dictionary that for each host specifies
 the IP (or host name) of the responsible power controller and the number
 of the controller's port the host is connected to (as integer starting
 from 1).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_host_power_ctrlport = { 
\end_layout

\begin_layout Plain Layout

'testhost1' : ( '192.168.1.178', '1' ), 
\end_layout

\begin_layout Plain Layout

'testhost2' : ( '192.168.1.178', '2' ), 
\end_layout

\begin_layout Plain Layout

'testhost3' : ( '192.168.1.178', '3' ), 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TPCONF_power_admin_name specifies the name of the power controller's admin
 user.
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_power_admin_name = 'admin'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TPCONF_power_admin_pw specifies the password of the power controller's admin
 user (which in the below example is identical to the SSH password used
 by Fabric, but in general it can be different).
 
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_power_admin_pw = env.password
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Clock offset measurement (broadcast pings)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:broadcast-pings"

\end_inset


\end_layout

\begin_layout Standard
All the participating machines should have synchronised clocks (for example
 by running NTP) so we can accurately compare data measured on different
 hosts.
 However, clocks on consumer-grade PC hardware drift even while using NTP.
 TEACUP provides an additional mechanism to evaluate the quality of the
 time synchronisation and 
\change_deleted 193492759 1493290266
(optionally) 
\change_unchanged
correct for clock offsets in the post-analysis.
\end_layout

\begin_layout Standard
When TPCONF_bc_ping_enable is set to `1', TEACUP configures the router host
 to send a broadcast or multicast ping over the control network.
 These ping packets will be multicasted or broadcasted to the control interfaces
 of all other hosts (almost) simultaneously.
 
\end_layout

\begin_layout Standard
During experiments there is no other traffic on the control network and
 typically network jitter introduced by the sender (router), the network
 switch or the receiver is small.
 Thus one can estimate the offsets of the clocks of different hosts with
 relatively high accuracy by comparing the arrival times of the broadcast
 or multicast ping packets.
 Here we explain how to enable and configure the broadcast pings.
\end_layout

\begin_layout Standard
TPCONF_bc_ping_enable must be set to `1' to enable the broadcast/multicast
 ping (default is `0').
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

TPCONF_bc_ping_rate
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 controls the rate in ping packets per second (default is one packet per
 second).
 TPCONF_bc_ping_address is the address the ping is sent to.
 This must be either a multicast address (e.g.
 224.0.1.199) or a broadcast address (e.g.
 192.168.0.255 if the control interfaces are in the 192.168.0.0/24 subnet).
 The following shows an example configuration for enabled multicast pings.
 
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_bc_ping_enable = '1'
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_bc_ping_rate = 1
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_bc_ping_address = '224.0.1.199'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In technical report 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2018_teacup_v1.1_analysis"

\end_inset

 we explain TEACUP's functions to analyse the clock offsets and use them
 for the correction of timestamps.
\end_layout

\begin_layout Subsection
Custom host init commands
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Config-custom-host-setup"

\end_inset


\end_layout

\begin_layout Standard
TPCONF_host_init_custom_cmds allows t
\change_inserted 1685850735 1494304528
he
\change_deleted 1685850735 1494304527
o
\change_unchanged
 execut
\change_inserted 1685850735 1494304532
ion of
\change_deleted 1685850735 1494304530
e
\change_unchanged
 custom per-host init commands.
 This allows 
\change_deleted 193492759 1491908201
the
\change_deleted 1685850735 1489020148
o
\change_deleted 193492759 1491908201
 
\change_unchanged
chang
\change_inserted 1685850735 1489020152
ing of
\change_deleted 1685850735 1489020151
e
\change_unchanged
 the host configuration, for example with sysctls.
 TPCONF_host_init_custom_cmds is a dictionary, where the key specifies the
 host name and the value is a list of commands.
 The commands are executed in exactly the order specified, after all default
 build-in host initialisation has been carried out.
 This means TPCONF_host_init_custom_cmds makes it possible to overr
\change_deleted 193492759 1517734709
ule
\change_inserted 193492759 1517734709
ide
\change_unchanged
 default initialisation.
 The commands are specified as strings and are executed on the host exactly
 as specified (with the exception that V_variables, if present, are substituted
 with values).
 V_variables can be used in commands, 
\change_deleted 193492759 1517734728
but
\change_inserted 193492759 1517734729
with
\change_unchanged
 the current limitation 
\change_deleted 193492759 1517734738
is there can 
\change_inserted 193492759 1517734739
of 
\change_unchanged
only 
\change_deleted 193492759 1517734742
be 
\change_unchanged

\emph on
one
\emph default
 V_variable per command.
\end_layout

\begin_layout Standard
The custom commands are executed before 
\change_deleted 193492759 1517734778
the 
\change_unchanged
router
\change_inserted 193492759 1517734781
-specific
\change_unchanged
 configuration.
 So when using
\change_inserted 193492759 1517734788
,
\change_unchanged
 for example
\change_inserted 193492759 1517734790
,
\change_unchanged
 a FreeBSD
\change_inserted 193492759 1517734797
 host as the
\change_unchanged
 router we can use TPCONF_host_init_custom_cmds to increase the maximum
 allowable Dummynet queue length (using sysctl) 
\change_inserted 193492759 1517734814
on the router (as a host) 
\change_unchanged
before Dummynet is actually configured
\change_inserted 193492759 1517734849
 (when configuring this particular host as the router)
\change_unchanged
.
 
\end_layout

\begin_layout Standard
Note that the
\change_inserted 193492759 1517734861
 custom
\change_unchanged
 commands are executed in the foreground, which means that for each command
 TEACUP will wait until it has been executed on the remote host before executing
 the next command for the 
\emph on
same
\emph default
 host.
 It is currently not possible to execute background commands.
 However, commands on different hosts are executed in parallel
\change_inserted 193492759 1517734880
 (
\change_deleted 193492759 1517734882
, i.e.
 
\change_inserted 193492759 1517734908
so 
\change_unchanged
waiting for a command to finish on host testhost1 does not block executing
 the next command on host testhost2
\change_inserted 193492759 1517734894
 or other hosts)
\change_unchanged
.
 In summary, commands on different host are executed in parallel, but commands
 on the same host are executed sequentially.
 
\end_layout

\begin_layout Standard
The following config file part shows an example where we simply execute
 the command `echo TEST' on host testhost1.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_host_init_custom_cmds = { 
\end_layout

\begin_layout Plain Layout

'testhost1' : [ 'echo TEST', ], 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Router queue setup
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Config-router-queues"

\end_inset


\end_layout

\begin_layout Standard
The variable TPCONF_router_queues specifies the router pipes (also referred
 to as queues here).
 Each entry is a 2-tuple.
 The first value specifies a unique integer ID for each queue.
 The second value is a comma-separated string specifying the queue parameters.
 The queues do not necessarily need to be defined in the order of queue
 ID, but it is recommended to do so.
 The following queue parameters exist:
\end_layout

\begin_layout Itemize

\series bold
source
\series default
: Specifies the source IP/hostname or source network (<ip>[/<prefix>]) of
 traffic that is queued in this queue.
 If a host name is specified there can be no prefix.
 One can specify an internal/testbed or external/control IP/hostname.
 If an external IP/hostname is specified this will be automatically translated
 into the first internal IP specified for the host in TPCONF_host_internal_ip.
\end_layout

\begin_layout Itemize

\series bold
dest
\series default
: Specifies the destination IP/hostname or source network (<ip>[/<prefix>])
 of traffic that is queued in this queue.
 If a host name is specified there can be no prefix.
 One can specify an internal/testbed or external/control IP/hostname.
 If an external IP/hostname is specified this will be automatically translated
 into the first internal IP specified for the host in TPCONF_host_internal_ip.
\end_layout

\begin_layout Itemize

\series bold
delay
\series default
: Specifies the emulated constant delay in milliseconds.
 For example, delay=50 sets the delay to 50
\begin_inset space \thinspace{}
\end_inset

ms.
\end_layout

\begin_layout Itemize

\series bold
loss
\series default
: Specifies the emulated constant loss rate.
 For example, loss=0.01 sets the loss rate to 1%.
\end_layout

\begin_layout Itemize

\series bold
rate
\series default
: Specifies the rate limit of the queue.
 On Linux we can use units such as `kbit' or `mbit'.
 For example, queue_size=`1mbit' sets the rate limit to 1 Mbit/second.
 
\end_layout

\begin_layout Itemize

\series bold
queue_size
\series default
: Specifies the size of the queue.
 On Linux queue size is defined in packets for most queuing disciplines,
 but for some queuing disciplines it needs to be specified in bytes.
 For example, if we have a Linux queue with size specified in packets, queue_siz
e=1000 sets the queue size to 1000 packets.
 On FreeBSD the queue size is also specified in packets typically, but one
 can specify the size in bytes by adding a `bytes' or `kbytes', for example
 queue_size=`100kbytes' specifies a queue of size 100
\begin_inset space \thinspace{}
\end_inset

kbytes.
 If `bdp' is specified the queue size will be set to the nominal bandwidth-delay
-product (BDP) (this does 
\emph on
only
\emph default
 work for queuing disciplines where TEACUP knows whether the queue size
 is specified in bytes or packets).
 The minimum queue size is one packet (if the size is specified in packets)
 or 2048
\begin_inset space \thinspace{}
\end_inset

bytes (if the size is specified in bytes).
\end_layout

\begin_layout Itemize

\series bold
queue_size_mult
\series default
: The actual queue size is the queue size multiplied with this factor.
 This should only be used if queue_size if set to `bdp'.
 This allows t
\change_inserted 1685850735 1494304541
he
\change_deleted 1685850735 1494304540
o
\change_unchanged
 var
\change_inserted 1685850735 1494304546
iation of
\change_deleted 1685850735 1494304543
y
\change_unchanged
 the queue size in multiples of the nominal BDP.
\end_layout

\begin_layout Itemize

\series bold
queue_disc
\series default
: Specifies the queuing discipline.
 This can be the name of any of the queuing disciplines supported by Linux,
 such as `fq_codel', `codel', `red', `choke', `pfifo', `pie' etc.
 On FreeBSD 
\change_inserted 193492759 1491908001
10.3 and later 
\change_unchanged
the 
\change_deleted 1685850735 1489020651
only 
\change_unchanged
queuing disciplines available are `fifo'
\change_inserted 1685850735 1489020668
, `fq_codel', `codel', `fq_pie', `pie'
\change_unchanged
 and `red'.
 For example, queue_disc=`fq_codel' sets the queuing discipline to the 
\change_deleted 193492759 1494485334
fair-queuing+codel
\change_inserted 193492759 1494485369
FQ-CoDel (FlowQueuing+CoDel)
\change_unchanged
 model.
 For compatibility
\change_deleted 193492759 1517734957
,
\change_unchanged
 with FreeBSD
\change_inserted 193492759 1517734960
,
\change_unchanged
 one can specify `fifo' on Linux
\change_deleted 193492759 1517734972
,
\change_unchanged
 which is mapped to `pfifo' (`pfifo' is the default for HTB classes, which
 we use for rate limiting).
 The queue_disc parameter must be specified explicitly.
 
\end_layout

\begin_layout Itemize

\series bold
queue_disc_params
\series default
: This parameter allows 
\change_deleted 193492759 1491908035
the
\change_deleted 1685850735 1489020797
o
\change_deleted 193492759 1491908036
 
\change_unchanged
pass
\change_inserted 1685850735 1489020802
ing of
\change_unchanged
 parameters to queuing disciplines.
 For example, if we wanted to turn ECN on for fq_codel we would specify
 queue_disc_params=`ecn' (c.f.
 fq_codel man page).
\end_layout

\begin_layout Itemize

\series bold
bidir
\series default
: This allows 
\change_deleted 193492759 1491908043
the
\change_deleted 1685850735 1489020814
o
\change_deleted 193492759 1491908044
 
\change_unchanged
specif
\change_inserted 1685850735 1489020820
ication of
\change_deleted 1685850735 1489020817
y
\change_unchanged
 whether a queue is unidirectional (set to `0') or bidirectional (set to
 `1').
 A unidirectional queue will only get the traffic from source to destination,
 whereas a bidirectional queue will get the traffic from source to dest
\change_inserted 1685850735 1489020843
ination
\change_unchanged
 
\emph on
and
\emph default
 from destination to source.
\end_layout

\begin_layout Itemize

\series bold
attach_to_queue
\series default
: This parameter works on Linux 
\emph on
only.

\emph default
 It allows 
\change_deleted 193492759 1491908052
the
\change_deleted 1685850735 1489020873
o
\change_deleted 193492759 1491908053
 
\change_unchanged
direct matching 
\change_inserted 1685850735 1489020877
of 
\change_unchanged
packets into an existing queue referenced by the specified queue ID, but
 to emulate flow-specific delay/loss (different from the delay and loss
 of other traffic).
 If attach_to_queue is specified the matching traffic will go through the
 already existing queue, but the emulated delay or loss is set according
 to the current queue specification.
 This means we can omit the rate, queue_disc and queue_size parameters,
 because they do not have any effect.
\end_layout

\begin_layout Itemize

\series bold
rtt
\series default
: This parameter allows t
\change_inserted 1685850735 1494304561
he
\change_deleted 1685850735 1494304561
o
\change_unchanged
 explicit
\change_deleted 1685850735 1494304563
ly
\change_unchanged
 specif
\change_inserted 1685850735 1494304568
ication of
\change_deleted 1685850735 1494304565
y
\change_unchanged
 the emulated RTT in milliseconds.
 This parameter only needs to be specified if queue_size is set to `bdp'
 and the RTT is not twice the delay of the current TEACUP queue (e.g.
 if we set up asymmetric delay with attach_to_queue).
\end_layout

\begin_layout Standard
All parameters must be assigned with either a constant value or a TEACUP
 V_variable.
 V_variable names must be defined in TPCONF_parameter_list and TPCONF_variable_d
efaults (see below).
 V_variables are replaced with either the default value specified in TPCONF_vari
able_defaults or the current value from TPCONF_parameter_list if we iterate
 through multiple values for the parameter.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Router-queue-definition"

\end_inset

 shows an example queue setup with the same delay and loss for every host
 and the same delay and loss in both directions (all the parameters are
 variables here).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_router_queues = [ 
\end_layout

\begin_layout Plain Layout

( '1', "source='172.16.10.0/24', dest='172.16.11.0/24', delay=V_delay, loss=V_loss,
 rate=V_urate, 
\end_layout

\begin_layout Plain Layout

        queue_disc=V_aqm, queue_size=V_bsize" ), 
\end_layout

\begin_layout Plain Layout

( '2', "source='172.16.11.0/24', dest='172.16.10.0/24', delay=V_delay, loss=V_loss,
 rate=V_drate, 
\end_layout

\begin_layout Plain Layout

        queue_disc=V_aqm, queue_size=V_bsize" ), 
\end_layout

\begin_layout Plain Layout

]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Router-queue-definition"

\end_inset

Router queue definition example
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Router-queue-definition-2"

\end_inset

 shows an example that illustrates the attach_to_queue parameter.
 Traffic between 172.16.10.3 and 172.16.11.3 goes through the same queues as traffic
 between 172.16.10.2 and 172.16.11.2, but in both directions it experiences twice
 the delay.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_router_queues = [ 
\end_layout

\begin_layout Plain Layout

( '1', "source='172.16.10.2', dest='172.16.11.2', delay=V_delay, loss=V_loss,
 rate=V_up_rate, 
\end_layout

\begin_layout Plain Layout

        queue_disc=V_aqm, queue_size=V_bsize" ), 
\end_layout

\begin_layout Plain Layout

( '2', "source='172.16.11.2', dest='172.16.10.2', delay=V_delay, loss=V_loss,
 rate=V_down_rate, 
\end_layout

\begin_layout Plain Layout

        queue_disc=V_aqm, queue_size=V_bsize" ), 
\end_layout

\begin_layout Plain Layout

( '3', "source='172.16.10.3', dest='172.16.11.3', delay=2*V_delay, loss=V_loss,
 attach_to_queue='1'" ), 
\end_layout

\begin_layout Plain Layout

( '4', "source='172.16.11.3', dest='172.16.10.3', delay=2*V_delay, loss=V_loss,
 attach_to_queue='2'" ), 
\end_layout

\begin_layout Plain Layout

]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Router-queue-definition-2"

\end_inset

Router queue definition with attach_to_queue example
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since version 0.9 TEACUP supports multiple routers.
 If multiple routers are specified in TPCONF_router, but there is only one
 TPCONF_router_queues specification (for example the one shown above), TEACUP
 will apply the single TPCONF_router_queues specification to all routers.
 However, in many cases with multiple routers we want to specify router-specific
 queue setups.
 This can be done by making TPCONF_router_queues a dictionary with the keys
 being router names (as specified in TPCONF_router) and the values being
 TPCONF_router_queues specifications.
\end_layout

\begin_layout Standard
As an example let us assume there are two routers: testrouter1 and testrouter2.
 For each of the routers we need to specify the queue setup (for brevity
 we use a placeholder here instead of showing the actual queue specifications:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

testrouter1_queues = [<queue_spec1>]
\end_layout

\begin_layout Plain Layout

testrouter2_queues = [<queue_spec2>]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then we need to define TPCONF_router_queues as explained above:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_router_queues = {}
\end_layout

\begin_layout Plain Layout

TPCONF_router_queues['testrouter1'] = 
\end_layout

\begin_layout Plain Layout

	testrouter1_queues
\end_layout

\begin_layout Plain Layout

TPCONF_router_queues['testrouter2'] = 
\end_layout

\begin_layout Plain Layout

	testrouter2_queues
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Traffic generator setup
\change_inserted 193492759 1517894700

\begin_inset CommandInset label
LatexCommand label
name "subsec:Traffic-generator-setup"

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard
Traffic generators are defined with the variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

TPCONF_traffic_gens
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

.
 This is a list of 3-tuples.
 The first value of a tuple is the start time relative to the start time
 of the experiment.
 The second value of the tuple is a unique ID.
 The third value of the tuple is a list of strings with the function name
 of the start function of the traffic generator as first entry followed
 by the parameters.
 The name of the functions and the parameters for each function are described
 in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Config-traffic-generators"

\end_inset

.
\end_layout

\begin_layout Standard
Client and server parameters can be external (control network) addresses
 or host names.
 An external address or host name is replaced by the first internal address
 specified for a host in TPCONF_host_internal_ip.
 Client and server parameters can also be internal (testbed network) addresses,
 which allows 
\change_deleted 193492759 1491908062
the
\change_deleted 1685850735 1489021230
o
\change_deleted 193492759 1491908062
 
\change_unchanged
specif
\change_inserted 1685850735 1489021237
ication of
\change_deleted 1685850735 1489021234
y
\change_unchanged
 any internal address.
\end_layout

\begin_layout Standard
Each parameter is defined as
\change_inserted 193492759 1517809043
:
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517809075
 <parameter_name>=<parameter_value>
\change_inserted 193492759 1517809070

\end_layout

\begin_layout Standard

\change_inserted 193492759 1517809070
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517809096

   <parameter_name>=<parameter_value>
\end_layout

\end_inset


\change_deleted 193492759 1517809048
.
\change_inserted 193492759 1517809048

\end_layout

\begin_layout Standard

\change_deleted 193492759 1517809048
 
\change_unchanged
Parameter names must be the parameter names of traffic generator functions
 (and as such be valid Python variable names).
 Parameter values can be either constants (string or numeric) or TEACUP
 V_variables that are replaced by the actual values depending on the current
 experiment.
 The V_variables must be defined in TPCONF_parameter_list and TPCONF_variable_de
faults.
 Numeric V_variables can be modified using mathematical operations, such
 as addition or multiplication, with constants.
 For example, if a variable `V_delay' exists one can specify `2
\begin_inset Formula $*$
\end_inset

V_delay' as parameter value.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Traffic-generator-example"

\end_inset

 shows a simple example.
 At time zero a web server is started and fake DASH content is created.
 0.5 seconds later a httperf DASH-like client is started.
 The duration and rate of the DASH-like flow are specified by variables
 that can change for each experiment.
 In contrast the cycle length and prefetch time are set to fixed values.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_traffic_gens = [ 
\end_layout

\begin_layout Plain Layout

( '0.0', '1', "start_http_server, server='testhost3', port=80" ), 
\end_layout

\begin_layout Plain Layout

( '0.0', '2', "create_http_dash_content, server='testhost3', duration=2*V_duratio
n, 
\end_layout

\begin_layout Plain Layout

               rates=V_dash_rates, cycles='5, 10'" ), 
\end_layout

\begin_layout Plain Layout

( '0.5', '3', "start_httperf_dash, client='testhost2', server='testhost3',
 port=80, 
\end_layout

\begin_layout Plain Layout

               duration=V_duration, rate=V_dash_rate, cycle=5, prefetch=2"
 ),
\end_layout

\begin_layout Plain Layout

]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Traffic-generator-example"

\end_inset

Traffic generator example
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The example config files in the source code distribution contain more examples
 of setting up traffic generators.
\end_layout

\begin_layout Subsection
Mandatory experiment variables
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Config-mandatory-vars"

\end_inset


\end_layout

\begin_layout Standard
We now describe the mandatory experiment variables that must be in every
 config file.
 There are two types: singulars and lists.
 Singulars are fixed parameters while lists specify the different values
 used in subsequent experiments based on the definitions of TPCONF_parameter_lis
t and TPCONF_vary_parameters (see below).
\end_layout

\begin_layout Subsubsection
Traffic duration
\end_layout

\begin_layout Standard
The duration of the traffic in seconds (must be an integer) is specified
 with TPCONF_duration.
 Note that currently the actual duration of an experiment is the number
 of seconds specified by TPCONF_duration 
\emph on
plus
\emph default
 the number of seconds until the last traffic generator is started (based
 on TPCONF_traffic_gens) plus some warmup time.
 TPCONF_duration is specified as follows:
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_duration = 30
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Number of repeats (runs)
\end_layout

\begin_layout Standard
The number of repetitions (runs) carried out for each unique parameter combinati
on is specified with TPCONF_runs:
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_runs = 1
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Enabling ECN on hosts
\end_layout

\begin_layout Standard
TPCONF_ECN specifies whether ECN is used on the hosts that are the traffic
 sources/sinks.
 If set to `1'
\change_inserted 1685850735 1489024052
,
\change_unchanged
 ECN is enabled for all hosts.
 If set to `0'
\change_inserted 1685850735 1489024055
,
\change_unchanged
 ECN is disabled for all hosts.
 Currently per-host configuration is only possible with custom commands.
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_ECN = [ '0', '1' ]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(Note that TPCONF_ECN only enables ECN on the hosts.
 For full ECN support, the AQM mechanism on the router must also be configured
 to use ECN.)
\end_layout

\begin_layout Subsubsection
Congestion control algorithms
\end_layout

\begin_layout Standard
TPCONF_TCP_algos specifies the TCP congestion algorithms used.
 The following algorithms can be selected: `newreno', `cubic', `hd', `htcp',
 `cdg', `compound'.
 
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_TCP_algos = [ 'newreno', 'cubic', ]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
However, only some of these are supported depending on the OS a host is
 running: 
\end_layout

\begin_layout Itemize
Windows: newreno (default), compound;
\end_layout

\begin_layout Itemize
FreeBSD: newreno (default), cubic, hd, htcp, cdg;
\end_layout

\begin_layout Itemize
Linux: cubic (default), newreno, htcp;
\end_layout

\begin_layout Itemize
Mac OS X: newreno (default)
\end_layout

\begin_layout Standard
Instead of specifying a particular TCP algorithm one can specify `default'.
 This will set the algorithm to the default algorithm depending on the OS
 the host is running.
 
\end_layout

\begin_layout Standard
Using only TPCONF_TCP_algos one is limited to either using the same algorithm
 on all hosts or the defaults.
 To run different algorithms on different hosts, one can specify `host<N>'
 where <N> is an integer number starting from 0.
 The <N> refers to the Nth entry for each host in TPCONF_host_TCP_algos.
\end_layout

\begin_layout Standard
TPCONF_host_TCP_algos defines the TCP congestion control algorithms used
 for each host if the `host<N>' definitions are used in TPCONF_TCP_algos.
 In the following example a `host0' entry in TPCONF_TCP_algos will lead
 to each host using its default.
 A `host1' entry will configure testhost2 to use `newreno' and testhost3
 to use `cdg'.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_host_TCP_algos = { 
\end_layout

\begin_layout Plain Layout

'testhost2' : [ 'default', 'newreno', ], 
\end_layout

\begin_layout Plain Layout

'testhost3' : [ 'default', 'cdg', ], 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With TPCONF_host_TCP_algo_params we can specify parameter settings for each
 host and TCP congestion control algorithm.
 The settings are passed directly to sysctl on the remote host.
 We can use V_variables to iterate over different settings (similar as for
 pipes and traffic generators) and these are replaced with the actual current
 value before passing the string to sysctl.
 For example, we can specify settings for CDG for host testhost2:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_host_TCP_algo_params = { 
\end_layout

\begin_layout Plain Layout

'testhost2' : { 'cdg' : [ 
\end_layout

\begin_layout Plain Layout

'net.inet.tcp.cc.cdg.beta_delay = V_cdgbdel', 
\end_layout

\begin_layout Plain Layout

'net.inet.tcp.cc.cdg.beta_loss = V_cdgbloss', 
\end_layout

\begin_layout Plain Layout

'net.inet.tcp.cc.cdg.exp_backoff_scale = 3', 
\end_layout

\begin_layout Plain Layout

'net.inet.tcp.cc.cdg.smoothing_factor = 8' ] 
\end_layout

\begin_layout Plain Layout

}}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Emulated delays, loss rates and bottleneck bandwidths
\end_layout

\begin_layout Standard
TPCONF_delays specifies the emulated network delays in milliseconds.
 The numbers must be chosen from [0, max_delay).
 For most practical purposes the maximum delay max_delay is 10 seconds,
 although it could be more (if supported by the emulator).
 The following shows an example:
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_delays = [ 0, 25, 50, 100 ]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TPCONF_loss_rates specifies the emulated network loss rates.
 The numbers must be between 0.0 and 1.0.
 The following shows an example:
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_loss_rates = [ 0, 0.001, 0.01 ]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TPCONF_bandwidths specifies the emulated bandwidths as 2-tuples.
 The first value in each tuple is the downstream rate and the second value
 in each tuple is the upstream rate.
 Note that the values are passed through to the router queues and are not
 checked by TEACUP.
 Units can be used if the queue setup allows this, e.g.
 in the following example we use `mbit' to specify Mbit/second which Linux
 tc understands:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_bandwidths = [ 
\end_layout

\begin_layout Plain Layout

( '8mbit', '1mbit' ), 
\end_layout

\begin_layout Plain Layout

( '20mbit', '1.4mbit' ), 
\end_layout

\begin_layout Plain Layout

]
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Selection of bottleneck AQM and buffer sizes
\end_layout

\begin_layout Standard
TPCONF_aqms specifies the list of AQM/queuing techniques.
 This is completely dependent on the router OS.
 Linux supports `fifo' (mapped to `pfifo'), `pfifo', `bfifo', `fq_codel',
 `codel', `pie', `red' etc.
 (refer to the tc man page for the full list).
 FreeBSD support
\change_deleted 1685850735 1489024500
 only
\change_unchanged
 `fifo'
\change_inserted 1685850735 1489024522
, `fq_codel', `codel', `fq_pie', `pie'
\change_unchanged
 and `red'.
 Default on Linux and FreeBSD are FIFOs (with size in packets).
 The following shows an example:
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_aqms = [ 'pfifo', 'fq_codel', 'pie' ]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that all underscores in parameter values used in log file names are
 changed to hyphens to allow for easier parsing of log file names.
 For example, `fq_codel' will become `fq-codel' in the file name.
\end_layout

\begin_layout Standard
TPCONF_buffer_sizes specifies the bottleneck buffer sizes.
 If the router is Linux this is mostly in packets/slots, but it depends
 on the AQM technique (e.g.
 for bfifo it is bytes).
 If the router is FreeBSD this would be in slots by default, but we can
 specify byte sizes (e.g.
 we can specify 4Kbytes).
 The following example for a Linux router would result in buffers of 100,
 200 and 600 packets long:
\end_layout

\begin_layout Standard

\family typewriter
\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TPCONF_buffer_sizes = [ 100, 200, 600 ]
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Specifying which parameters to vary
\end_layout

\begin_layout Standard
TPCONF_vary_parameters specifies a list of parameters to vary over a series
 of experiments, i.e.
 parameters that will take on multiple values.
 The listed parameters must be defined in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

TPCONF_parameter_list
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 (see Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Config-defining-vars"

\end_inset

).
 The total number of experiments carried out is the number of unique parameter
 combinations (multiplied by the number of TPCONF_runs if `runs' is also
 specified in TPCONF_vary_parameters).
\end_layout

\begin_layout Standard
The TPCONF_vary_parameters specification also defines the order of the parameter
s in the log file names.
 While not strictly necessary, if used `runs' should be last in the list.
 If `runs' is not specified, there is a single experiment for each parameter
 combination.
 TPCONF_vary_parameters is only used for multiple experiments.
 When we run a single experiment (run_experiment_single) all the variables
 are set to fixed values based on TPCONF_variable_defaults.
 The following shows an example for parameters included in TPCONF_parameter_list
 in the example config files:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_vary_parameters = [ 
\end_layout

\begin_layout Plain Layout

	'tcpalgos', 'delays', 'loss', 
\end_layout

\begin_layout Plain Layout

	'bandwidths', 'aqms', 'bsizes', 
\end_layout

\begin_layout Plain Layout

	'runs', 
\end_layout

\begin_layout Plain Layout

]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Experiment-specific variables
\end_layout

\begin_layout Standard
Some variables defined in the example config file(s) are only used with
 certain traffic generators.
\end_layout

\begin_layout Standard
TPCONF_dash_rates specifies the DASH content rates in kbit/second and TPCONF_das
h_rates_str is a string with a comma-separated list of rates (the latter
 is used by the content creation function create_http_dash_content).
 DASH rates must be integers.
 The following shows an example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_dash_rates = [ 500, 1000, 2000 ] 
\end_layout

\begin_layout Plain Layout

TPCONF_dash_rates_str = ','.join(map(str, 
\end_layout

\begin_layout Plain Layout

		TPCONF_dash_rates))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TPCONF_inc_content_sizes specifies the content sizes in kB (as integer)
 for the replies sent in an incast scenario.
 TPCONF_inc_periods specifies the length of a period between requests by
 the querier in seconds (as floating point).
 The following shows an example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_inc_content_sizes= '64, 512, 1024' 
\end_layout

\begin_layout Plain Layout

TPCONF_inc_periods = [ 10 ]
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\change_inserted 1870295737 1491804325
TPCONF_chunksize_mpd is 
\change_deleted 193492759 1491908783
only 
\change_inserted 1870295737 1491804325
used with 
\shape italic
start_dash_streaming_dashjs
\shape default
 traffic generator
\change_deleted 193492759 1491908788
, it specifies
\change_inserted 193492759 1491908789
 to specify
\change_inserted 1870295737 1491804325
 
\change_deleted 193492759 1491908794
the 
\change_inserted 193492759 1491908813
a list of one or more 
\change_inserted 1870295737 1491804325
DASH video chunk size and MPD filename pair
\change_inserted 193492759 1491908797
s
\change_inserted 1870295737 1491804325
.
 
\change_deleted 193492759 1491908818
A list of chunk size and MPD pairs can be included in TPCONF_chunksize_mpd.
 
\change_inserted 1870295737 1491804325
The following shows an example:
\end_layout

\begin_layout Standard

\change_inserted 1870295737 1491539591
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\change_inserted 1870295737 1491539632

TPCONF_chunksize_mpd = [
\end_layout

\begin_layout Plain Layout

\change_inserted 1870295737 1491804421

  ('2','BigBuckBunny_2s.mpd'),
\end_layout

\begin_layout Plain Layout

\change_inserted 1870295737 1491804425

  ('10','BigBuckBunny_10s.mpd')
\end_layout

\begin_layout Plain Layout

\change_inserted 1870295737 1491539632

]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Defining parameters to vary
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Config-defining-vars"

\end_inset


\end_layout

\begin_layout Standard
TEACUP provides a flexible mechanism for defining what parameters are varied
 during 
\change_inserted 193492759 1517736529
groups of 
\change_unchanged
experiments
\change_inserted 193492759 1517736679
 under a given 
\family typewriter
\size footnotesize
<testIDprefix>
\change_unchanged

\family default
\size default
, what values (or ranges of values) those parameters may take, and how those
 parameters are then used to drive host, traffic generator and bottleneck
 configuration.
 
\family typewriter
\size small
TPCONF_parameter_list
\family default
\size default
 is a Python dictionary at the core of this mechanism.
\end_layout

\begin_layout Standard
The 
\emph on
keys
\change_inserted 193492759 1517809317

\emph default
 in 
\family typewriter
\size small
TPCONF_parameter_list
\change_unchanged

\family default
\size default
 are names that can be used in 
\family typewriter
\size small
TPCONF_vary_parameters
\family default
\size default
.
 The 
\emph on
values
\change_inserted 193492759 1517809324

\emph default
 in 
\family typewriter
\size small
TPCONF_parameter_list
\change_unchanged

\family default
\size default
 are 4-tuples
\change_inserted 193492759 1517809369
:
\change_deleted 193492759 1517809371
.
\change_inserted 193492759 1517809371

\end_layout

\begin_layout Itemize

\change_deleted 193492759 1517809377
 The first
\change_inserted 193492759 1517809377
1st
\change_unchanged
 parameter of each tuple is a list of V_variables that can be used, for
 example
\change_inserted 193492759 1517809458
,
\change_unchanged
 in the queue configuration or traffic generator configuration
\change_deleted 193492759 1517809384
.
 
\change_inserted 193492759 1517809384

\end_layout

\begin_layout Itemize

\change_deleted 193492759 1517809393
The second
\change_inserted 193492759 1517809393
2nd
\change_unchanged
 parameter of each tuple is a list of `short names' used in 
\change_inserted 193492759 1517809300
the 
\family typewriter
\size footnotesize
<testID>
\family default
\size default
 (and hence 
\change_unchanged
the file names
\change_inserted 193492759 1517809300
)
\change_unchanged
 of created log files
\change_deleted 193492759 1517809401
.
 The third
\change_inserted 193492759 1517809401

\end_layout

\begin_layout Itemize

\change_inserted 193492759 1517809402
3rd
\change_unchanged
 parameter of each tuple is the list of parameter values, these are usually
 references to the lists defined in the previous section
\change_inserted 193492759 1517809407

\end_layout

\begin_layout Itemize

\change_deleted 193492759 1517809410
.
 
\change_unchanged
The last parameter is a dictionary of extra V_variables to set (this can
 be empty), where the keys are variable names and the values are the variable
 values.
\change_inserted 193492759 1517809414

\end_layout

\begin_layout Standard

\change_deleted 193492759 1517809414
 
\change_unchanged
The length of the first three tuple parameters (V_variable identifiers,
 short names and V_variable values) must be equal.
\end_layout

\begin_layout Standard
When a 
\change_deleted 193492759 1517736634
series
\change_inserted 193492759 1517736634
group
\change_unchanged
 of experiments is started with `
\family typewriter
\size small
fab run_experiment_multiple
\family default
\size default
' the following happens: For each parameter combination of the parameters
 defined in TPCONF_vary_parameters
\change_inserted 193492759 1517737074
,
\change_unchanged
 one experiment is run where the parameter
\change_inserted 193492759 1517737092
 name-value pairs (using each parameter's short name) are used to
\change_unchanged
 
\change_deleted 193492759 1517737025
settings are logged
\change_inserted 193492759 1517737028
construct the
\change_deleted 193492759 1517737034
 
\change_inserted 193492759 1517809514
 
\family typewriter
\size footnotesize
<testID>
\family default
\size default
 (and hence
\change_deleted 193492759 1517737042
in
\change_unchanged
 
\change_deleted 193492759 1517737125
the
\change_inserted 193492759 1517737125
various
\change_unchanged
 
\change_inserted 193492759 1517737113
log 
\change_unchanged
file name
\change_inserted 193492759 1517809546
s)
\begin_inset Foot
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517893929
The parameters appear in the 
\family typewriter
\size footnotesize
<testID>
\family default
\size default
 in the same (user-defined) order they are listed in TPCONF_vary_parameters.
\change_unchanged

\end_layout

\end_inset


\change_deleted 193492759 1517737057
 using the short names
\change_unchanged
, and the V_ variables are set to the parameter combination given by the
 value lists.
 
\end_layout

\begin_layout Standard
TPCONF_parameter_list can handle grouped V_variables, where in each experiment
 a specific combination of the grouped V_variables is used.
 An example of this is the 
\change_inserted 193492759 1517737158

\emph on
bandwidths
\emph default
 
\change_unchanged
parameter 
\change_deleted 193492759 1517737161
bandwidths 
\change_unchanged
which uses TPCONF_bandwidths 
\change_inserted 193492759 1517737177
for its
\change_deleted 193492759 1517737176
as
\change_unchanged
 values.
\end_layout

\begin_layout Standard
TPCONF_variable_defaults is a dictionary that specifies the defaults for
 V_ variables.
 The keys are V_ variable names and the values are the default values (often
 the first value of the parameter lists).
 For each parameter that is not varied, the default value specified in TPCONF_va
riable_defaults is used.
 
\end_layout

\begin_layout Standard
We now discuss a simple example where we focus on the variables to vary
 delay and TCP algorithms.
 Assume we want to experiment with two delay settings and two different
 TCP CC algorithms.
 So we have:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_delays = [ 0, 50 ] 
\end_layout

\begin_layout Plain Layout

TPCONF_TCP_algos = [ 'newreno', 'cubic' ]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We also need to specify the two parameters to be varied and the default
 parameters for the variables as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Specify-vary-parameters"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

TPCONF_parameter_list = { 
\end_layout

\begin_layout Plain Layout

'delays'   : ( [ 'V_delay' ],       [ 'del' ], TPCONF_delays,    {} ), 
\end_layout

\begin_layout Plain Layout

'tcpalgos' : ( [ 'V_tcp_cc_algo' ], [ 'tcp' ], TPCONF_TCP_algos, {} ), 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

TPCONF_variable_defaults {
\end_layout

\begin_layout Plain Layout

'V_delay'    : TPCONF_delays[0]',
\end_layout

\begin_layout Plain Layout

'V_tcp_algo' : TPCONF_TCP_algos[0],
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

TPCONF_vary_parameters = [ 'delays', 'tcpalgos' ]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Specify-vary-parameters"

\end_inset

Specifying the parameters to be varied
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
V_delay can then be used in the router queue settings.
 V_tcp_cc_algo is passed to the host setup function.
 When we run `fab run_experiment_multiple' this will run the following experimen
ts, 
\change_deleted 193492759 1517737238
here 
\change_unchanged
represented by the 
\change_deleted 193492759 1517737242
start of the log file names
\change_inserted 193492759 1517737245
following test IDs
\change_unchanged
 (we assume the test ID prefix is the default from Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Experiment-general-settings"

\end_inset

):
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\change_inserted 1685850735 1502423224

exp_
\change_unchanged
20131206-170846_del_0_tcp_newreno 
\end_layout

\begin_layout Plain Layout

\change_inserted 1685850735 1502423227

exp_
\change_unchanged
20131206-170846_del_0_tcp_cubic 
\end_layout

\begin_layout Plain Layout

\change_inserted 1685850735 1502423229

exp_
\change_unchanged
20131206-170846_del_50_tcp_newreno 
\end_layout

\begin_layout Plain Layout

\change_inserted 1685850735 1502423231

exp_
\change_unchanged
20131206-170846_del_50_tcp_cubic
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Adding new V_ variables
\end_layout

\begin_layout Standard
New V_variables are easy to add.
 Say we want to create a new V_variable called V_varx.
 We need to do the following:
\end_layout

\begin_layout Enumerate
Add a new list with parameter values, let's say TPCONF_varx = [ x, y ] 
\end_layout

\begin_layout Enumerate
Add one line in TPCONF_parameters_list: the key is the identifier that can
 be used in TPCONF_vary_parameters (let's call it varx_vals), and the value
 is a 4-tuple: variable name as string `V_varx', variable name used in file
 name (say `varx'), pointer to value list (here TPCONF_varx), and optionally
 a dictionary with related variables (here empty).
\end_layout

\begin_layout Enumerate
Add one line in TPCONF_variable_defaults specifying the default value used
 (when not iterating over the variable): the key is the V_variable name
 as string (here `V_varx') and the value is the default value from TPCONF_varx
 (say 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

TPCONF_varx[0]
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
Technically, step 1 is not necessary as the list of values can be put directly
 in TPCONF_parameters_list and the default value can be put directly in
 TPCONF_variable_defaults.
 However, defining a separate list improves the readability.
\end_layout

\begin_layout Section
Available traffic generators
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:Config-traffic-generators"

\end_inset


\end_layout

\begin_layout Standard
This section describes the traffic generators (listed by their 
\family typewriter
\size small
start
\change_inserted 193492759 1517894395
_*
\change_unchanged

\family default
\size default
 function names) that can be 
\change_deleted 193492759 1517894675
used
\change_inserted 193492759 1517894676
configured
\change_unchanged
 in TPCONF_traffic_gens
\change_inserted 193492759 1517894720
 (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Traffic-generator-setup"

\end_inset

)
\change_unchanged
.
\end_layout

\begin_layout Subsection
start_iperf
\end_layout

\begin_layout Standard
This starts an iperf client and server.
 Note that the client sends data to the server.
 It has the following parameters: 
\end_layout

\begin_layout Itemize

\series bold
port
\series default
: port number to use for client and server (passed to iperf -p option) 
\end_layout

\begin_layout Itemize

\series bold
client
\series default
: IP or name of client (passed to iperf -c option)
\end_layout

\begin_layout Itemize

\series bold
server
\series default
: IP or name of server (passed to iperf -B option)
\end_layout

\begin_layout Itemize

\series bold
duration
\series default
: time in seconds the client transmits (passed to iperf -t option)
\end_layout

\begin_layout Itemize

\series bold
congestion_algo
\series default
: TCP congestion algorithm to use (works only on Linux) 
\end_layout

\begin_layout Itemize

\series bold
kill
\series default
: By default this is `0' and the iperf client will terminate after duration
 seconds.
 If this is set to `1', the iperf client will be killed approximately 1
 second after duration.
 This is a work-around for a 
\begin_inset Quotes eld
\end_inset

feature
\begin_inset Quotes erd
\end_inset

 in iperf that prevents it from stopping after the specified duration.
 (If set to `1', the iperf server is also killed approximately 2 seconds
 after duration.)
\end_layout

\begin_layout Itemize

\series bold
mss
\series default
: TCP maximum segment size (passed to iperf -M option)
\end_layout

\begin_layout Itemize

\series bold
buf_size
\series default
: Send and receive buffer size in bytes (passed to iperf -j and -k, which
 only exist for iperf with the CAIA patch 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

) 
\end_layout

\begin_layout Itemize

\series bold
proto
\series default
: Protocol to use, `tcp' (default) or `udp' (sets iperf -u option for `udp')
 
\end_layout

\begin_layout Itemize

\series bold
rate
\series default
: The bandwidth used for TCP (passed to iperf -a option) or UDP (passed
 to iperf -b option).
 Can end in `K' or `M' to indicate kilo bytes or mega bytes.
 
\end_layout

\begin_layout Itemize

\series bold
extra_params_client
\series default
: Command line parameters passed to iperf client 
\end_layout

\begin_layout Itemize

\series bold
extra_params_server
\series default
: Command line parameters passed to iperf server
\end_layout

\begin_layout Subsection
start_ping
\end_layout

\begin_layout Standard
This starts a ping and has the following parameters: 
\end_layout

\begin_layout Itemize

\series bold
client
\series default
: IP or name of machine to run ping on 
\end_layout

\begin_layout Itemize

\series bold
dest
\series default
: IP or name of machine to ping 
\change_inserted 1685850735 1489021612

\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1489021642

\series bold
duration
\series default
: 
\change_inserted 193492759 1491908437
Emit pings for this many seconds
\change_deleted 193492759 1491908439
time in seconds the pings will occur for
\change_unchanged

\end_layout

\begin_layout Itemize

\series bold
rate
\series default
: number of pings per second (Windows ping only supports 1 ping/second)
 (default = 1) 
\end_layout

\begin_layout Itemize

\series bold
extra_params
\series default
: Command line parameters passed to ping
\end_layout

\begin_layout Subsection
start_http_server
\end_layout

\begin_layout Standard
This starts a
\change_inserted 193492759 1517894089
 lighttpd-based
\change_deleted 193492759 1517894090
n
\change_unchanged
 HTTP server 
\change_deleted 193492759 1517894107
(lighttpd) 
\change_unchanged
and has the following parameters: 
\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1489021790

\series bold
server
\series default
: IP or name of HTTP server
\end_layout

\begin_layout Itemize

\series bold
port
\series default
: port to listen on (currently one server can listen on only one port) 
\end_layout

\begin_layout Itemize

\series bold
config_dir
\series default
: directory where the config file (lighttpd.conf) should be copied to 
\end_layout

\begin_layout Itemize

\series bold
config_in
\series default
: local template for config file 
\end_layout

\begin_layout Itemize

\series bold
docroot
\series default
: document root on server (FreeBSD default: /usr/local/www/data, MacOSX
 default: /opt/local/www/htdocs, Linux/CYGWIN default: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

/srv/www/htdocs
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

)
\change_inserted 1870295737 1517868826

\end_layout

\begin_layout Subsection

\change_inserted 1870295737 1517870673
start_nginx_server
\change_inserted 193492759 1517894788

\end_layout

\begin_layout Standard

\change_deleted 193492759 1517894795
 
\change_inserted 193492759 1517894795
[
\change_deleted 193492759 1517894809

\series bold
\shape italic
(
\change_inserted 193492759 1517894810
N
\change_deleted 193492759 1517894809
n
\change_inserted 1870295737 1517870673
ew in TEACUP 1.1
\change_inserted 193492759 1517894799

\series default
\shape default
] 
\change_deleted 193492759 1517894802
)
\change_inserted 193492759 1517894807
 
\change_inserted 1870295737 1517868874
This starts an 
\change_inserted 193492759 1517894099
nginx-based 
\change_inserted 1870295737 1517868874
HTTP server 
\change_deleted 193492759 1517894103
(nginx) 
\change_inserted 1870295737 1517868874
and has the following parameters: 
\end_layout

\begin_layout Itemize

\change_inserted 1870295737 1517868826

\series bold
server
\series default
: IP or name of HTTP server
\end_layout

\begin_layout Itemize

\change_inserted 1870295737 1517868826

\series bold
port
\series default
: port to listen on (currently one server can listen on only one port) 
\end_layout

\begin_layout Itemize

\change_inserted 1870295737 1517868952

\series bold
config_dir
\series default
: directory where the config file (nginx.conf) should be copied to 
\end_layout

\begin_layout Itemize

\change_inserted 1870295737 1517868826

\series bold
config_in
\series default
: local template for config file 
\end_layout

\begin_layout Itemize

\change_inserted 1870295737 1517869598

\series bold
docroot
\series default
: document root on server (FreeBSD default: /usr/local/www/nginx, Linux
 default: 
\begin_inset ERT
status open

\begin_layout Plain Layout

\change_inserted 1870295737 1517868826


\backslash
mbox{
\end_layout

\end_inset

/var/www/html
\begin_inset ERT
status open

\begin_layout Plain Layout

\change_inserted 1870295737 1517868826

}
\end_layout

\end_inset

)
\change_unchanged

\end_layout

\begin_layout Subsection
create_http_dash_content
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517894893
[
\series bold
\emph on
Deprecated in TEACUP 1.1, but still available
\series default
\emph default
] 
\change_unchanged
This creates fake content for the DASH-like 
\change_inserted 193492759 1517894860
httperf_dash 
\change_unchanged
client.
 It has the following parameters: 
\end_layout

\begin_layout Itemize

\series bold
server
\series default
: IP or name of HTTP server 
\end_layout

\begin_layout Itemize

\series bold
docroot
\series default
: document root of HTTP server (FreeBSD default: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

/usr/local/www/data
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, MacOSX default: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

/opt/local/www/htdocs
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, Linux/CYGWIN default: /srv/www/htdocs) 
\end_layout

\begin_layout Itemize

\series bold
duration
\series default
: number of seconds of fake content 
\end_layout

\begin_layout Itemize

\series bold
rates
\series default
: comma-separated list of DASH rates in kB 
\end_layout

\begin_layout Itemize

\series bold
cycles
\series default
: comma-separated list of cycle lengths in seconds
\change_inserted 193492759 1493290580

\end_layout

\begin_layout Standard

\change_inserted 193492759 1493290804
NOTE: This generator is deprecated in TEACUP 1.1, along with 
\emph on
start_httperf_dash
\emph default
.
 Users are recommended to launch lighttpd server with genuine DASH content
 instead, and use 
\emph on
start_dash_streaming_dashjs
\emph default
 to launch a genuine DASH client.
\change_unchanged

\end_layout

\begin_layout Subsection
create_http_incast_content
\end_layout

\begin_layout Standard
This creates fake content for incast experiments.
 It has the following parameters: 
\end_layout

\begin_layout Itemize

\series bold
server
\series default
: IP or name of HTTP server 
\end_layout

\begin_layout Itemize

\series bold
docroot
\series default
: document root of HTTP server (FreeBSD default: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

/usr/local/www/data
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, MacOSX default: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

/opt/local/www/htdocs
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, Linux/CYGWIN default: /srv/www/htdocs) 
\change_inserted 1685850735 1489021908

\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1489021908

\series bold
duration
\series default
: number of seconds of fake content
\change_unchanged

\end_layout

\begin_layout Itemize

\series bold
sizes
\series default
: comma-separated list of content file sizes 
\end_layout

\begin_layout Subsection
start_httperf
\end_layout

\begin_layout Standard
This starts an httperf HTTP client.
 It has the following parameters: 
\end_layout

\begin_layout Itemize

\series bold
client
\series default
: IP or name of client 
\end_layout

\begin_layout Itemize

\series bold
server
\series default
: IP or name of HTTP server (passed to httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-server)
\end_layout

\begin_layout Itemize

\series bold
port
\series default
: port server is listening on (passed to httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-port)
\end_layout

\begin_layout Itemize

\series bold
conns
\series default
: total number of connections (passed to httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-num-conns)
\end_layout

\begin_layout Itemize

\series bold
rate
\series default
: rate at which connections are created (passed to httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-rate)
\end_layout

\begin_layout Itemize

\series bold
timeout
\series default
: timeout for each connection; httperf will give up if a HTTP request does
 not complete within the timeout (passed to httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-timeout) 
\end_layout

\begin_layout Itemize

\series bold
calls
\series default
: number of requests in each connection (passed to httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-num-calls, default = 1) 
\end_layout

\begin_layout Itemize

\series bold
burst
\series default
: length of burst (passed to httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-burst-length)
\end_layout

\begin_layout Itemize

\series bold
wsesslog
\series default
: session description file (passed to third parameter of httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-wsesslog)
\end_layout

\begin_layout Itemize

\series bold
wsesslog_timeout
\series default
: default timeout for each wsesslog connection (passed to second parameter
 of httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-wsesslog) 
\end_layout

\begin_layout Itemize

\series bold
period
\series default
: time between creation of connections; equivalent to 1/rate if period is
 a number, but period can also specify inter-arrival time distributions
 (see httperf man page) 
\end_layout

\begin_layout Itemize

\series bold
sessions
\series default
: number of sessions (passed to first parameter of httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-wsesslog, default = 1) 
\end_layout

\begin_layout Itemize

\series bold
call_stats
\series default
: number of entries in call statistics array (passed to httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-call-stats, default = 1000) 
\end_layout

\begin_layout Itemize

\series bold
extra_params
\series default
: Command line parameters passed to httperf
\end_layout

\begin_layout Subsection
start_httperf_dash
\end_layout

\begin_layout Standard

\change_inserted 193492759 1517894948
[
\series bold
\emph on
Deprecated in TEACUP 1.1, but still available
\series default
\emph default
] 
\change_unchanged
This starts a 
\change_inserted 193492759 1517735196
simplistic, 
\change_unchanged
DASH-like httperf client.
 It has the following parameters: 
\end_layout

\begin_layout Itemize

\series bold
client
\series default
: IP or name of client 
\end_layout

\begin_layout Itemize

\series bold
server
\series default
: IP or name of HTTP server (passed to httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-server)
\end_layout

\begin_layout Itemize

\series bold
port
\series default
: port server is listening on (passed to httperf -
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

-port)
\end_layout

\begin_layout Itemize

\series bold
duration
\series default
: duration of DASH flow in seconds 
\end_layout

\begin_layout Itemize

\series bold
rate
\series default
: data rate of DASH-like flow in kbps 
\end_layout

\begin_layout Itemize

\series bold
cycle
\series default
: interval between requests in seconds 
\end_layout

\begin_layout Itemize

\series bold
prefetch
\series default
: prefetch time in seconds of content to prefetch (can be fractional number)
 (default = 0.0) 
\end_layout

\begin_layout Itemize

\series bold
prefetch_timeout
\series default
: like timeout for start_httperf but only for the prefetch (by default this
 is set to cycle) 
\end_layout

\begin_layout Itemize

\series bold
with_timeout
\series default
: if set to `0' there is no timeout for requests (a request may take longer
 to complete than cycle); if set to `1' httperf will close the connection
 and terminate the session if the download of a chunk takes longer than
 cycle
\end_layout

\begin_layout Itemize

\series bold
extra_params
\series default
: Command line parameters passed to httperf
\end_layout

\begin_layout Standard
The behaviour is as follows: 
\end_layout

\begin_layout Enumerate
The client opens a persistent TCP connection to the server.
\end_layout

\begin_layout Enumerate
If prefetch is > 0.0 the client will fetch the specified number of seconds
 of content and right after that send a request for the next block (step
 3).
 
\end_layout

\begin_layout Enumerate
The client will request a block of content, wait for some time (cycle minus
 download time) and then request the next block.
 The size of one block is 
\change_deleted 193492759 1517735237
cycle
\begin_inset Formula $\cdot$
\end_inset

rate
\begin_inset Formula $\cdot$
\end_inset

1000
\begin_inset Formula $/$
\end_inset

8 bytes
\change_inserted 193492759 1517735237

\begin_inset Formula $cycle\cdot rate\cdot1000/8bytes$
\end_inset


\change_unchanged
.
 
\end_layout

\begin_layout Standard
If prefetch_timeout is set, the prefetch must be completed within the timeout,
 or otherwise httperf will close the connection and terminate the session.
 Similarly, if with_timeout=`1', httperf will close the connection and terminate
 the session if the download of a chunk takes longer than cycle seconds.
\end_layout

\begin_layout Standard
Note that the number of chunks requested by the httperf client is set to
 floor((duration - prefetch_timeout) / cycle).
 This number guarantees that httperf can complete and generate the statistics
 output within the specified duration, even if the downloading takes the
 maximum amount of time (downloading always just finishes within the timeouts).
 However, this also means that if the prefetch is much faster than prefetch_time
out and/or the download of the last chunk is much faster than cycle seconds,
 httperf will finish well before duration seconds.
\change_inserted 193492759 1493290740

\end_layout

\begin_layout Standard

\change_inserted 193492759 1493290798

\series bold
NOTE:
\series default
 This generator is deprecated in TEACUP 1.1.
 Users are recommended to launch lighttpd 
\change_inserted 1870295737 1517869912
or nginx 
\change_inserted 193492759 1493290798
server with genuine DASH content instead, and use 
\emph on
start_dash_streaming_dashjs
\emph default
 to launch a genuine DASH client.
\change_inserted 1685850735 1489639177

\end_layout

\begin_layout Subsection

\change_inserted 1685850735 1489708934
start_dash_streaming_dashjs
\change_deleted 193492759 1517894917
 
\change_deleted 1870295737 1491538822

\end_layout

\begin_layout Standard

\change_inserted 1685850735 1489708947
\begin_inset CommandInset label
LatexCommand label
name "subsec:start_dashjs"

\end_inset


\end_layout

\begin_layout Standard

\change_inserted 193492759 1517894913
[
\series bold
\shape italic
New in TEACUP 1.1
\series default
\shape default
]  
\change_inserted 1685850735 1489641609
This starts 
\change_unchanged
a 
\change_inserted 193492759 1491908505
genuine 
\change_inserted 1685850735 1489641609
DASH 
\change_deleted 1870295737 1491802593
video 
\change_inserted 1685850735 1489641609
streaming client
\change_inserted 193492759 1491908271
 (
\change_deleted 193492759 1491908272
, 
\change_deleted 1870295737 1491802595
via 
\change_inserted 1685850735 1489641609
dash.js
\change_inserted 193492759 1491908276
)
\change_inserted 1870295737 1491802604
 inside a web browser
\change_inserted 193492759 1494485516
 on an end host.
\change_deleted 1870295737 1491802585
, to retrieve video content off a lighttpd server dynamically
\change_deleted 193492759 1494485510
.

\change_inserted 1685850735 1489641609
 It has the following parameters:
\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1489639179

\series bold
client
\series default
: IP or name of 
\change_inserted 1870295737 1491539069
DASH 
\change_inserted 1685850735 1489639179
client
\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1489639179

\series bold
server
\series default
: IP
\change_deleted 1870295737 1517870048
 
\change_inserted 1870295737 1491538980
 
\change_inserted 1685850735 1489639179
or name of 
\change_inserted 1870295737 1491539072
DASH 
\change_inserted 1685850735 1489639179
server
\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1489639502

\series bold
serv_port
\series default
: port server is listening on
\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1489639179

\series bold
duration
\series default
: duration
\change_inserted 1870295737 1491539088
 of DASH flow
\change_inserted 1685850735 1489639179
 in seconds
\change_inserted 1870295737 1491804195
 (since version 2.3.0, dash.js supports playback looping, so the specified
 duration can be longer than the video time)
\change_inserted 1685850735 1489639179

\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1489640684

\series bold
browser
\series default
: cho
\change_inserted 1870295737 1491802626
o
\change_inserted 1685850735 1489640684
se between a 
\change_inserted 1870295737 1491802629
C
\change_deleted 1870295737 1491802629
c
\change_inserted 1685850735 1489640684
hrome or 
\change_inserted 1870295737 1491802632
F
\change_deleted 1870295737 1491802632
f
\change_inserted 1685850735 1489640684
irefox browser
\change_deleted 1870295737 1491802640
 (chrome by default)
\change_inserted 1685850735 1489640684

\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1489640989

\series bold
chunk_size
\series default
: 
\change_inserted 1870295737 1491539103
s
\change_deleted 1870295737 1491539103
S
\change_inserted 1685850735 1489640989
pecify the video chunk size 
\change_inserted 1870295737 1491539116
(availability depends on the dataset)
\change_inserted 1685850735 1489640989

\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1489641043

\series bold
mpd
\series default
: 
\change_inserted 1870295737 1491539126
s
\change_deleted 1870295737 1491539126
S
\change_inserted 1685850735 1489641043
pecify the 
\change_inserted 1870295737 1491539132
file
\change_inserted 1685850735 1489641043
name of 
\change_deleted 1870295737 1491539138
the 
\change_inserted 1685850735 1489641043
Media Presentation Description (MPD) 
\change_inserted 1870295737 1491802765
(availability depends on the dataset)
\end_layout

\begin_layout Itemize

\change_inserted 1870295737 1491802817

\series bold
player_path: 
\series default
specify the path to dash.js player
\change_inserted 193492759 1491908629
 source
\change_inserted 1870295737 1491802817
 (
\change_deleted 193492759 1491908642
dash.js source files
\change_inserted 193492759 1491908642
which
\change_inserted 1870295737 1491802817
 can be located on other hosts)
\change_unchanged

\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538960

\series bold
extra_params
\series default
: Command line parameters passed to start_dash_streaming_dashjs
\change_inserted 1870295737 1491539913

\end_layout

\begin_layout Standard

\change_inserted 1870295737 1517870790
Note that some additional setup are required for 
\emph on
start_dash_streaming_dashjs
\emph default
 to run successfully:
\change_deleted 193492759 1491908547
 (See
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "CAIA-TR-161216A"

\end_inset

 for more details and configuration examples)
\change_inserted 1870295737 1491804564
:
\end_layout

\begin_layout Enumerate

\change_deleted 193492759 1517735650

\series bold
client: 
\series default
a
\change_inserted 193492759 1517735650
A
\change_inserted 1870295737 1491803124
dditional packages such as Xorg and Chrome
\change_inserted 193492759 1517894253
 (or
\change_deleted 193492759 1517894254
/
\change_inserted 193492759 1517894255
 
\change_inserted 1870295737 1491803124
Firefox
\change_inserted 193492759 1517894258
)
\change_inserted 1870295737 1491803124
 need to be installed
\change_inserted 193492759 1517735660
 on client host(s)
\change_inserted 1870295737 1491803124
.
\change_inserted 193492759 1517997540

\begin_inset Foot
status open

\begin_layout Plain Layout

\change_inserted 193492759 1517997547
These client host(s) must also have a functional video card (not an emulated
 X server) for proper browser-based DASH client behaviour.
\change_unchanged

\end_layout

\end_inset


\change_inserted 1870295737 1491803124

\end_layout

\begin_layout Enumerate

\change_deleted 193492759 1517735664

\series bold
server:
\series default
 
\change_inserted 193492759 1517735666
A 
\change_inserted 1870295737 1491803151
DASH
\change_inserted 193492759 1517735724
-compliant
\change_inserted 1870295737 1491803151
 dataset needed to be present and served by the web server 
\change_deleted 193492759 1517735675
accordingly
\change_inserted 193492759 1517735682
 host(s)
\change_inserted 1870295737 1491803151
.
\end_layout

\begin_layout Enumerate

\change_deleted 193492759 1517735702

\series bold
dash.js player:
\series default
 
\change_inserted 193492759 1517735698
The 
\change_inserted 1870295737 1491804672
dash.js 
\change_inserted 193492759 1517735696
player's 
\change_inserted 1870295737 1491804672
source files need to be 
\change_deleted 193492759 1517997580
do
\change_inserted 193492759 1517997585
available (served) from 
\change_deleted 193492759 1517997588
wnloaded and placed/served on
\change_inserted 1870295737 1491804672
 either the control host or on
\change_inserted 193492759 1517997591
e
\change_inserted 1870295737 1491804672
 
\change_deleted 193492759 1517997593
any
\change_inserted 193492759 1517997594
of the
\change_inserted 1870295737 1491804672
 experiment hosts
\change_inserted 193492759 1491908592
.
 The 
\change_deleted 193492759 1491908593
 (
\change_inserted 1870295737 1491804672
location 
\change_inserted 193492759 1491908616
of dash.js source files 
\change_deleted 193492759 1517997621
should be
\change_inserted 193492759 1517997621
is
\change_inserted 1870295737 1491804672
 supplied via 
\family typewriter
\size small
player_path
\change_deleted 193492759 1491908601

\family default
\size default
)
\change_inserted 1870295737 1491804672
.
\end_layout

\begin_layout Standard

\change_inserted 193492759 1491908555
See
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "CAIA-TR-161216A"

\end_inset

 for more details and configuration examples.
\change_deleted 1870295737 1491803274
In order for the dashjs traffic generator to work, it is important that
 the lighttpd server has been setup, and is able to deliver out DASH video
 content.
 The processes required are described in technical detail in 
\begin_inset CommandInset citation
LatexCommand cite
key "CAIA-TR-161216A"

\end_inset

, but essentially a DASH video dataset needs to exist on the lighttpd server,
 so that the dash.js software can retrieve it dynamically, emulating a user
 watching a video.
 Additionally a browser interface must be setup on the Client, in order
 for the video content to actually be played.
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491803274
Two essential parameters that are required in order for this to happen are
 the chunk_size, and the mpd.
 The MPD is the main file that the client requests from the lighttpd server
 in order to start receiving the DASH content.
 This file essentially describes the main structure of all the DASH dataset
 it currently contains.
 
\change_inserted 1685850735 1489706948

\end_layout

\begin_layout Standard

\change_inserted 1870295737 1491546880
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\change_inserted 1870295737 1491546880
The three main processes it describes are:
\end_layout

\begin_layout Plain Layout

\change_inserted 1870295737 1491546880
Period: The specific duration of the video content.
\end_layout

\begin_layout Plain Layout

\change_inserted 1870295737 1491546880
Representation: From the Period specified, there are different representations
 of the video content (different bit rates).
\end_layout

\begin_layout Plain Layout

\change_inserted 1870295737 1491546880
Chunks: For the different Representations, there are different video chunks,
 all of which lineup to ensure that they can be dynamically changed between
 without stalling.
 
\change_unchanged

\end_layout

\end_inset


\change_deleted 1870295737 1491546880
The three main processes it describes are:
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491546880
Period: The specific duration of the video content.
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491546880
Representation: From the Period specified, there are different representations
 of the video content (different bit rates).
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491546880
Chucks: For the different Representations, there are different video chunks,
 all of which lineup to ensure that they can be dynamically changed between
 without stalling.
 
\change_inserted 1685850735 1489708809

\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491802935
The chunk_size parameter is important in conjunction with the MPD file,
 to allow the specification of the chunk sizes to be retrieved (2, 4, 6
 second chunk sizes ...).
 This in turn will define how the on-off cycles are formed, in relation
 to the amount downloaded (ON), and when DASH content is not being downloaded
 (OFF).
 
\change_inserted 1685850735 1489708858

\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806
start_dash_streaming_vlc 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\change_inserted 1685850735 1489708874
Potentially be removed
\change_unchanged

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806
This starts a DASH video streaming client via VLC, to retrieve video content
 off a lighttpd server dynamically.
 It has the following parameters:
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806

\series bold
client
\series default
: IP or name of client
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806

\series bold
server
\series default
: IP or name of server
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806

\series bold
serv_port
\series default
: port server is listening on
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806

\series bold
duration
\series default
: duration in seconds
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806

\series bold
browser
\series default
: chose between a chrome or firefox browser (chrome by default)
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806

\series bold
chunk_size
\series default
: Specify the video chunk size 
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806

\series bold
mpd
\series default
: Specify the name of the Media Presentation Description (MPD)
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806

\series bold
verbosity
\series default
: Specify the logging verbosity of the VLC client (between 1 and 10, default
 is 2)
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806

\series bold
vlc_location
\series default
: Indicates where the VLC source code directory is located
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806

\series bold
base_url
\series default
: Location of where the video files are relative to the docroot of the server
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806

\series bold
extra_params
\series default
: Command line parameters passed to start_dash_streaming_vlc
\end_layout

\begin_layout Standard

\change_deleted 1870295737 1491538806
Its retrieval of video is very similar to how dash.js does it, described
 in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:start_dashjs"

\end_inset

.
 The extra parameters vlc_location and base_url are used to specify where
 the vlc application is located, and the DASH dataset is located respectively.
 The verbosity parameter can also be set to adjust how much logging VLC
 is doing.
\change_unchanged

\end_layout

\begin_layout Subsection
start_httperf_incast
\end_layout

\begin_layout Standard
This starts an httperf client for the incast scenario.
 It has the following parameters: 
\end_layout

\begin_layout Itemize

\series bold
client
\series default
: IP or name of client 
\end_layout

\begin_layout Itemize

\series bold
servers
\series default
: comma-separated list where each entry specifies one server in the form
 of `[IP|name]:port'.
 IP or name is a server's IP address or name and port is the port the server
 is listening on (a separate session for each server is created via httperf's
 session log).
\end_layout

\begin_layout Itemize

\series bold
duration
\series default
: duration of incast session in seconds 
\end_layout

\begin_layout Itemize

\series bold
period
\series default
: period between requests in seconds (floating point number)
\end_layout

\begin_layout Itemize

\series bold
burst_size
\series default
: number of queries sent at each period start (this is to increase the number
 of queries in a testbed that only has a few physical responder machines)
 
\end_layout

\begin_layout Itemize

\series bold
response_size
\series default
: size of response from each responder in kB 
\end_layout

\begin_layout Itemize

\series bold
extra_params
\series default
: Command line parameters passed to httperf
\end_layout

\begin_layout Standard
Note
\change_inserted 193492759 1517735786
: 
\change_deleted 193492759 1517735787
 that i
\change_inserted 193492759 1517735788
I
\change_unchanged
f httperf can not complete a request within period time, if will close the
 connection and terminate the session with the responder (sessions with
 other responders are unaffected).

\change_inserted 193492759 1493290838
 This may or may not be desirable behaviour.
\change_unchanged

\end_layout

\begin_layout Subsection
start_nttcp
\end_layout

\begin_layout Standard
This starts an nttcp client and an nttcp server for some simple unidirectional
 UDP VoIP flow emulation.
 It has the following parameters: 
\end_layout

\begin_layout Itemize

\series bold
client
\series default
: IP or name of client 
\end_layout

\begin_layout Itemize

\series bold
server
\series default
: IP or name of HTTP server 
\end_layout

\begin_layout Itemize

\series bold
port
\series default
: control port server is listening on (passed to nttcp -p)
\end_layout

\begin_layout Itemize

\series bold
duration
\series default
: duration of the flow (based on this and the interval TEACUP computes the
 number of buffers to send, passed to nttcp -n)
\end_layout

\begin_layout Itemize

\series bold
interval
\series default
: interval between UDP packets in milliseconds (passed to nttcp -g)
\end_layout

\begin_layout Itemize

\series bold
psize
\series default
: UDP payload size (excluding UDP/IP header) (passed to nttcp -l)
\end_layout

\begin_layout Itemize

\series bold
buf_size
\series default
: send buffer size (passed to nttcp -w)
\end_layout

\begin_layout Itemize

\series bold
extra_params_client
\series default
: Command line parameters passed to nttcp client 
\end_layout

\begin_layout Itemize

\series bold
extra_params_server
\series default
: Command line parameters passed to nttcp server
\end_layout

\begin_layout Standard
Note that nttcp also opens a TCP control connection between client and server.
 However, on this connection only a few packets are exchanged before and
 after the data flow.
 
\end_layout

\begin_layout Subsection
start_httperf_incast_n
\end_layout

\begin_layout Standard
This starts an httperf client (querier) and 
\begin_inset Formula $n$
\end_inset

 HTTP servers (responders) for an incast scenario.
 It also generates the fake content for all 
\begin_inset Formula $n$
\end_inset

 servers.
 Basically this generator is a shortcut to setting up 
\begin_inset Formula $n$
\end_inset

 servers with 
\begin_inset Formula $n$
\end_inset

 start_http_server and create_http_incast_content.
 It has the following parameters: 
\end_layout

\begin_layout Itemize

\series bold
client
\series default
: IP or name of client 
\end_layout

\begin_layout Itemize

\series bold
servers
\series default
: comma-separated list of servers, where each entry is either the IP or
 the host name of an HTTP server (a separate session for each server is
 created via httperf's session log)
\end_layout

\begin_layout Itemize

\series bold
server_port_start
\series default
: the port the first server is listening on.
 All further servers will be started on consecutive port numbers in the
 order they are specified in servers
\end_layout

\begin_layout Itemize

\series bold
duration
\series default
: duration of incast session in seconds 
\end_layout

\begin_layout Itemize

\series bold
period
\series default
: period between requests in seconds (floating point number)
\end_layout

\begin_layout Itemize

\series bold
burst_size
\series default
: number of queries sent at each period start (this is to increase the number
 of queries in a testbed that only has a few physical responder machines)
 
\end_layout

\begin_layout Itemize

\series bold
response_size
\series default
: size of response from each responder in kB 
\end_layout

\begin_layout Itemize

\series bold
config_dir
\series default
: directory where the config file (lighttpd.conf) should be copied to 
\end_layout

\begin_layout Itemize

\series bold
config_in
\series default
: local template for config file 
\end_layout

\begin_layout Itemize

\series bold
docroot
\series default
: document root on server (FreeBSD default: /usr/local/www/data, MacOSX
 default: /opt/local/www/htdocs, Linux/CYGWIN default: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

/srv/www/htdocs
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize

\series bold
sizes
\series default
: comma-separated list of content file sizes on the servers
\end_layout

\begin_layout Itemize

\series bold
num_responders
\series default
: The querier will only send queries to the first num_responders servers.
 This can be used to vary the number of responders in a series of experiments
\end_layout

\begin_layout Itemize

\series bold
extra_params
\series default
: Command line parameters passed to httperf
\end_layout

\begin_layout Standard
Note that for this method the unique ID is the first ID used.
 The total number of IDs used is one plus the number of server/responders.
 Each server will be assigned a consecutive ID number starting with the
 first ID.
 The client will have an ID one higher than the highest server ID.
 If further traffic generators are specified after this generator, the user
 has to make sure there is no ID number clash.
\end_layout

\begin_layout Subsection
start_fps_game
\end_layout

\begin_layout Standard
This starts an emulated FPS game traffic session.
 From a logical viewpoint this starts several game clients and one game
 server.
 
\change_deleted 1685850735 1489014869
However, since the pktgen tool from 
\begin_inset CommandInset citation
LatexCommand cite
key "bitss-web"

\end_inset

 we use to generate the game traffic can only generate a single unidirectional
 traffic flow, this task starts pktgen twice as many times as there are
 clients (half of these processes generate the client-to-server traffic
 and half of these processes generate the server-to-client traffic).

\change_unchanged
 Th
\change_deleted 1685850735 1489726305
e task
\change_inserted 1685850735 1489726305
is task
\change_unchanged
 has the following parameters:
\end_layout

\begin_layout Itemize

\series bold
clients
\series default
: comma-separated list of clients where each client is specified as name/IP
 followed by a colon and the port number (e.g.
 client1:10000,client2:10001)
\end_layout

\begin_layout Itemize

\series bold
server
\series default
: server name/IP followed by a colon and the server port number (e.g.
 server1:27960)
\end_layout

\begin_layout Itemize

\series bold
game_type
\series default
: the type of game (can be `q3', `hl2cs', `hl2dm', `hlcs', `hldm', `et2pro',
 `q4')
\end_layout

\begin_layout Itemize

\series bold
c2s_interval
\series default
: time interval between packets send by client (in seconds)
\end_layout

\begin_layout Itemize

\series bold
c2s_psize
\series default
: base packet size of packets send by clients (number of bytes of UDP payload);
 note that pktgen randomly varies the size of packets within a few bytes
 above the base size)
\end_layout

\begin_layout Itemize

\series bold
s2c_interval
\series default
: time interval between packets send by server (in seconds)
\end_layout

\begin_layout Itemize

\series bold
duration
\series default
: duration of the game session (in seconds)
\end_layout

\begin_layout Itemize

\series bold
client_start_delay
\series default
: delay between the last server-to-client pktgen process started and the
 first client-to-server pktgen process started (in seconds) 
\end_layout

\begin_layout Itemize

\series bold
extra_params_client
\series default
: extra parameters passed to client pktgen processes
\end_layout

\begin_layout Itemize

\series bold
extra_params_server
\series default
: extra parameters passed to server pktgen processes 
\change_inserted 1685850735 1489023104

\end_layout

\begin_layout Itemize

\change_inserted 1685850735 1494307238

\series bold
noclients_games
\series default
: allows just the declaration of multiple clients without requiring that
 many clients to be setup, to emulate server behaviour for the specified
 number of clients.
 
\change_unchanged

\end_layout

\begin_layout Standard
Note that a pktgen server process will wait for packets from its corresponding
 client process before starting to send packets.
 In contrast, a client process will send packets to a corresponding server
 process immediately.
 If a client process is started, but the corresponding server process is
 not listening for packets yet, the server machine will return ICMP port
 unreachable messages to the client machine, which in turn will terminate
 the client process.
 The parameter client_start_delay must be set large enough so that all server
 processes are started and listen for packets before any client processes
 are started.
 The delay must be chosen based on the number of game clients (as each game
 client results in one pktgen process started on the server).
 By default client_start_delay is set to three seconds, which is sufficient
 for up 8 game clients.
\end_layout

\begin_layout Standard
Note that pktgen 
\change_deleted 193492759 1494485748
does 
\change_unchanged
only support
\change_inserted 193492759 1494485751
s emulating
\change_unchanged
 games with 4–32 clients.
 
\change_deleted 1685850735 1489023683
The smallest allowed number of clients is 4 and the largest allowed number
 of clients is 32.
\change_inserted 193492759 1494485802
Fewer actual clients may be specified i
\change_deleted 193492759 1494485803
I
\change_inserted 1685850735 1489023855
f 
\change_deleted 193492759 1494485860
noclients_game
\change_inserted 193492759 1494485860

\family typewriter
\size small
noclients_game
\change_inserted 1685850735 1489023855

\family default
\size default
 is specified to be between 4 and 32, 
\change_deleted 193492759 1494485860
then o
\change_inserted 193492759 1494485940
in which case fewer instances of pktgen will be launched and the server-to-clien
t traffic will emulate that of a game with 
\family typewriter
\size small
noclients_game
\family default
\size default
 clients.
\change_deleted 193492759 1494485860
nly 1 actual client can be setup
\change_inserted 1685850735 1489023855
.
 If 
\change_inserted 193492759 1494485893

\family typewriter
\size small
noclients_game
\family default
\size default
 is 
\change_inserted 1685850735 1489023855
not specified, then the number of separate clients must be at least 4, and
 no larger than 32.
 
\change_unchanged

\end_layout

\begin_layout Standard
Also note that for this method the unique ID is the first ID used.
 In total the number of IDs used is twice the number of clients.
 Each server-to-client pktgen will be assigned a consecutive ID number starting
 with the first ID.
 Each client-to-server pktgen will be assigned a consecutive ID number starting
 with an ID one higher than the highest server-to-client pktgen ID.
 If further traffic generators are specified after this generator, the user
 has to make sure there is no ID number clash.
\end_layout

\begin_layout Section
Running Experiments
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Running"

\end_inset


\end_layout

\begin_layout Standard
This section describes how to run experiments.
 First, we describe the initial steps needed.
 Then we outline a simple example config file.
 Finally, we describe how to run the experiments.
\end_layout

\begin_layout Subsection
Initial steps
\end_layout

\begin_layout Standard
First you should create a new directory for the experiment or series of
 experiments.
 Copy the files fabfile.py and run.sh (and run_resume.sh) from the TEACUP distribut
ion into that new directory.
 Then create a config.py file in the directory.
 An easy way to get a config.py file is to start with one of the provided
 example config files as basis and modify it as necessary.
\end_layout

\begin_layout Subsection
Example config
\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Example-config"

\end_inset

 shows a minimal but complete config.py file.
 The testbed consists of three machines, two hosts (192.168.1.2, 192.168.1.3)
 connected by a router (192.168.1.4).
 The two hosts will run FreeBSD for the experiment, while the router will
 run Linux.
 On the router we configure two pipes, one in each direction, with different
 rates but the same AQM mechanism, buffer size, and emulated delay and loss.
 The test traffic consists of two parallel TCP sessions generated with iperf,
 both start at the start of the experiment (time 0.0).
 With iperf the client sends data to the server, so the data is sent from
 192.168.1.2 to 192.168.1.3.
 Each experiment lasts 30 seconds and we run a series of experiments varying
 the TCP congestion control algorithm, network delay and loss, upstream
 and downstream bandwidths, AQM technique, and buffer size.
 There is one experiment for each combination of parameters (one run).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\tiny\ttfamily},captionpos=b,float={*p}"
inline false
status open

\begin_layout Plain Layout

import sys 
\end_layout

\begin_layout Plain Layout

import datetime 
\end_layout

\begin_layout Plain Layout

from fabric.api import env
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

env.user = 'root' 
\end_layout

\begin_layout Plain Layout

env.password = 'password'
\end_layout

\begin_layout Plain Layout

env.shell = '/bin/sh -c'
\end_layout

\begin_layout Plain Layout

env.timeout = 5
\end_layout

\begin_layout Plain Layout

env.pool_size = 10 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

TPCONF_script_path = '/home/test/src/teacup'
\end_layout

\begin_layout Plain Layout

sys.path.append(TPCONF_script_path)
\end_layout

\begin_layout Plain Layout

TPCONF_tftpboot_dir = '/tftpboot'
\end_layout

\begin_layout Plain Layout

TPCONF_router = [ '192.168.1.4', ] 
\end_layout

\begin_layout Plain Layout

TPCONF_hosts = [ '192.168.1.2', '192.168.1.3', ]
\end_layout

\begin_layout Plain Layout

TPCONF_host_internal_ip = { 
\end_layout

\begin_layout Plain Layout

'192.168.1.4' : [ '172.16.10.1', '172.16.11.1' ], 
\end_layout

\begin_layout Plain Layout

'192.168.1.2' : [ '172.16.10.2' ], 
\end_layout

\begin_layout Plain Layout

'192.168.1.3' : [ '172.16.11.2' ], }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

now = datetime.datetime.today() 
\end_layout

\begin_layout Plain Layout

TPCONF_test_id = 
\change_inserted 193492759 1517652017
'exp_' + 
\change_unchanged
now.strftime("%Y%m%d-%H%M%S")
\change_deleted 193492759 1517652022
 + '_experiment'
\change_unchanged
 
\end_layout

\begin_layout Plain Layout

TPCONF_remote_dir = '/tmp/'
\end_layout

\begin_layout Plain Layout

TPCONF_host_os = { 
\end_layout

\begin_layout Plain Layout

'192.168.1.4' : 'Linux', 
\end_layout

\begin_layout Plain Layout

'192.168.1.2' : 'FreeBSD', 
\end_layout

\begin_layout Plain Layout

'192.168.1.3' : 'FreeBSD', }
\end_layout

\begin_layout Plain Layout

TPCONF_linux_kern_router = '3.14.18-10000hz'
\end_layout

\begin_layout Plain Layout

TPCONF_force_reboot = '1' 
\end_layout

\begin_layout Plain Layout

TPCONF_boot_timeout = 100
\end_layout

\begin_layout Plain Layout

TPCONF_do_power_cycle = '0'
\end_layout

\begin_layout Plain Layout

TPCONF_host_power_ctrlport = {}
\end_layout

\begin_layout Plain Layout

TPCONF_power_admin_name = ''
\end_layout

\begin_layout Plain Layout

TPCONF_power_admin_pw = '' 
\end_layout

\begin_layout Plain Layout

\change_deleted 193492759 1517895767

TPCONF_max_time_diff = 1
\change_inserted 193492759 1517895767
TPCONF_max_time_diff = 2
\change_unchanged

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

TPCONF_router_queues = [ 
\end_layout

\begin_layout Plain Layout

( '1', "source='172.16.10.0/24', dest='172.16.11.0/24', delay=V_delay, loss=V_loss,
 rate=V_urate, queue_disc=V_aqm, queue_size=V_bsize" ), 
\end_layout

\begin_layout Plain Layout

( '2', "source='172.16.11.0/24', dest='172.16.10.0/24', delay=V_delay, loss=V_loss,
 rate=V_drate, queue_disc=V_aqm, queue_size=V_bsize" ), ]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

traffic_iperf = [ 
\end_layout

\begin_layout Plain Layout

( '0.0', '1', "start_iperf, client='192.168.1.2', server='192.168.1.3', port=5000,
 duration=V_duration" ), 
\end_layout

\begin_layout Plain Layout

( '0.0', '2', "start_iperf, client='192.168.1.2', server='192.168.1.3', port=5001,
 duration=V_duration" ), ]
\end_layout

\begin_layout Plain Layout

TPCONF_traffic_gens = traffic_iperf;
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

TPCONF_duration = 30
\end_layout

\begin_layout Plain Layout

TPCONF_runs = 1
\end_layout

\begin_layout Plain Layout

TPCONF_ECN = [ '0', '1' ]
\end_layout

\begin_layout Plain Layout

TPCONF_TCP_algos = [ 'newreno', 'cubic', 'htcp', ]
\end_layout

\begin_layout Plain Layout

TPCONF_host_TCP_algos = { }
\end_layout

\begin_layout Plain Layout

TPCONF_host_TCP_algo_params = { }
\end_layout

\begin_layout Plain Layout

TPCONF_host_init_custom_cmds = { }
\end_layout

\begin_layout Plain Layout

TPCONF_delays = [ 0, 25, 50, 100 ]
\end_layout

\begin_layout Plain Layout

TPCONF_loss_rates = [ 0, 0.001, 0.01 ] 
\end_layout

\begin_layout Plain Layout

TPCONF_bandwidths = [ ( '8mbit', '1mbit' ), ( '20mbit', '1.4mbit' ), ]
\end_layout

\begin_layout Plain Layout

TPCONF_aqms = [ 'pfifo', 'codel', 'pie' ]
\end_layout

\begin_layout Plain Layout

TPCONF_buffer_sizes = [ 1000, 1 ]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

TPCONF_parameter_list = { 
\end_layout

\begin_layout Plain Layout

'delays' : ( [ 'V_delay' ], [ 'del' ], TPCONF_delays, {} ), 
\end_layout

\begin_layout Plain Layout

'loss' : ( [ 'V_loss' ], [ 'loss' ], TPCONF_loss_rates, {} ), 
\end_layout

\begin_layout Plain Layout

'tcpalgos' : ( [ 'V_tcp_cc_algo' ], [ 'tcp' ], TPCONF_TCP_algos, {} ), 
\end_layout

\begin_layout Plain Layout

'aqms' : ( [ 'V_aqm' ], [ 'aqm' ], TPCONF_aqms, {} ), 
\end_layout

\begin_layout Plain Layout

'bsizes' : ( [ 'V_bsize' ], [ 'bs' ], TPCONF_buffer_sizes, {} ), 
\end_layout

\begin_layout Plain Layout

'runs' : ( [ 'V_runs' ], [ 'run' ], range(TPCONF_runs), {} ), 
\end_layout

\begin_layout Plain Layout

'bandwidths' : ( [ 'V_drate', 'V_urate' ], [ 'down', 'up' ], TPCONF_bandwidths,
 {} ), }
\end_layout

\begin_layout Plain Layout

TPCONF_variable_defaults = { 
\end_layout

\begin_layout Plain Layout

'V_ecn' : TPCONF_ECN[0], 
\end_layout

\begin_layout Plain Layout

'V_duration' : TPCONF_duration, 
\end_layout

\begin_layout Plain Layout

'V_delay' : TPCONF_delays[0], 
\end_layout

\begin_layout Plain Layout

'V_loss' : TPCONF_loss_rates[0], 
\end_layout

\begin_layout Plain Layout

'V_tcp_cc_algo' : TPCONF_TCP_algos[0], 
\end_layout

\begin_layout Plain Layout

'V_drate' : TPCONF_bandwidths[0][0], 
\end_layout

\begin_layout Plain Layout

'V_urate' : TPCONF_bandwidths[0][1], 
\end_layout

\begin_layout Plain Layout

'V_aqm' : TPCONF_aqms[0], 
\end_layout

\begin_layout Plain Layout

'V_bsize' : TPCONF_buffer_sizes[0], }
\end_layout

\begin_layout Plain Layout

\change_deleted 193492759 1517652587

\end_layout

\begin_layout Plain Layout

\change_deleted 193492759 1517652587

TPCONF_variable_defaults 
\change_unchanged
TPCONF_vary_parameters = [ 'tcpalgos', 'delays', 'loss', 'bandwidths', 'aqms',
 'bsizes', 'runs', ] 
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Example-config"

\end_inset

Example config.py file
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Running experiments
\end_layout

\begin_layout Standard
There are two Fabric tasks to start experiments: 
\emph on
run_experiment_single
\emph default
 and 
\emph on
run_experiment_multiple
\emph default
.
\end_layout

\begin_layout Standard
To run a single experiment with the default test ID prefix 
\change_inserted 193492759 1517737513
(
\change_unchanged
TPCONF_test_id
\change_inserted 193492759 1517737516
)
\change_unchanged
, type:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab run_experiment_single
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To run a 
\change_deleted 193492759 1517737526
series
\change_inserted 193492759 1517737527
group
\change_unchanged
 of experiment based on the TPCONF_vary_parameters settings with the default
 test ID prefix 
\change_inserted 193492759 1517737537
(
\change_unchanged
TPCONF_test_id
\change_inserted 193492759 1517737540
)
\change_unchanged
, type:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab run_experiment_multiple
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In both cases the Fabric log output will be printed out on the current terminal
 (stdout) and can be redirected with the usual means.
 The default test ID prefix (TPCONF_test_id) is specified in the config
 file.
 However, the test ID prefix can also be specified on the command line (overruli
ng the config setting):
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab run_experiment_multiple:test_id=
\change_inserted 193492759 1517652073
exp_
\change_unchanged
`date +"%Y%m%d-%H%M%S"`
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The last command will run a series of experiments where the test ID prefix
 is 
\change_inserted 193492759 1517688059
exp_
\change_unchanged
YYYYMMDD-HHMMSS
\change_inserted 193492759 1517737564
 (
\change_deleted 193492759 1517737564
, 
\change_unchanged
using the actual date 
\change_inserted 193492759 1517737560
and time 
\change_unchanged
when the fab command is run
\change_inserted 193492759 1517737567
)
\change_unchanged
.
 For convenience TEACUP provides a shell script (
\family typewriter
\size small
run.sh
\family default
\size default
) that logs the Fabric output in a <
\change_deleted 193492759 1517651874
test_ID_prefix
\change_inserted 193492759 1517651874
testIDprefix
\change_unchanged
>.log file inside the <
\change_deleted 193492759 1517651876
test_ID_prefix
\change_inserted 193492759 1517651876
testIDprefix
\change_unchanged
> sub directory, and is started with:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> run.sh
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The shell script generates a test ID prefix and then executes the command:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab run_experiment_multiple:test_id= <
\change_deleted 193492759 1517651738
test_ID_pfx
\change_inserted 193492759 1517651738
testIDprefix
\change_unchanged
> > <
\change_deleted 193492759 1517651747
test_ID_pfx
\change_inserted 193492759 1517651747
testIDprefix
\change_unchanged
>.log 2>&1
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The test ID prefix is set to 
\change_inserted 193492759 1517601442

\family typewriter
\size small
exp_
\change_unchanged
`date +"%Y%m%d-%H%M%S"`
\change_deleted 193492759 1517601447
_experiment
\change_unchanged

\family default
\size default
.
 The output is unbuffered, so one can use 
\family typewriter
\size small
tail -f
\family default
\size default
 on the 
\change_deleted 193492759 1517737622
log
\change_inserted 193492759 1517737622

\family typewriter
\size footnotesize
<testIDprefix>.log
\change_unchanged

\family default
\size default
 file and get timely output.
 The fabfile to be used can be specified, i.e.
 to use the fabfile 
\family typewriter
\size small
myfabfile.py
\family default
\size default
 instead of 
\family typewriter
\size small
fabfile.py
\family default
\size default
 run:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> run.sh myfabfile.py
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TEACUP keeps track of experiments using two files in the current directory:
\end_layout

\begin_layout Itemize
The file 
\family typewriter
\size small
experiment_started.txt
\family default
\size default
 logs the test IDs of all experiments started.
\end_layout

\begin_layout Itemize
The file 
\family typewriter
\size small
experiment_completed.txt
\family default
\size default
 logs the test IDs of all experiments 
\emph on
successfully completed
\emph default
.
\end_layout

\begin_layout Standard
Note that TEACUP never resets either of these files – new test IDs are simply
 appended to the files (which are created if they don't already exist).
\begin_inset Foot
status open

\begin_layout Plain Layout
The user must manually delete or edit these files if actual experiment results
 are later deleted.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A run_experiment_multiple task that was interrupted part-way through may
 be restarted with the 
\family typewriter
\size small
resume
\family default
\size default
 parameter.
 TEACUP will perform all experiments of the series that were not previously
 completed (not logged in 
\family typewriter
\size small
experiments_completed.txt
\family default
\size default
).
 
\end_layout

\begin_layout Standard
For example, the following command resumes a series of experiments with
 test ID prefix 
\change_inserted 1685850735 1502423337

\family typewriter
\size small
exp_
\change_unchanged
20131218-113431
\change_deleted 1685850735 1502423334
_windows
\change_unchanged

\family default
\size default
 (and appends the log output to the existing log file):
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab run_experiment_multiple:
\change_inserted 1685850735 1494307534
 
\change_deleted 1685850735 1489542812
 
\change_unchanged
test_id=
\change_inserted 1685850735 1502423325
exp_
\change_unchanged
20131218-113431
\change_deleted 1685850735 1502423341
_windows
\change_unchanged
,resume=1 >> 
\change_inserted 1685850735 1502423359
exp_
\change_unchanged
20131218-113431
\change_deleted 1685850735 1502423362
_windows
\change_unchanged
.log 2>&1
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
\size small
resume
\family default
\size default
 parameter also enables redoing of previously completed experiments, by
 first editing them out of 
\family typewriter
\size small
experiments_completed.txt.
\end_layout

\begin_layout Standard
If a series of experiments is interrupted by non-deterministic errors, i.e.
 each experiment may fail with some small probability, the 
\family typewriter
\size small
run_resume.sh
\family default
\size default
 shell script can be used to ensure the whole series of experiments is completed.
 The script runs the experiments using the run_experiment_multiple task
 and uses the
\family typewriter
\size small
 resume
\family default
\size default
 option to automatically restart and continue each time an experiment was
 not successfully completed.
 The script is used by executing:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> run_resume.sh
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
TEACUP variable information logged
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:variables_logged"

\end_inset


\end_layout

\begin_layout Standard
TEACUP logs configuration information for conducted experiments in two files.
 In the following <
\change_deleted 193492759 1517652156
test_id
\change_inserted 193492759 1517652156
testID
\change_unchanged
> is a test ID and <
\change_deleted 193492759 1517651807
test_id_pfx
\change_inserted 193492759 1517651807
testIDprefix
\change_unchanged
> is the corresponding test ID prefix.
 For each experiment, TEACUP logs all V_ variables and their values (in
 alphabetical order of variable names) in a file <
\change_deleted 193492759 1517652158
test_id
\change_inserted 193492759 1517652158
testID
\change_unchanged
>_config_vars.log.gz.
 The following is an example (with header and legend lines omitted for brevity):
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

U V_aqm: pfifo
\end_layout

\begin_layout Plain Layout

U V_bsize: 1000
\end_layout

\begin_layout Plain Layout

U V_delay: 100
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Each line starts with an `U' or an `N' indicating whether a variable is
 Used or Not used.
 After the use indicator follows the variable name and the value the variable
 was set to in the particular experiment.
\end_layout

\begin_layout Standard
TEACUP also logs all varying parameters for a series of experiments in a
 file named <
\change_deleted 193492759 1517651812
test_id_pfx
\change_inserted 193492759 1517651812
testIDprefix
\change_unchanged
>_varying_params.log.gz.
 The following shows a file as example (excluding the header line):
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

V_aqm aqm aqms
\end_layout

\begin_layout Plain Layout

V_bsize bs bsizes
\end_layout

\begin_layout Plain Layout

V_delay del delays
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In each line, the first column is the V_ variable name, the second column
 is the short name used in the test ID (in the file names), and the last
 column is the identifier that is used in TPCONF_vary_parameters (and links
 to an entry in TPCONF_parameter_list).
\end_layout

\begin_layout Section
Host Control Utility Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Utility"

\end_inset


\end_layout

\begin_layout Standard
This section describes a number of utility functions available as Fabric
 tasks.
 As mentioned previously, the fab utility has an option to list all available
 tasks:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab -l
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Remote command execution
\end_layout

\begin_layout Standard
The exec_cmd task can be used to execute one command on one or more testbed
 hosts.
 For example, the following command executes the command 
\family typewriter
\size footnotesize
uname -s
\family default
\size default
 on a number of hosts:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab -H 
\change_deleted 1685850735 1489542718

\size small
testhost
\size footnotesize
1
\change_inserted 1685850735 1489542720
testhost1
\change_unchanged
,testhost2,testhost3 exec_cmd:cmd="uname -s"
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If no hosts are specified on the command line, the exec_cmd command is executed
 on all hosts listed in the config file (the union set of TPCONF_router
 and TPCONF_hosts).
 For example, the following command is executed on all testbed hosts:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab exec_cmd:cmd="uname -s"
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Copying files to testbed hosts
\end_layout

\begin_layout Standard
The copy_file task can be used to copy a local file to one or more testbed
 hosts.
 For example, the following command copies the web10g-logger executable
 to all testbed hosts except the router (this assumes all the hosts run
 Linux when the command is executed):
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab -H testhost2,testhost3 copy_file:file_name=/usr/bin/web10g-logger,
\change_inserted 1685850735 1494307561
 
\change_deleted 1685850735 1489542828
 
\change_unchanged
remote_path=/usr/bin
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If no hosts are specified on the command line, the command is executed for
 all hosts listed in the config file (the union set of TPCONF_router and
 TPCONF_hosts).
 For example, the following command copies the file to all testbed hosts:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab copy_file:file_name=
\change_inserted 1685850735 1494307578
 
\change_deleted 1685850735 1489542833
 
\change_unchanged
/usr/bin/web10g-logger,remote_path=/usr/bin
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The parameter 
\family typewriter
\size footnotesize
method
\family default
\size default
 controls the method used for copying.
 By default (
\family typewriter
\size footnotesize
method='put'
\family default
\size default
) copy_file will use the Fabric put function to copy the file.
 However, the Fabric put function is slow.
 For large files setting
\family typewriter
\size footnotesize
 method='scp'
\family default
\size default
 provides much better performance using the scp command.
 While scp is faster, it may prompt for the password if public key authenticatio
n has not been configured.
\end_layout

\begin_layout Subsection
Installing ssh keys
\end_layout

\begin_layout Standard
The authorize_key task can be used to append the current user's public SSH
 key to the ~./ssh/authorized_keys file of the remote user.
 The user can then login via SSH without having to enter a password.
 For example, the following command enables password-less access for the
 user on three testbed hosts:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab -H 
\change_deleted 1685850735 1489542740

\size small
testhost
\size footnotesize
1
\change_inserted 1685850735 1489542742
testhost1
\change_unchanged
,testhost2,testhost3 authorize_key
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note: the authorize_key task assumes the user has a ~/.ssh/id_rsa.pub key
 file.
 This can be created with 
\family typewriter
\size footnotesize
ssh-keygen -t rsa.

\family default
\size default
 Also note that th
\change_deleted 1685850735 1489726320
e task
\change_inserted 1685850735 1489726320
is task
\change_unchanged
 does not check if the public key is already in the remote user's authorized_key
s file, so executing this task multiple times may lead to duplicate entries
 in the remote user's authorized_keys file.
\end_layout

\begin_layout Subsection
Topology configuration
\end_layout

\begin_layout Standard
Where the testbed meets the requirements described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:topology_config"

\end_inset

, the init_topology task can be used to 
\begin_inset Quotes eld
\end_inset

move
\begin_inset Quotes erd
\end_inset

 hosts from one test subnet to the other by configuring the VLAN membership
 of the switch ports in conjunction with IP addresses and static routes
 on each host.
 Th
\change_deleted 1685850735 1489726323
e task
\change_inserted 1685850735 1489726323
is task
\change_unchanged
 uses the config.py file to get the testbed IP addresses of the hosts to
 be configured (from TPCONF_host_internal_ip).
 It also uses the values of TPCONF_topology_switch, TPCONF_topology_switch_port_
prefix, and TPCONF_topology_switch_port_offset specified in config.py to
 reconfigure the switch.
 The last three parameters can also be overridden by the task's parameters
 
\family typewriter
\size small
switch
\family default
\size default
, 
\family typewriter
\size small
port_prefix
\family default
\size default
, and 
\family typewriter
\size small
port_offset
\family default
\size default
.
 Limitations of the current implementation are described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:topology_config"

\end_inset

.
\end_layout

\begin_layout Standard
The following shows an example where we configure the hosts testhost1 and
 testhost2 using the task's parameters to specify the switch-relevant settings:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab -H testhost1,testhost2 init_topology:switch="switch2",
\change_inserted 1685850735 1494307594
 
\change_deleted 1685850735 1489542846
 
\change_unchanged
port_prefix="Gi1/0/",port_offset="5"
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Initialise hosts to a specific operating system
\end_layout

\begin_layout Standard
The init_os task can be used to reboot hosts into specific operating systems
 (OSs).
 For example, the following command reboots the hosts testhost1 and testhost2
 into the OSs Linux and FreeBSD respectively:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab -H testhost1,testhost2 init_os:os_list="Linux
\backslash
,FreeBSD",
\change_inserted 1685850735 1494307606
 
\change_deleted 1685850735 1489542852
 
\change_unchanged
force_reboot=1
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that the commas in 
\family typewriter
\size small
os_list
\family default
\size default
 need to be escaped with backslashes (
\backslash
), since otherwise Fabric interprets the commas as parameter delimiters.
 Note that 
\family typewriter
\size small
os_list
\family default
\size default
 can be shorter than the number of specified hosts, in which case it will
 be padded to the length of the number of hosts by duplicating the last
 entry.
 This allows t
\change_inserted 1685850735 1494304575
he
\change_deleted 1685850735 1494304574
o
\change_unchanged
 reboot
\change_inserted 1685850735 1494304582
ing of
\change_unchanged
 a large number of hosts into the same OS while specifying an
\family typewriter
\size small
 os_list
\family default
\size default
 with only a single entry (the desired OS).
\end_layout

\begin_layout Standard
For Linux the kernel to boot can be chosen with the parameters 
\family typewriter
\size small
linux_kern_hosts
\family default
\size default
 and 
\family typewriter
\size small
linux_kern_router
\family default
\size default
.
 
\family typewriter
\size small
linux_kern_hosts
\family default
\size default
 specifies the kernel for normal hosts (not routers) and 
\family typewriter
\size small
linux_kern_router
\family default
\size default
 specifies the kernel for routers.
 Please refer to the description in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:os_kernel_selection"

\end_inset

 on how to specify the kernel name.
\end_layout

\begin_layout Standard
By default 
\family typewriter
\size small
force_reboot
\family default
\size default
 is 0, which means hosts that are already running the desired OS are not
 rebooted.
 Setting 
\family typewriter
\size small
force_reboot
\family default
\size default
 to 1 enforces a reboot.
 By default the script waits 100 seconds for a host to reboot.
 If the host is not responsive after this time, the script will give up
 unless the 
\family typewriter
\size small
do_power_cycle
\family default
\size default
 parameter is set to 1.
 This timeout can be changed with the 
\family typewriter
\size small
boot_timeout
\family default
\size default
 parameter, which specifies the timeout in seconds (as integer).
 A minimum boot timeout of 60 seconds will be enforced.
\end_layout

\begin_layout Standard
The 
\family typewriter
\size small
do_power_cycle
\family default
\size default
 parameter can be set to 1 to force a power cycle if a host does not respond
 after the boot timeout (assuming TEACUP-compatible power controller(s)
 are configured).
 The script will then wait for 
\family typewriter
\size small
boot_timeout
\family default
\size default
 seconds again for the host to come up.
 If the host is still unresponsive after the timeout the script will give
 up (there are no further automatic power cycles).
 The following command shows an example with 
\family typewriter
\size small
do_power_cycle
\family default
\size default
 set to 1:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab -H testhost1,testhost2 init_os:os_list="Linux
\backslash
,FreeBSD",
\change_inserted 1685850735 1494307643
 
\change_deleted 1685850735 1489542862
 
\change_unchanged
force_reboot=1,do_power_cycle=1
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since version 0.9.3 TEACUP can reboot unresponsive hosts (i.e.
 hosts to which TEACUP cannot establish an SSH connection), if the user
 specifies the MAC addresses of the control interface and a power controller
 is configured for the hosts.
 The MAC address(es) are specified with the 
\family typewriter
\size small
mac_list
\family default
\size default
 parameter (comma-separated list of MAC addresses, one for each host to
 be rebooted).
\end_layout

\begin_layout Standard
The following command shows an example of rebooting the unresposive host
 testhost1 (with control network interface MAC of 01:02:03:04:05:06) into
 Linux:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab -H testhost1 init_os:os_list="Linux",
\change_inserted 1685850735 1494307652
 
\change_deleted 1685850735 1489542870
 
\change_unchanged
mac_list="01:02:03:04:05:06"
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Power cycling
\end_layout

\begin_layout Standard
The power_cycle task can be used to power cycle hosts, i.e.
 if hosts become unresponsive (assuming TEACUP-compatible power controller
 are configured).
 After the power cycle the hosts will boot the last selected OS.
 For example, the following command power cycles the hosts testhost1 and
 testhost2:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab -H testhost1,testhost2 power_cycle
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Check software installations on testbed hosts
\end_layout

\begin_layout Standard
The check_host command can be used to check if the required software is
 installed on the hosts.
 Th
\change_deleted 1685850735 1489726333
e task
\change_inserted 1685850735 1489726333
is task
\change_unchanged
 only checks for the presence of necessary tools, but it does not check
 if the tools actually work.
 For example, the following command checks all testbed hosts:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab -H 
\change_deleted 1685850735 1489542883

\size small
testhost
\size footnotesize
1
\change_inserted 1685850735 1489542885
testhost1
\change_unchanged
,testhost2,testhost3 check_host 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Check testbed host connectivity
\end_layout

\begin_layout Standard
The check_connectivity task can be used to check connectivity between testbed
 hosts with 
\family typewriter
\size small
ping
\family default
\size default
.
 This task only checks the connectivity of the internal testbed network,
 not the reachability of hosts on their control interface.
 For example, the following command checks whether each host can reach each
 other host across the testbed network:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab -H 
\change_deleted 1685850735 1489542894

\size small
testhost
\size footnotesize
1
\change_inserted 1685850735 1489542895
testhost1
\change_unchanged
,testhost2,testhost3 check_connectivity
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Check TEACUP config file
\end_layout

\begin_layout Standard
The check_config task can be used to check the TEACUP config file.
 This task will perform a number of checks and abort with an error message
 if it finds any errors in the config file.
 (This task is automatically run at the start of each experiment or series
 of experiments.)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
> fab check_config
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Print version information
\end_layout

\begin_layout Standard
The get_version task prints out the TEACUP version number, revision number
 and data, and the copyright:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "98col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size small
> fab get_version
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The output will look like:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\family typewriter
\size small
TEACUP Version 0.9
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Revision: 1175
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Date: 2015-04-01 11:00:50 +1100 (Wed, 01 Apr 2015)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Copyright (c) 2013-2015 Centre for Advanced Internet Architectures
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Swinburne University of Technology.
 All rights reserved.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Experiment Examples
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
Here we provide a few example scenarios of how TEACUP can be used.
 Each scenario involves traffic senders and receivers distributed across
 two subnets (subnet A and subnet B) connected by a bottleneck router.
 All hosts and the router are time synchronised using NTP.
 We have the following scenarios.
\end_layout

\begin_layout Itemize
Scenario 1: We have two TCP flows with data flowing from a source in subnet
 A to a destination in subnet B.
 We emulate different delays on the router.
 In this scenario the rebooting functionality of TEACUP is not used, which
 means the experimenter has to boot all three machines into the desired
 OS before the experiment is started.
\end_layout

\begin_layout Itemize
Scenario 2: As with scenario 1, with TEACUP also automatically booting the
 desired OS.
 
\end_layout

\begin_layout Itemize
Scenario 3: As with scenario 2, with TEACUP using a power controller to
 power cycle hosts if they don't respond after the reboot.
\end_layout

\begin_layout Itemize
Scenario 4: As with scenario 1, with each TCP flow between a different sender/re
ceiver pair and different network path delay emulated for each flow (both
 flows still go through the same bottleneck).
\end_layout

\begin_layout Itemize
Scenario 5: We have three staggered bulk-transfer flows going through the
 router, each between a different sender/receiver pair.
 We use different emulated delay for each sender/receiver pair and also
 vary the bandwidths.
 We now also vary the TCP congestion control algorithm.
 
\end_layout

\begin_layout Itemize
Scenario 6: We have t
\change_deleted 1685850735 1502428269
hree
\change_inserted 1685850735 1502428266
wo
\change_unchanged
 hosts plus the router.
 One host 
\change_deleted 1685850735 1502428291
in subnet A
\change_unchanged
 acts as web server.
 The 
\change_deleted 1685850735 1502428346
two 
\change_unchanged
other host
\change_deleted 1685850735 1502428352
s in subnet B
\change_unchanged
 act
\change_inserted 1685850735 1502428441
s as a client to retrieve video content from the web server.

\change_deleted 1685850735 1502428440
 as clients that both use DASH-like video streaming over HTTP.

\change_unchanged
 We emulate different network delays and AQM mechanisms.

\change_deleted 1685850735 1502427603
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\change_inserted 193492759 1494486233
**** THIS NEEDS UPDATING TO USE REAL DASH ***
\end_layout

\end_inset


\change_unchanged

\end_layout

\begin_layout Itemize
Scenario 7: Investigating the incast problem.
 On host in subnet A queries 10 responders in subnet B.
 Again, we emulate different network delays, AQM mechanisms and TCP algorithms.
 We also vary the size of the responses.
\end_layout

\begin_layout Subsection
Scenario 1: Two TCP flows from data sender to receiver
\end_layout

\begin_layout Subsubsection
Topology
\end_layout

\begin_layout Standard
In this scenario we have two hosts: newtcp20 connected to the 172.16.10.0/24
 network and newtcp27 connected to the 172.16.11.0/24 network.
 The machine newtcprt3 connects the two experiment subnets.
 All three machines also have a second network interface that is used to
 control the experiment via TEACUP.
 newtcp20 and newtcp27 must run Linux, FreeBSD, Windows 7 or Mac OS X and
 newtcprt3 must run FreeBSD or Linux.
 newtcp20 and newtcp27 must have the traffic generator and logging tools
 installed as described in 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

.
 However, PXE booting or a multi-OS installation is not needed for this
 scenario.
\end_layout

\begin_layout Subsubsection
Test Traffic
\end_layout

\begin_layout Standard
Two TCP bulk transfer flows are created using iperf.
\end_layout

\begin_layout Subsubsection
Variable Parameters
\end_layout

\begin_layout Standard
We emulate three different delays and two different bandwidth settings –
 six different experiments in total.
 We do also define a variable parameter for AQM, but define only one AQM
 (default pfifo).
 This causes the used AQM to be logged as part of the experiment ID.
\end_layout

\begin_layout Subsubsection
TEACUP Config File
\end_layout

\begin_layout Standard
You can download the configuration file from 
\begin_inset CommandInset citation
LatexCommand cite
key "teacup-examples-web"

\end_inset

.
 To use the configuration rename it to config.py.
 In the following we explain the configuration file.
\end_layout

\begin_layout Standard
Note that TEACUP configuration files can be split across multiple files
 (using Python's execfile()).
 This allows t
\change_inserted 1685850735 1494304593
he
\change_deleted 1685850735 1494304592
o
\change_unchanged
 split
\change_inserted 1685850735 1494304596
ting of
\change_unchanged
 a large config file into multiple files for better readability.
 It also allows t
\change_inserted 1685850735 1494304605
he
\change_deleted 1685850735 1494304605
o
\change_unchanged
 inclu
\change_deleted 1685850735 1494304612
d
\change_inserted 1685850735 1494304664
sion of
\change_deleted 1685850735 1494304607
e
\change_unchanged
 part
\change_inserted 1685850735 1494304691
s
\change_unchanged
 of configuration files into multiple different config files, which makes
 it possible to reuse parts of the config that is not changed across multiple
 experiments.
 An example of a this is this config file, which is functionally identical
 to the above config file.
 Only here the main config file includes separate files to specify the testbed
 machines, the router setup and the traffic generated.
\end_layout

\begin_layout Standard
At the top of the configuration file we need to import the Fabric env structure
 and we also need to import any other Python functionality used (see Listing
 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario1-Fabric"

\end_inset

).
 First we need to configure the user and password used by Fabric via Fabrics
 env parameters.
 A password is not required if public key authentication is set up.
 We also need to tell Fabric how to execute commands on the remote machines.
 TEACUP uses Bourne shell (/bin/sh) by default.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

# User and password 
\end_layout

\begin_layout Plain Layout

env.user = 'root' 
\end_layout

\begin_layout Plain Layout

env.password = 'rootpw'
\end_layout

\begin_layout Plain Layout

# Set shell used to execute commands 
\end_layout

\begin_layout Plain Layout

env.shell = '/bin/sh -c' 
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario1-Fabric"

\end_inset

Scenario 1, Fabric configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next part of the config file defines the path to the TEACUP scripts
 and the testbed hosts (see Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario1-Hosts"

\end_inset

).
 TPCONF_router is used to define the router and TPCONF_hosts is used to
 define the list of hosts.
 For each host and the router the testbed network interfaces need to be
 defined with TPCONF_host_internal_ip.
 The router obviously has two testbed network interfaces, whereas the hosts
 have only one.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

# Path to teacup scripts 
\end_layout

\begin_layout Plain Layout

TPCONF_script_path = '
\change_deleted 1870295737 1517870961
/home/teacup/teacup-0.8
\change_inserted 1870295737 1517870962
/home/test/src/teacup
\change_unchanged
' 
\end_layout

\begin_layout Plain Layout

# DO NOT remove the following line 
\end_layout

\begin_layout Plain Layout

sys.path.append(TPCONF_script_path)
\end_layout

\begin_layout Plain Layout

# Set debugging level (0 = no debugging info output) 
\end_layout

\begin_layout Plain Layout

TPCONF_debug_level = 0
\end_layout

\begin_layout Plain Layout

# Host lists 
\end_layout

\begin_layout Plain Layout

TPCONF_router = ['newtcprt3', ] 
\end_layout

\begin_layout Plain Layout

TPCONF_hosts = [ 'newtcp20', 'newtcp27', ]
\end_layout

\begin_layout Plain Layout

# Map external IPs to internal IPs 
\end_layout

\begin_layout Plain Layout

TPCONF_host_internal_ip = { 
\end_layout

\begin_layout Plain Layout

	'newtcprt3': ['172.16.10.1', '172.16.11.1'], 
\end_layout

\begin_layout Plain Layout

	'newtcp20': ['172.16.10.60'], 
\end_layout

\begin_layout Plain Layout

	'newtcp27': ['172.16.11.67'], 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario1-Hosts"

\end_inset

Scenario 1, general settings and host configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the next part of the configuration file we need to define some general
 experiment settings (see Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario1-Test-ID-prefix"

\end_inset

).
 TEACUP_max_time_diff specifies 
\change_inserted 193492759 1517737797
(in seconds) 
\change_unchanged
the maximum clock offset
\change_deleted 193492759 1517737801
 in seconds
\change_unchanged
 allowed
\change_inserted 193492759 1517737813
 between all participating hosts
\change_unchanged
.
 This is a very coarse threshold as the offset estimation performed by TEACUP
 is not very accurate.
 Currently, TEACUP simply attempts to find out if the synchronisation is
 very bad and if yes it will abort; it does 
\change_inserted 193492759 1517737826
not 
\change_unchanged
try to enforce high accuracy for the time synchronisation.
 
\change_inserted 193492759 1517737898
Despite the historical name, 
\change_unchanged
TPCONF_test_id defines the 
\change_deleted 193492759 1517737833
name
\change_inserted 193492759 1517737834
test ID
\change_unchanged
 
\bar under
prefix
\bar default
 for 
\change_deleted 193492759 1517737870
the output files for 
\change_unchanged
an experiment or a 
\change_deleted 193492759 1517737842
series
\change_inserted 193492759 1517737845
group
\change_unchanged
 of experiments.
 TPCONF_remote_dir specifies where on the hosts the log files are stored
 until they are moved to the control host running TEACUP after each experiment.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

# Maximum allowed time difference between machines in seconds 
\end_layout

\begin_layout Plain Layout

# otherwise experiment will abort cause synchronisation problems 
\end_layout

\begin_layout Plain Layout

\change_deleted 193492759 1517895768

TPCONF_max_time_diff = 1
\change_inserted 193492759 1517895768
TPCONF_max_time_diff = 2
\change_unchanged

\end_layout

\begin_layout Plain Layout

# Experiment name prefix used if not set on the command line 
\end_layout

\begin_layout Plain Layout

# The command line setting will overrule this config setting 
\end_layout

\begin_layout Plain Layout

now = datetime.datetime.today() 
\end_layout

\begin_layout Plain Layout

TPCONF_test_id = 
\change_inserted 193492759 1517652196
'exp_' + 
\change_unchanged
now.strftime("%Y%m%d-%H%M%S")
\change_deleted 193492759 1517652199
 + 'experiment'
\change_unchanged

\end_layout

\begin_layout Plain Layout

# Directory to store log files on remote host 
\end_layout

\begin_layout Plain Layout

TPCONF_remote_dir = '/tmp/'
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario1-Test-ID-prefix"

\end_inset

Scenario 1, test ID prefix and directory configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then we define the router queues/pipes using TPCONF_router_queues (see Listing
 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario1-Router"

\end_inset

).
 Each entry of this list is a tuple.
 The first value is the queue number and the second value is a comma separated
 list of parameters.
 The queue numbers must be unique.
 Note that variable parameters must be either constants or variable names
 defined by the experimenter.
 Variables are evaluated during run-time.
 Variable names must start with a `V_'.
 Parameter names can only contain numbers, letter (upper and lower case),
 underscores (_), and hyphen/minus (-).
 All V_variables must be defined in TPCONF_variable_list (see below).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

TPCONF_router_queues = [ 
\end_layout

\begin_layout Plain Layout

	# Set same delay for every host 
\end_layout

\begin_layout Plain Layout

	('1', " source='172.16.10.0/24', dest='172.16.11.0/24', delay=V_delay, " 
\end_layout

\begin_layout Plain Layout

    	  " loss=V_loss, rate=V_up_rate, queue_disc=V_aqm, queue_size=V_bsize
 "), 
\end_layout

\begin_layout Plain Layout

	('2', " source='172.16.11.0/24', dest='172.16.10.0/24', delay=V_delay, " 
\end_layout

\begin_layout Plain Layout

    	  " loss=V_loss, rate=V_down_rate, queue_disc=V_aqm, queue_size=V_bsize
 "), 
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario1-Router"

\end_inset

Scenario 1, router queue configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next we need to define the traffic generated during the experiments (see
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario1-Traffic"

\end_inset

).
 TEACUP implements a number of traffic generators.
 In this example we use iperf to generate TCP bulk transfer flows.
 TPCONF_traffic_gens defines the traffic generator, but here we use a temporary
 variable as well, which allows 
\change_deleted 1685850735 1494304789
to have
\change_unchanged
 multiple traffic generator definitions and 
\change_inserted 1685850735 1494304800
being able to 
\change_unchanged
switch between them by changing the variable assigned to TPCONF_traffic_gens.
\end_layout

\begin_layout Standard
Each entry in is a 3-tuple.
 The first value of the tuple must be a float and is the time relative to
 the start of the experiment when tasks are executed.
 If two tasks have the same start time their start order is arbitrary.
 The second entry of the tuple is the task number and must be a unique integer
 (used as ID for the process).
 The last value of the tuple is a comma separated list of parameters.
 The first parameter of this list must be the task name.
 The TEACUP manual lists the task name and possible parameters.
 Client and server can be specified using the external/control IP addresses
 or host names.
 In this case the actual interface used is the 
\emph on
first
\emph default
 internal address (according to TPCONF_host_internal_ip).
 Alternatively, client and server can be specified as internal addresses,
 which allows t
\change_inserted 1685850735 1494304815
he
\change_deleted 1685850735 1494304815
o
\change_unchanged
 use
\change_inserted 1685850735 1494304817
 of
\change_unchanged
 any internal interfaces configured.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

traffic_iperf = [ 
\end_layout

\begin_layout Plain Layout

	('0.0', '1', " start_iperf, client='newtcp27', server='newtcp20', port=5000,
 " 
\end_layout

\begin_layout Plain Layout

    	         " duration=V_duration "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '2', " start_iperf, client='newtcp27', server='newtcp20', port=5001,
 " 
\end_layout

\begin_layout Plain Layout

    	         " duration=V_duration "), 
\end_layout

\begin_layout Plain Layout

	# Or using internal addresses 
\end_layout

\begin_layout Plain Layout

	#( '0.0', '1', " start_iperf, client='172.16.11.2', server='172.16.10.2', " 
\end_layout

\begin_layout Plain Layout

	#              " port=5000, duration=V_duration " ), 
\end_layout

\begin_layout Plain Layout

	#( '0.0', '2', " start_iperf, client='172.16.11.2', server='172.16.10.2', " 
\end_layout

\begin_layout Plain Layout

	#              " port=5001, duration=V_duration " ), 
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

# THIS is the traffic generator setup we will use 
\end_layout

\begin_layout Plain Layout

TPCONF_traffic_gens = traffic_iperf
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario1-Traffic"

\end_inset

Scenario 1, traffic configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next, we define all the parameter values used in the experiments (see Listing
 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario1-Parameters"

\end_inset

).
 TPCONF_duration defines the duration of the traffic.
 TPCONF_runs specifies the number of runs carried out for each unique combinatio
n of parameters.
 TPCONF_TCP_algos specifies the congestion control algorithms.
 Here we only use Newreno.
\end_layout

\begin_layout Standard
In this simple case all hosts use the same TCP congestion control algorithm,
 but TEACUP allows t
\change_inserted 1685850735 1494304829
he
\change_deleted 1685850735 1494304828
o
\change_unchanged
 specif
\change_inserted 1685850735 1494304835
ication of
\change_deleted 1685850735 1494304831
y
\change_unchanged
 per-host algorithms with TPCONF_host_TCP_algos.
 Parameter settings for TCP congestion control algorithms can be specified
 with TPCONF_host_TCP_algo_params (assuming parameters can be controlled
 with sysctl), but here we do not make use of that and simply use the default
 settings.
\end_layout

\begin_layout Standard
TPCONF_delays specifies the delay values (delay in each direction), TPCONF_loss_
rates specifies the possible packet loss rates and TPCONF_bandwidths specifies
 the emulated bandwidths (in downstream and upstream directions).
 TPCONF_aqms specifies the AQM mechanism to use (here pfifo which is the
 default).
 TPCONF_buffer_sizes specifies the size of the queue.
 This is normally specified in packets, but it depends on the type of AQM.
 For example, if bfifo was used the size would need to be specified in bytes.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

# Duration in seconds of traffic 
\end_layout

\begin_layout Plain Layout

TPCONF_duration = 30
\end_layout

\begin_layout Plain Layout

# Number of runs for each setting 
\end_layout

\begin_layout Plain Layout

TPCONF_runs = 1
\end_layout

\begin_layout Plain Layout

# TCP congestion control algorithm used 
\end_layout

\begin_layout Plain Layout

TPCONF_TCP_algos = ['newreno', ]
\end_layout

\begin_layout Plain Layout

# Emulated delays in ms 
\end_layout

\begin_layout Plain Layout

TPCONF_delays = [0, 25, 50]
\end_layout

\begin_layout Plain Layout

# Emulated loss rates 
\end_layout

\begin_layout Plain Layout

TPCONF_loss_rates = [0]
\end_layout

\begin_layout Plain Layout

# Emulated bandwidths (downstream, upstream) 
\end_layout

\begin_layout Plain Layout

TPCONF_bandwidths = [ ('8mbit', '1mbit'), ('20mbit', '1.4mbit'), ]
\end_layout

\begin_layout Plain Layout

# AQM 
\end_layout

\begin_layout Plain Layout

TPCONF_aqms = ['pfifo', ]
\end_layout

\begin_layout Plain Layout

# Buffer size 
\end_layout

\begin_layout Plain Layout

TPCONF_buffer_sizes = [100]
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario1-Parameters"

\end_inset

Scenario 1, experiment parameter value configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, we need to specify which parameters will be varied and which parameters
 will be fixed for a series of experiments, and we also need to define how
 our parameter ranges above map to V_variables used for the queue setup
 and traffic generators and the log file names generated by TEACUP (see
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario1-Vary-Parameters"

\end_inset

).
\end_layout

\begin_layout Standard
TPCONF_parameter_list is a map of the parameters we potentially want to
 vary.
 The key of each item is the identifier that can be used in TPCONF_vary_paramete
rs (see below).
 The value of each item is a 4-tuple containing the following things.
 First, a list of variable names.
 Second, a list of short names uses for the file names.
 For each parameter varied a string `_<short_name>_<value>' is appended
 to the log file names (appended to chosen prefix).
 Note, short names should only be letters from a–z or A–Z, do not use underscore
s or hyphens.
 Third, the list of parameters values.
 If there is more than one variable this must be a list of tuples, each
 tuple having the same number of items as the number of variables.
 Fourth, an optional dictionary with additional variables, where the keys
 are the variable names and the values are the variable values.
\end_layout

\begin_layout Standard
The parameters that are actually varied are specified with TPCONF_vary_parameter
s.
 Only parameters listed in TPCONF_vary_parameters will appear in the name
 of TEACUP output files.
 So it can make sense to add a parameter in TPCONF_vary_parameters that
 only has a single value, because only then will the parameter short name
 and value be part of the file names.
\end_layout

\begin_layout Standard
TPCONF_variable_defaults specifies the default value for each variable,
 which is used for variables that are not varied.
 The key of each item is the parameter name.
 The value of each item is the default parameter value used if the variable
 is not varied.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

TPCONF_parameter_list = { 
\end_layout

\begin_layout Plain Layout

	# Vary name V_ variable file name values extra vars 
\end_layout

\begin_layout Plain Layout

	'delays' : (['V_delay'], ['del'], TPCONF_delays, {}), 
\end_layout

\begin_layout Plain Layout

	'loss' : (['V_loss'], ['loss'], TPCONF_loss_rates, {}), 
\end_layout

\begin_layout Plain Layout

	'tcpalgos' : (['V_tcp_cc_algo'],['tcp'], TPCONF_TCP_algos, {}), 
\end_layout

\begin_layout Plain Layout

	'aqms' : (['V_aqm'], ['aqm'], TPCONF_aqms, {}), 
\end_layout

\begin_layout Plain Layout

	'bsizes' : (['V_bsize'], ['bs'], TPCONF_buffer_sizes, {}), 
\end_layout

\begin_layout Plain Layout

	'runs' : (['V_runs'], ['run'], range(TPCONF_runs), {}), 
\end_layout

\begin_layout Plain Layout

	'bandwidths' : (['V_down_rate', 'V_up_rate'], ['down', 'up'], TPCONF_bandwidths
, {}), 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

TPCONF_variable_defaults = { 
\end_layout

\begin_layout Plain Layout

	# V_ variable value 
\end_layout

\begin_layout Plain Layout

	'V_duration' : TPCONF_duration, 
\end_layout

\begin_layout Plain Layout

	'V_delay' : TPCONF_delays[0], 
\end_layout

\begin_layout Plain Layout

	'V_loss' : TPCONF_loss_rates[0], 
\end_layout

\begin_layout Plain Layout

	'V_tcp_cc_algo' : TPCONF_TCP_algos[0], 
\end_layout

\begin_layout Plain Layout

	'V_down_rate' : TPCONF_bandwidths[0][0], 
\end_layout

\begin_layout Plain Layout

	'V_up_rate' : TPCONF_bandwidths[0][1], 
\end_layout

\begin_layout Plain Layout

	'V_aqm' : TPCONF_aqms[0], 
\end_layout

\begin_layout Plain Layout

	'V_bsize' : TPCONF_buffer_sizes[0], 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

# Specify the parameters we vary through all values, all others will be
 fixed 
\end_layout

\begin_layout Plain Layout

# according to TPCONF_variable_defaults 
\end_layout

\begin_layout Plain Layout

TPCONF_vary_parameters = ['delays', 'bandwidths', 'aqms', 'runs',]
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario1-Vary-Parameters"

\end_inset

Scenario 1, variable parameters configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Running Experiment
\end_layout

\begin_layout Standard
Create a directory with the above config.py and copy fabfile.py and run.sh
 from the TEACUP code distribution into this directory.
 To run the series of experiments with all parameter combinations go into
 the experiment directory (that contains fabfile.py and run.sh) and execute:
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size small
> ./run.sh
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will create a sub directory with the name of the test ID prefix and
 store all output files in this sub directory.
\end_layout

\begin_layout Subsubsection
Analysing Results
\end_layout

\begin_layout Standard
TEACUP provides a range of tasks for analysing the results of a given experiment
, described in an accompanying technical report 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2018_teacup_v1.1_analysis"

\end_inset

.
 Here we briefly summarise how to extract some key results.
\end_layout

\begin_layout Standard
TEACUP will create a 
\change_deleted 193492759 1517737955
file names 
\change_unchanged
<
\change_deleted 193492759 1517651878
test_id_prefix
\change_inserted 193492759 1517651878
testIDprefix
\change_unchanged
>.log file in the experiment data sub directory.
 It will also create a file experiments_started.txt and experiments_completed.txt
 in the parent directory.
 The file experiments_started.txt contains the names of all experiments started
 and the file experiments_completed.txt contains the names of all experiments
 successfully completed.
 If some experiments were not completed, check the log file for errors.
\end_layout

\begin_layout Standard
Assuming all experiments of a series completed successfully, we can now
 start to analyse the data.
 To create time series of CWND, RTT as estimated by TCP, RTT as estimated
 using SPP and the throughput over time for each experiment of the series,
 use the following command which creates intermediate files and the .pdf
 plot files in a sub directory named results inside the test data directory
 (the command needs to be executed in the directory where fabfile.py is).
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\backslash
colorbox{lightgray}{
\end_layout

\end_inset


\family typewriter
\size small

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "97col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size small
> fab analyse_all:out_dir=".
\change_inserted 1685850735 1489542915
.
\change_unchanged
/results"
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Throughput-and-RTT"

\end_inset

 shows the throughput and TCP's smoothed RTT estimates produced by TEACUP
 for the experiment with an emulated RTT of 50 ms, a bandwidth of 8 mbit/s
 downstream and 1 mbit/s upstream, and a buffer size of 100 packets.
 The hosts and the router ran Linux kernel 3.17.4.
 The throughput graph shows that both flows share the downstream link equally,
 while the upstream link carrying only ACKs is not fully utilised.
 The RTT graph shows that the total RTT reaches almost 100 ms due to the
 buffering (the plotted RTT estimates for the ACK streams are useless).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename graphs/20150211-171242_experiment_del_25_down_8mbit_up_1mbit_aqm_pfifo_run_0_throughput_time_series.pdf
	scale 80
	BoundingBox 0bp 0bp 290bp 206bp
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Throughput
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename graphs/20150211-171242_experiment_del_25_down_8mbit_up_1mbit_aqm_pfifo_run_0_smooth_tcprtt_time_series.pdf
	scale 80
	BoundingBox 0bp 0bp 290bp 206bp
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RTT
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Throughput-and-RTT"

\end_inset

Throughput and TCP RTT estimate measured in Scenario 1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Scenario 2: Scenario 1 plus automatic booting of hosts
\end_layout

\begin_layout Subsubsection
Topology
\end_layout

\begin_layout Standard
Like in scenario 1 we have two hosts: newtcp20 connected to the 172.16.10.0/24
 network and newtcp27 connected to the 172.16.11.0/24 network.
 The machine newtcprt3 connects the two experiment subnets.
 All three machines also have a second network interface that is used to
 control the experiment via TEACUP.
 In this scenario we assume that the hosts have been installed according
 to 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

 including PXE booting and a multi-OS installation on each host as described
 in the tech report.
\end_layout

\begin_layout Subsubsection
Test Traffic
\end_layout

\begin_layout Standard
Like in scenario 1 two TCP bulk transfer flows are created using iperf.
\end_layout

\begin_layout Subsubsection
Variable Parameters
\end_layout

\begin_layout Standard
Like in scenario 1 we emulate three different delays and two different bandwidth
 settings – six different experiments in total.
 We do also define a variable parameter for AQM, but define only one AQM
 (default pfifo).
 This causes the used AQM to be logged as part of the experiment ID.
\end_layout

\begin_layout Subsubsection
TEACUP Config File
\end_layout

\begin_layout Standard
You can download the configuration file from 
\begin_inset CommandInset citation
LatexCommand cite
key "teacup-examples-web"

\end_inset

.
 To use the configuration rename it to config.py.
 In the following we explain the configuration file.
\end_layout

\begin_layout Standard
Most of the configuration is identical to the configuration used in scenario
 1.
 The only difference is that now TEACUP will reboot the machines automatically
 into the specified OS, which is very useful if machines have a multi-boot
 setup, i.e.
 can run different OS.
 The automatic rebooting of multi-OS machines requires that machines are
 configured with PXE+GRUB as described in the tech report.
 If machines have only a single OS the reboot function is still useful to
 put machines into a clean state before an experiment and in this case PXE
 booting is not needed.
\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario2-Reboot"

\end_inset

 shows the additional configuration needed, compared to scenario 1.
 TPCONF_tftpboot_dir specifies the directory where TEACUP will put the files
 that GRUB will read (after loaded via PXE) which specify from which hard
 disk partition to boot from.
 TPCONF_host_os specifies the operating for each host and router.
 For Linux TEACUP allows t
\change_inserted 1685850735 1494304844
he
\change_deleted 1685850735 1494304844
o
\change_unchanged
 specif
\change_inserted 1685850735 1494304849
ication of
\change_deleted 1685850735 1494304846
y
\change_unchanged
 the kernel that is booted.
 TPCONF_linux_kern_router specifies the kernel booted on the router and
 TPCONF_linux_kern_hosts specifies the kernel booted on the other hosts.
 If TPCONF_force_reboot is not set to `0', TEACUP will only reboot a host
 if the currently running OS is different from the OS specified in TPCONF_host_o
s (Linux hosts will also be rebooted if the currently running kernel is
 different from the kernel specified in TPCONF_linux_kern_router or TPCONF_linux
_kern_hosts).
 TPCONF_boot_timeout specifies the amount of time TEACUP will wait for a
 host to be rebooted and accessible via SSH again.
 If a host is not rebooted and running the desired OS within this time TEACUP
 will abort with an error.
\end_layout

\begin_layout Standard
Currently, by default TEACUP expects Windows on partition 1, Linux on partition
 2, FreeBSD on partition 3 on the first hard disk.
 However, the variable TPCONF_os_partition can be used to specify the partitions
 in GRUB4DOS format.
 PXE booting of MacOS is not supported currently.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

# Path to tftp server handling the pxe boot 
\end_layout

\begin_layout Plain Layout

# Setting this to an empty string '' means no PXE booting, and TPCONF_host_os
 
\end_layout

\begin_layout Plain Layout

# and TPCONF_force_reboot are simply ignored 
\end_layout

\begin_layout Plain Layout

TPCONF_tftpboot_dir = '/tftpboot'
\end_layout

\begin_layout Plain Layout

# Operating system config, machines that are not explicitly listed are 
\end_layout

\begin_layout Plain Layout

# left as they are (OS can be 'Linux', 'FreeBSD', 'CYGWIN', 'Darwin') 
\end_layout

\begin_layout Plain Layout

TPCONF_host_os = { 
\end_layout

\begin_layout Plain Layout

	'newtcprt3': 'Linux', 
\end_layout

\begin_layout Plain Layout

	'newtcp20': 'Linux', 
\end_layout

\begin_layout Plain Layout

	'newtcp27': 'Linux', 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

# Specify the Linux kernel to use, only used for machines running Linux
 
\end_layout

\begin_layout Plain Layout

# (basically the full name without the vmlinuz-) 
\end_layout

\begin_layout Plain Layout

TPCONF_linux_kern_router = '3.17.4-vanilla-10000hz' 
\end_layout

\begin_layout Plain Layout

TPCONF_linux_kern_hosts = '3.17.4-vanilla-web10g'
\end_layout

\begin_layout Plain Layout

# Force reboot 
\end_layout

\begin_layout Plain Layout

# If set to '1' will force a reboot of all hosts 
\end_layout

\begin_layout Plain Layout

# If set to '0' only hosts where OS is not the desired OS will be rebooted
 
\end_layout

\begin_layout Plain Layout

TPCONF_force_reboot = '0'
\end_layout

\begin_layout Plain Layout

# Time to wait for reboot in seconds (integer) 
\end_layout

\begin_layout Plain Layout

# Minimum timeout is 60 seconds 
\end_layout

\begin_layout Plain Layout

TPCONF_boot_timeout = 120
\end_layout

\begin_layout Plain Layout

# Map OS to partition on hard disk (note the partition must be specified
 
\end_layout

\begin_layout Plain Layout

# in the GRUB4DOS format, _not_ GRUB2 format) 
\end_layout

\begin_layout Plain Layout

TPCONF_os_partition = { 
\end_layout

\begin_layout Plain Layout

	'CYGWIN': '(hd0,0)', 
\end_layout

\begin_layout Plain Layout

	'Linux': '(hd0,1)', 
\end_layout

\begin_layout Plain Layout

	'FreeBSD': '(hd0,2)', 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario2-Reboot"

\end_inset

Scenario 2, OS and reboot configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Run and analyse experiment
\end_layout

\begin_layout Standard
See scenario 1.
\end_layout

\begin_layout Subsection
Scenario 3: Scenario 1 plus power control
\end_layout

\begin_layout Subsubsection
Topology
\end_layout

\begin_layout Standard
Like in scenario 1 we have two hosts: newtcp20 connected to the 172.16.10.0/24
 network and newtcp27 connected to the 172.16.11.0/24 network.
 The machine newtcprt3 connects the two experiment subnets.
 All three machines also have a second network interface that is used to
 control the experiment via TEACUP.
 We assume that the hosts have been installed according to 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

.
 Furthermore, this scenario only works with installed TEACUP-compatible
 power controllers that are set up to control the power of the three hosts.
\end_layout

\begin_layout Subsubsection
Test Traffic
\end_layout

\begin_layout Standard
Like in scenario 1 two TCP bulk transfer flows are created using iperf.
\end_layout

\begin_layout Subsubsection
Variable Parameters
\end_layout

\begin_layout Standard
Like in scenario 1 we emulate three different delays and two different bandwidth
 settings – six different experiments in total.
 We do also define a variable parameter for AQM, but define only one AQM
 (default pfifo).
 This causes the used AQM to be logged as part of the experiment ID.
\end_layout

\begin_layout Subsubsection
TEACUP Config File
\end_layout

\begin_layout Standard
You can download the configuration file from 
\begin_inset CommandInset citation
LatexCommand cite
key "teacup-examples-web"

\end_inset

.
 To use the configuration rename it to config.py.
 In the following we explain the configuration file.
\end_layout

\begin_layout Standard
Most of the configuration is identical to the configuration used in scenario
 2.
 The only differen
\change_inserted 1685850735 1489035341
ce
\change_deleted 1685850735 1489035340
t
\change_unchanged
 is that now TEACUP will automatically power cycle machines that to not
 come up within the reboot timeout.
 TEACUP will only power cycle machines once.
 If after a power cycle and reboot the machines are still unresponsive TEACUP
 will give up.
 Power cycling can only used if the machines are connected via a power controlle
r supported by TEACUP.
 Currently, TEACUP supports two power controllers: IP Power 9258HP (9258HP)
 and Serverlink SLP-SPP1008-H (SLP-SPP1008).
\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario3-Power"

\end_inset

 shows the additional configuration needed, compared to scenario 1.
 TPCONF_do_power_cycle must be set to `1' to perform power cycling.
 If power cycling is used TPCONF_host_power_ctrlport must define the IP
 address of the responsible power controller for each machine as well as
 the power controller's port the machine is connected to.
 TPCONF_power_admin_name and TPCONF_power_admin_pw must specify the admin
 user's name and password required to login to the power controller's web
 interface.
 TPCONF_power_ctrl_type specifies the type of power controller.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

# If host does not come up within timeout force power cycle 
\end_layout

\begin_layout Plain Layout

# If set to '1' force power cycle if host not up within timeout 
\end_layout

\begin_layout Plain Layout

# If set to '0' never force power cycle 
\end_layout

\begin_layout Plain Layout

TPCONF_do_power_cycle = '1'
\end_layout

\begin_layout Plain Layout

# Maps host to power controller IP (or name) and power controller port number
 
\end_layout

\begin_layout Plain Layout

TPCONF_host_power_ctrlport = { 
\end_layout

\begin_layout Plain Layout

	'newtcprt3': ('10.0.0.100', '1'), 
\end_layout

\begin_layout Plain Layout

	'newtcp20': ('10.0.0.100', '2'), 
\end_layout

\begin_layout Plain Layout

	'newtcp27': ('10.0.0.100', '3'), 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

# Power controller admin user name 
\end_layout

\begin_layout Plain Layout

TPCONF_power_admin_name = 'admin' 
\end_layout

\begin_layout Plain Layout

# Power controller admin user password 
\end_layout

\begin_layout Plain Layout

TPCONF_power_admin_pw = env.password
\end_layout

\begin_layout Plain Layout

# Type of power controller.
 Currently supported are only: 
\end_layout

\begin_layout Plain Layout

# IP Power 9258HP (9258HP) and Serverlink SLP-SPP1008-H (SLP-SPP1008) 
\end_layout

\begin_layout Plain Layout

TPCONF_power_ctrl_type = 'SLP-SPP1008'
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario3-Power"

\end_inset

Scenario 3, power controller configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Run and analyse experiment
\end_layout

\begin_layout Standard
See scenario 1.
\end_layout

\begin_layout Subsection
Scenario 4: TCP flows with same bottleneck queue but different delay
\end_layout

\begin_layout Subsubsection
Topology
\end_layout

\begin_layout Standard
We now have two hosts in each subnet: newtcp20 and newtcp21 connected to
 the 172.16.10.0/24 network, newtcp27 and newtcp28 connected to the 172.16.11.0/24
 network.
 The machine newtcprt3 connects the two experiment subnets.
 All three machines also have a second network interface that is used to
 control the experiment via TEACUP.
 Like scenario 1 this scenario requires that hosts have the traffic generator
 and logging tools installed as described in 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

, but PXE booting or a multi-OS installation is not needed.
\end_layout

\begin_layout Subsubsection
Test Traffic
\end_layout

\begin_layout Standard
Two TCP bulk transfer flows are created using iperf.
 One flow is between newtcp20 and newtcp27 and the second flow is between
 newtcp21 and newtcp28.
\end_layout

\begin_layout Subsubsection
Variable Parameters
\end_layout

\begin_layout Standard
Like in scenario 1 we emulate two different bandwidth settings.
 However, we setup different delays for each flow.
 Since each flow can have two different values, we have eight different
 experiments in total.
 We do also define a variable parameter for AQM, but define only one AQM
 (default pfifo).
 This causes the used AQM to be logged as part of the experiment ID.
\end_layout

\begin_layout Subsubsection
TEACUP Config File
\end_layout

\begin_layout Standard
You can download the configuration file from 
\begin_inset CommandInset citation
LatexCommand cite
key "teacup-examples-web"

\end_inset

.
 To use the configuration rename it to config.py.
 In the following we explain the parts of the configuration file that have
 changed compared to scenario 1.
\end_layout

\begin_layout Standard
Our host configuration now looks as in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario4-Hosts"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

TPCONF_router = ['newtcprt3', ] 
\end_layout

\begin_layout Plain Layout

TPCONF_hosts = [ 'newtcp20', 'newtcp21', 'newtcp27', 'newtcp28', ]
\end_layout

\begin_layout Plain Layout

TPCONF_host_internal_ip = { 
\end_layout

\begin_layout Plain Layout

	'newtcprt3': ['172.16.10.1', '172.16.11.1'], 
\end_layout

\begin_layout Plain Layout

	'newtcp20': ['172.16.10.60'], 
\end_layout

\begin_layout Plain Layout

	'newtcp21': ['172.16.10.61'], 
\end_layout

\begin_layout Plain Layout

	'newtcp27': ['172.16.11.67'], 
\end_layout

\begin_layout Plain Layout

	'newtcp28': ['172.16.11.68'], 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario4-Hosts"

\end_inset

Scenario 4, host configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To configure different delays for each flow we also need to change the router
 setup (see Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario4-Router"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

TPCONF_router_queues = [ 
\end_layout

\begin_layout Plain Layout

	('1', " source='172.16.10.60', dest='172.16.11.67', delay=V_delay, " 
\end_layout

\begin_layout Plain Layout

          " loss=V_loss, rate=V_up_rate, queue_disc=V_aqm, queue_size=V_bsize
 "), 
\end_layout

\begin_layout Plain Layout

	('2', " source='172.16.11.67', dest='172.16.10.60', delay=V_delay, " 
\end_layout

\begin_layout Plain Layout

          " loss=V_loss, rate=V_down_rate, queue_disc=V_aqm, queue_size=V_bsize
 "), 
\end_layout

\begin_layout Plain Layout

	('3', " source='172.16.10.61', dest='172.16.11.68', delay=V_delay2, " 
\end_layout

\begin_layout Plain Layout

          " loss=V_loss, rate=V_up_rate, queue_disc=V_aqm, queue_size=V_bsize,
 " 
\end_layout

\begin_layout Plain Layout

          " attach_to_queue='1' "), 
\end_layout

\begin_layout Plain Layout

	('4', " source='172.16.11.68', dest='172.16.10.61', delay=V_delay2, " 
\end_layout

\begin_layout Plain Layout

          " loss=V_loss, rate=V_down_rate, queue_disc=V_aqm, queue_size=V_bsize,
 " 
\end_layout

\begin_layout Plain Layout

          " attach_to_queue='2' "), 
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario4-Router"

\end_inset

Scenario 4, router queue configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We also need to define both of the V_ variables and make sure we iterate
 over both in the experiments (see Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario4-Parameters"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

TPCONF_delays = [5, 50] 
\end_layout

\begin_layout Plain Layout

TPCONF_delays2 = [5, 50]
\end_layout

\begin_layout Plain Layout

TPCONF_parameter_list = { 
\end_layout

\begin_layout Plain Layout

	# Vary name V_ variable file name values extra vars 
\end_layout

\begin_layout Plain Layout

	'delays' : (['V_delay'], ['del1'], TPCONF_delays, {}), 
\end_layout

\begin_layout Plain Layout

	'delays2' : (['V_delay2'], ['del2'], TPCONF_delays2, {}), 
\end_layout

\begin_layout Plain Layout

	'loss' : (['V_loss'], ['loss'], TPCONF_loss_rates, {}), 
\end_layout

\begin_layout Plain Layout

	'tcpalgos' : (['V_tcp_cc_algo'],['tcp'], TPCONF_TCP_algos, {}), 
\end_layout

\begin_layout Plain Layout

	'aqms' : (['V_aqm'], ['aqm'], TPCONF_aqms, {}), 
\end_layout

\begin_layout Plain Layout

	'bsizes' : (['V_bsize'], ['bs'], TPCONF_buffer_sizes, {}), 
\end_layout

\begin_layout Plain Layout

	'runs' : (['V_runs'], ['run'], range(TPCONF_runs), {}), 
\end_layout

\begin_layout Plain Layout

	'bandwidths' : (['V_down_rate', 'V_up_rate'], ['down', 'up'], TPCONF_bandwidths
, {}), 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

TPCONF_variable_defaults = { 
\end_layout

\begin_layout Plain Layout

	# V_ variable value 
\end_layout

\begin_layout Plain Layout

	'V_duration' : TPCONF_duration, 
\end_layout

\begin_layout Plain Layout

	'V_delay' : TPCONF_delays[0], 
\end_layout

\begin_layout Plain Layout

	'V_delay2' : TPCONF_delays2[0], 
\end_layout

\begin_layout Plain Layout

	'V_loss' : TPCONF_loss_rates[0], 
\end_layout

\begin_layout Plain Layout

	'V_tcp_cc_algo' : TPCONF_TCP_algos[0], 
\end_layout

\begin_layout Plain Layout

	'V_down_rate' : TPCONF_bandwidths[0][0], 
\end_layout

\begin_layout Plain Layout

	'V_up_rate' : TPCONF_bandwidths[0][1], 
\end_layout

\begin_layout Plain Layout

	'V_aqm' : TPCONF_aqms[0], 
\end_layout

\begin_layout Plain Layout

	'V_bsize' : TPCONF_buffer_sizes[0], 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

TPCONF_vary_parameters = ['delays', 'delays2', 'bandwidths', 'aqms', 'runs',]
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario4-Parameters"

\end_inset

Scenario 4, experiment parameter configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, we need to define the traffic generators to create one TCP bulk
 transfer flow for each host pair as shown in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario4-Traffic"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

traffic_iperf = [ 
\end_layout

\begin_layout Plain Layout

	('0.0', '1', " start_iperf, client='newtcp27', server='newtcp20', port=5000,
 " 
\end_layout

\begin_layout Plain Layout

                 " duration=V_duration "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '2', " start_iperf, client='newtcp28', server='newtcp21', port=5001,
 " 
\end_layout

\begin_layout Plain Layout

                 " duration=V_duration "), 
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

TPCONF_traffic_gens = traffic_iperf
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario4-Traffic"

\end_inset

Scenario 4, traffic configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Run and analyse experiment
\end_layout

\begin_layout Standard
See scenario 1.
\end_layout

\begin_layout Subsection
Scenario 5: Partially overlapping TCP flows with different TCP CC
\end_layout

\begin_layout Subsubsection
Topology
\end_layout

\begin_layout Standard
We now have three hosts in each subnet: newtcp20, newtcp21 and newtcp22
 connected to the 172.16.10.0/24 network, and newtcp27, newtcp28 and newtcp29
 connected to the 172.16.11.0/24 network.
 The machine newtcprt3 connects the two experiment subnets.
 All three machines also have a second network interface that is used to
 control the experiment via TEACUP.
 Like scenario 1 this scenario requires that hosts have the traffic generator
 and logging tools installed as described in 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

, but PXE booting or a multi-OS installation is not needed.
\end_layout

\begin_layout Subsubsection
Test Traffic
\end_layout

\begin_layout Standard
Three TCP bulk transfer flows are created using iperf.
 One flow is between newtcp20 and newtcp27, the second flow is between newtcp21
 and newtcp28, and the third flow is between newtcp22 and newtcp29.
 The flows do not longer start at the same time.
 Flow one start at the start of the experiment, while flow 2 starts 10 seconds
 after the first flow and flow 3 starts 10 seconds after flow 2.
 All flows have a duration of 30 seconds as in scenario 1.
\end_layout

\begin_layout Subsubsection
Variable Parameters
\end_layout

\begin_layout Standard
Like in scenario 1 we emulate three different delays (same delays for all
 flows) and two different bandwidth settings.
 However, we now also vary the used TCP congestion control algorithm between
 Newreno and Cubic.
 This means we have 12 different experiments in total.
 We do also define a variable parameter for AQM, but define only one AQM
 (default pfifo).
 This causes the used AQM to be logged as part of the experiment ID.
\end_layout

\begin_layout Subsubsection
TEACUP Config File
\end_layout

\begin_layout Standard
You can download the configuration file from 
\begin_inset CommandInset citation
LatexCommand cite
key "teacup-examples-web"

\end_inset

.
 To use the configuration rename it to config.py.
 In the following we explain the parts of the configuration file that have
 changed compared to scenario 1.
\end_layout

\begin_layout Standard
Our host configuration now looks as shown in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario5-Hosts"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

TPCONF_router = ['newtcprt3', ] 
\end_layout

\begin_layout Plain Layout

TPCONF_hosts = [ 'newtcp20', 'newtcp21', 'newtcp22', 'newtcp27', 'newtcp28',
 'newtcp29', ]
\end_layout

\begin_layout Plain Layout

TPCONF_host_internal_ip = { 
\end_layout

\begin_layout Plain Layout

	'newtcprt3': ['172.16.10.1', '172.16.11.1'], 
\end_layout

\begin_layout Plain Layout

	'newtcp20': ['172.16.10.60'], 
\end_layout

\begin_layout Plain Layout

	'newtcp21': ['172.16.10.61'], 
\end_layout

\begin_layout Plain Layout

	'newtcp22': ['172.16.10.62'], 
\end_layout

\begin_layout Plain Layout

	'newtcp27': ['172.16.11.67'], 
\end_layout

\begin_layout Plain Layout

	'newtcp28': ['172.16.11.68'], 
\end_layout

\begin_layout Plain Layout

	'newtcp29': ['172.16.11.69'], 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario5-Hosts"

\end_inset

Scenario 5, host configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The traffic generator setup now creates three staggered flows as shown in
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario5-Traffic"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

traffic_iperf = [ 
\end_layout

\begin_layout Plain Layout

	('0.0', '1', " start_iperf, client='newtcp27', server='newtcp20', port=5000,
 " 
\end_layout

\begin_layout Plain Layout

	             " duration=V_duration "), 
\end_layout

\begin_layout Plain Layout

	('10.0', '2', " start_iperf, client='newtcp28', server='newtcp21', port=5001,
 " 
\end_layout

\begin_layout Plain Layout

                  " duration=V_duration "), 
\end_layout

\begin_layout Plain Layout

	('20.0', '3', " start_iperf, client='newtcp29', server='newtcp22', port=5002,
 " 
\end_layout

\begin_layout Plain Layout

                  " duration=V_duration "), 
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

TPCONF_traffic_gens = traffic_iperf
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario5-Traffic"

\end_inset

Scenario 5, traffic configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We also need to configure the different TCP congestion control algorithms
 and instruct TEACUP to vary this parameter (see Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario5-Parameters"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

TPCONF_TCP_algos = ['newreno', 'cubic', ]
\end_layout

\begin_layout Plain Layout

TPCONF_parameter_list = { 
\end_layout

\begin_layout Plain Layout

	'delays' : (['V_delay'], ['del'], TPCONF_delays, {}), 
\end_layout

\begin_layout Plain Layout

	'loss' : (['V_loss'], ['loss'], TPCONF_loss_rates, {}), 
\end_layout

\begin_layout Plain Layout

	'tcpalgos' : (['V_tcp_cc_algo'],['tcp'], TPCONF_TCP_algos, {}), 
\end_layout

\begin_layout Plain Layout

	'aqms' : (['V_aqm'], ['aqm'], TPCONF_aqms, {}), 
\end_layout

\begin_layout Plain Layout

	'bsizes' : (['V_bsize'], ['bs'], TPCONF_buffer_sizes, {}), 
\end_layout

\begin_layout Plain Layout

	'runs' : (['V_runs'], ['run'], range(TPCONF_runs), {}), 
\end_layout

\begin_layout Plain Layout

	'bandwidths' : (['V_down_rate', 'V_up_rate'], ['down', 'up'], TPCONF_bandwidths
, {}), 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

TPCONF_variable_defaults = { 
\end_layout

\begin_layout Plain Layout

	'V_duration' : TPCONF_duration, 
\end_layout

\begin_layout Plain Layout

	'V_delay' : TPCONF_delays[0], 
\end_layout

\begin_layout Plain Layout

	'V_loss' : TPCONF_loss_rates[0], 
\end_layout

\begin_layout Plain Layout

	'V_tcp_cc_algo' : TPCONF_TCP_algos[0], 
\end_layout

\begin_layout Plain Layout

	'V_down_rate' : TPCONF_bandwidths[0][0], 
\end_layout

\begin_layout Plain Layout

	'V_up_rate' : TPCONF_bandwidths[0][1], 
\end_layout

\begin_layout Plain Layout

	'V_aqm' : TPCONF_aqms[0], 
\end_layout

\begin_layout Plain Layout

	'V_bsize' : TPCONF_buffer_sizes[0], 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

TPCONF_vary_parameters = ['tcpalgos', 'delays', 'bandwidths', 'aqms', 'runs',]
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario5-Parameters"

\end_inset

Scenario 5, variable parameter configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Run and analyse experiment
\end_layout

\begin_layout Standard
See scenario 1.
\end_layout

\begin_layout Subsection
Scenario 6: 
\change_deleted 1870295737 1494550947
Two
\change_inserted 1870295737 1494550947
One
\change_unchanged
 HTTP-based
\change_inserted 1870295737 1494550951
 (DASH)
\change_unchanged
 video streaming client
\change_deleted 1870295737 1494550954
s
\change_deleted 1685850735 1502428561

\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\change_inserted 193492759 1494486216
**** THIS NEEDS UPDATING TO USE REAL DASH ***
\change_unchanged

\end_layout

\end_inset


\change_unchanged

\end_layout

\begin_layout Subsubsection
Topology
\end_layout

\begin_layout Standard
We now have host
\change_deleted 1870295737 1494555039
s
\change_unchanged
 newtcp20
\change_deleted 1870295737 1494550957
, newtcp21
\change_unchanged
 connected to the 172.16.10.0/24 network and host newtcp
\change_inserted 1870295737 1494550960
33
\change_deleted 1870295737 1494550959
27
\change_unchanged
 connected to the 172.16.11.0/24 network.
 The machine newtcprt3 connects the two experiment subnets.
 All three machines also have a second network interface that is used to
 control the experiment via TEACUP.
 Like scenario 1 this scenario requires that hosts have the traffic generator
 and logging tools installed as described in 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

, but PXE booting or a multi-OS installation is not needed.
\end_layout

\begin_layout Subsubsection
Test Traffic
\end_layout

\begin_layout Standard
In this scenario we
\change_inserted 1870295737 1494555072
 generate DASH video streaming traffic
\change_deleted 1870295737 1494551249
 simulate DASH-like HTTP video streaming
\change_unchanged
.
 Host newtcp
\change_inserted 1870295737 1494551259
33
\change_deleted 1870295737 1494551258
27
\change_unchanged
 runs a web server.
 Host newtcp20 
\change_deleted 1870295737 1494551268
and newtcp21 are
\change_inserted 1870295737 1494551269
is a
\change_unchanged
 client
\change_inserted 1870295737 1494555085
 
\change_deleted 1870295737 1494551275
s and use httperf to emulate DASH-like streaming
\change_inserted 1870295737 1494551304
that uses dash.js player inside Firefox browser to retrieve video content
\change_unchanged
 – there is one DASH
\change_deleted 1870295737 1494551307
-like
\change_unchanged
 flow between 
\change_deleted 1870295737 1494551310
each
\change_inserted 1870295737 1494551310
the
\change_unchanged
 client and the server.
 In this scenario
\change_inserted 1870295737 1494551349
 we use 10-sec chunks with a MPD that supplies 20 different video encoding
 rates (representation rates).
 
\change_deleted 1870295737 1494551315
 we have fixed the video rates and on/off cycle times, but the rate and
 cycle time differs for both streams.
\change_unchanged

\end_layout

\begin_layout Subsubsection
Variable Parameters
\end_layout

\begin_layout Standard
Like in scenario 1 we emulate three different delays 
\change_deleted 1870295737 1494551395
(same delays for all flows) 
\change_unchanged
and two different bandwidth settings.
 We now also vary the AQM mechanism used on the router between FIFO, CoDel
 and FQ CoDel.
 This means we have 18 experiments in total.
\end_layout

\begin_layout Subsubsection
TEACUP Config File
\end_layout

\begin_layout Standard

\change_deleted 193492759 1517724562
You can download the configuration file from 
\begin_inset CommandInset citation
LatexCommand cite
key "teacup-examples-web"

\end_inset

.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\change_inserted 1870295737 1494557722
*** jkua: This link doesn't have the updated Scenario 6 with real DASH experimen
t setup.
 Either we update the webpage or remove the previous sentence.
 However, I've updated config-scenario6.py in ./example_configs.
\change_unchanged

\end_layout

\end_inset


\change_unchanged
To use the configuration rename it to config.py.
 In the following we explain the parts of the configuration file that have
 changed compared to scenario 1.
\end_layout

\begin_layout Standard
Our host configuration now looks as in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario6-Hosts"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

TPCONF_router = ['newtcprt3', ] 
\end_layout

\begin_layout Plain Layout

TPCONF_hosts = [ 'newtcp20', 'newtcp33', ]
\end_layout

\begin_layout Plain Layout

TPCONF_host_internal_ip = { 
\end_layout

\begin_layout Plain Layout

	'newtcprt3': ['172.16.10.1', '172.16.11.1'], 
\end_layout

\begin_layout Plain Layout

	'newtcp20': ['172.16.10.60'], 	
\change_inserted 1870295737 1494557194

\end_layout

\begin_layout Plain Layout

\change_inserted 1870295737 1494557196

	
\change_unchanged
'newtcp33': ['172.16.11.73'], 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario6-Hosts"

\end_inset

Scenario 6, host configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The traffic generator setup now starts a web server 
\change_deleted 1870295737 1494555163
and generates fake streaming content 
\change_unchanged
on newtcp
\change_inserted 1870295737 1494555166
33
\change_deleted 1870295737 1494555165
27
\change_unchanged
 before starting the DASH
\change_deleted 1870295737 1494555168
-like
\change_unchanged
 flow
\change_deleted 1870295737 1494555174
s
\change_unchanged
 as shown in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario6-Traffic"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

traffic_dash_streaming = [ 
\end_layout

\begin_layout Plain Layout

	# Start server (server must be started first)
\end_layout

\begin_layout Plain Layout

   	( '0.0', '1', " start_http_server, server='newtcp33', port='8000', 
\end_layout

\begin_layout Plain Layout

	  docroot='/data/dash_dataset' "), 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	# Create DASH flows 
\end_layout

\begin_layout Plain Layout

	( '0.1', '2', " start_dash_streaming_dashjs, client='newtcp20', serv='newtcp33',
 
\end_layout

\begin_layout Plain Layout

	  serv_port='8000', browser='firefox', chunk_size=V_chunksize, mpd=V_mpd,
\end_layout

\begin_layout Plain Layout

	  player_path='136.186.229.181:8080/dashjs-v2.4.1/samples/dash-if-reference-player',
 
\end_layout

\begin_layout Plain Layout

	  duration=V_duration " ),
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

TPCONF_traffic_gens = traffic_dash_streaming
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario6-Traffic"

\end_inset

Scenario 6, traffic configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\change_inserted 1870295737 1494557932
We need to add one additional DASH-specific parameter to TPCONF_chunksize_mpd
 and TPCONF_parameter_list, and two variables to TPCONF_variable_defaults
 as shown in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario6-Parameters"

\end_inset

.
\end_layout

\begin_layout Standard
Finally, we need to configure the different AQM mechanisms used (see Listing
 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario6-Parameters"

\end_inset

)
\change_deleted 1870295737 1494551921
.
 TPCONF_vary_parameters already included the `aqms' parameters in scenario
 1, so TPCONF_parameter_list and TPCONF_variable_defaults look like in scenario
 1.
 We only have to change
\change_unchanged
 
\change_inserted 1870295737 1494551925
with 
\change_unchanged
TPCONF_aqms.

\change_inserted 1870295737 1494557143
 In order to permutate across different video chunk sizes and MPDs, the
 variable `chunksize_mpd' needs to be added to TPCONF_vary_parameters.
\change_unchanged

\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

# Video chunk size and MPD pair
\end_layout

\begin_layout Plain Layout

TPCONF_chunksize_mpd = [
\end_layout

\begin_layout Plain Layout

    ('10','BigBuckBunny_10s.mpd'),   
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

TPCONF_parameter_list = {
\end_layout

\begin_layout Plain Layout

#   Vary name V_ variable file name values extra vars 
\end_layout

\begin_layout Plain Layout

    'chunksize_mpd' : (['V_chunksize','V_mpd'], ['chunksize','mpd'], TPCONF_chun
ksize_mpd, {}),
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

TPCONF_variable_defaults = {
\end_layout

\begin_layout Plain Layout

#   V_ variable			value
\end_layout

\begin_layout Plain Layout

    'V_chunksize'	:	TPCONF_chunksize_mpd[0][0],
\end_layout

\begin_layout Plain Layout

    'V_mpd'		: 	TPCONF_chunksize_mpd[0][1],
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

TPCONF_aqms = ['pfifo', 'codel', 'fq_codel', ]
\end_layout

\begin_layout Plain Layout

TPCONF_vary_parameters = ['delays', 'bandwidths', 'aqms', 'runs',]
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario6-Parameters"

\end_inset

Scenario 6, parameter configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Run and analyse experiment
\end_layout

\begin_layout Standard
See scenario 1.
\end_layout

\begin_layout Subsection
Scenario 7: Incast problem scenario
\end_layout

\begin_layout Subsubsection
Topology
\end_layout

\begin_layout Standard
We now have the host newtcp20 connected to the 172.16.10.0/24 network and hosts
 newtcp22–30 connected to the 172.16.11.0/24 network.
 The machine newtcprt3 connects the two experiment subnets.
 All three machines also have a second network interface that is used to
 control the experiment via TEACUP.
 Like scenario 1 this scenario requires that hosts have the traffic generator
 and logging tools installed as described in 
\begin_inset CommandInset citation
LatexCommand cite
key "zander2014caia_tcp_testbed_v2"

\end_inset

, but PXE booting or a multi-OS installation is not needed.
\end_layout

\begin_layout Subsubsection
Test Traffic
\end_layout

\begin_layout Standard
In this scenario we emulate traffic to investigate the incast problem.
 The host newtcp20 is the querier and in regular intervals sends simultaneous
 queries to hosts newtcp21, newtcp22, newtcp23, newtcp24, newtcp25, newtcp26,
 newtcp27, newtcp28, newtcp29 and newtcp30 which then respond simultaneously.
 The querier uses httperf to send the queries to web servers running on
 all of the responders.
\end_layout

\begin_layout Subsubsection
Variable Parameters
\end_layout

\begin_layout Standard
Like in scenario 6 we emulate three different delays (same delays for all
 flows), two different bandwidth settings, and three different AQM mechanism
 (FIFO, CoDel and FQ CoDel).
 We now also vary the size of the response between six different values.
 This means we have 108 experiments in total.
\end_layout

\begin_layout Subsubsection
TEACUP Config File
\end_layout

\begin_layout Standard
You can download the configuration file from 
\begin_inset CommandInset citation
LatexCommand cite
key "teacup-examples-web"

\end_inset

.
 To use the configuration rename it to config.py.
 In the following we explain the parts of the configuration file that have
 changed compared to scenario 6.
\end_layout

\begin_layout Standard
Our host configuration now looks as in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario7-Hosts"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

TPCONF_router = ['newtcprt3', ] 
\end_layout

\begin_layout Plain Layout

TPCONF_hosts = [ 
\end_layout

\begin_layout Plain Layout

	'newtcp20', 'newtcp21', 'newtcp22', 'newtcp23', 'newtcp24', 
\end_layout

\begin_layout Plain Layout

    'newtcp25', 'newtcp26', 'newtcp27', 'newtcp28', 'newtcp29', 'newtcp30',
 
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

TPCONF_host_internal_ip = { 
\end_layout

\begin_layout Plain Layout

	'newtcprt3': ['172.16.10.1', '172.16.11.1'],
\end_layout

\begin_layout Plain Layout

	'newtcp20': ['172.16.10.60'], # querier 
\end_layout

\begin_layout Plain Layout

	'newtcp21': ['172.16.11.61'], # responders...
 
\end_layout

\begin_layout Plain Layout

	'newtcp22': ['172.16.11.62'], 
\end_layout

\begin_layout Plain Layout

	'newtcp23': ['172.16.11.63'], 
\end_layout

\begin_layout Plain Layout

	'newtcp24': ['172.16.11.64'], 
\end_layout

\begin_layout Plain Layout

	'newtcp25': ['172.16.11.65'], 
\end_layout

\begin_layout Plain Layout

	'newtcp26': ['172.16.11.66'], 
\end_layout

\begin_layout Plain Layout

	'newtcp27': ['172.16.11.67'], 
\end_layout

\begin_layout Plain Layout

	'newtcp28': ['172.16.11.68'], 
\end_layout

\begin_layout Plain Layout

	'newtcp29': ['172.16.11.69'], 
\end_layout

\begin_layout Plain Layout

	'newtcp30': ['172.16.11.70'], 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario7-Hosts"

\end_inset

Scenario 7, host configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The traffic generator setup now starts a web server and generates fake streaming
 content on each responder.
 Then after a delay of one second it starts the querier.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario7-Traffic"

\end_inset

 shows the configuration.
 Setting up each server individually requires a large number of entries
 in the traffic configuration.
 Since version 0.9 TEACUP supports the start_httperf_incast_n traffic generator
 that will setup the 
\begin_inset Formula $n$
\end_inset

 servers and the querier with a single entry.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

traffic_incast = [ 
\end_layout

\begin_layout Plain Layout

	# Start servers and create contents (server must be started first) 
\end_layout

\begin_layout Plain Layout

	('0.0', '1', " start_http_server, server='newtcp21', port=80 "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '2', " start_http_server, server='newtcp22', port=80 "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '3', " start_http_server, server='newtcp23', port=80 "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '4', " start_http_server, server='newtcp24', port=80 "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '5', " start_http_server, server='newtcp25', port=80 "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '6', " start_http_server, server='newtcp26', port=80 "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '7', " start_http_server, server='newtcp27', port=80 "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '8', " start_http_server, server='newtcp28', port=80 "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '9', " start_http_server, server='newtcp29', port=80 "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '10', " start_http_server, server='newtcp30', port=80 "),
\end_layout

\begin_layout Plain Layout

	('0.0', '11', " create_http_incast_content, server='newtcp21', duration=2*V_dura
tion, " 
\end_layout

\begin_layout Plain Layout

                  " sizes=V_inc_content_sizes_str "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '12', " create_http_incast_content, server='newtcp22', duration=2*V_dura
tion, " 
\end_layout

\begin_layout Plain Layout

                  " sizes=V_inc_content_sizes_str "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '13', " create_http_incast_content, server='newtcp23', duration=2*V_dura
tion, " 
\end_layout

\begin_layout Plain Layout

                  " sizes=V_inc_content_sizes_str "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '14', " create_http_incast_content, server='newtcp24', duration=2*V_dura
tion, " 
\end_layout

\begin_layout Plain Layout

                  " sizes=V_inc_content_sizes_str "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '15', " create_http_incast_content, server='newtcp25', duration=2*V_dura
tion, "   
\end_layout

\begin_layout Plain Layout

                  " sizes=V_inc_content_sizes_str "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '16', " create_http_incast_content, server='newtcp26', duration=2*V_dura
tion, " 
\end_layout

\begin_layout Plain Layout

                  " sizes=V_inc_content_sizes_str "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '17', " create_http_incast_content, server='newtcp27', duration=2*V_dura
tion, " 
\end_layout

\begin_layout Plain Layout

                  " sizes=V_inc_content_sizes_str "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '18', " create_http_incast_content, server='newtcp28', duration=2*V_dura
tion, " 
\end_layout

\begin_layout Plain Layout

                  " sizes=V_inc_content_sizes_str "), 
\end_layout

\begin_layout Plain Layout

	('0.0', '19', " create_http_incast_content, server='newtcp29', duration=2*V_dura
tion, " 
\end_layout

\begin_layout Plain Layout

                  " sizes=V_inc_content_sizes_str "),
\end_layout

\begin_layout Plain Layout

	('0.0', '20', " create_http_incast_content, server='newtcp30', duration=2*V_dura
tion, " 
\end_layout

\begin_layout Plain Layout

                  " sizes=V_inc_content_sizes_str "),
\end_layout

\begin_layout Plain Layout

	# Start querier 
\end_layout

\begin_layout Plain Layout

	('1.0', '30', " start_httperf_incast, client='newtcp20', " 
\end_layout

\begin_layout Plain Layout

	  " servers='newtcp21:80,newtcp22:80,newtcp23:80,newtcp24:80,newtcp25:80,newtcp
26:80, "
\end_layout

\begin_layout Plain Layout

      " newtcp27:80,newtcp28:80,newtcp29:80,newtcp30:80', "
\end_layout

\begin_layout Plain Layout

      " duration=V_duration, period=V_inc_period, response_size=V_inc_size"),
 
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

TPCONF_traffic_gens = traffic_incast
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario7-Traffic"

\end_inset

Scenario 7, traffic configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next, we need to configure the value ranges for response sizes and the time
 period between sending queries (see Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario7-Parameters"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

TPCONF_inc_content_sizes = [8, 16, 32, 64, 128, 256] 
\end_layout

\begin_layout Plain Layout

TPCONF_inc_content_sizes_str = ','.join( str(x) for x in TPCONF_inc_content_sizes
)
\end_layout

\begin_layout Plain Layout

TPCONF_inc_periods = [10]
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario7-Parameters"

\end_inset

Scenario 7, incast content parameter configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, we need to configure TEACUP to make sure the V_ variables used
 in the traffic generator setup are defined and we vary the response sizes
 (see Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Scenario7-Vary-parameters"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},captionpos=b,float={*t}"
inline false
status open

\begin_layout Plain Layout

TPCONF_parameter_list = { 
\end_layout

\begin_layout Plain Layout

	'delays' : (['V_delay'], ['del'], TPCONF_delays, {}), 
\end_layout

\begin_layout Plain Layout

	'loss' : (['V_loss'], ['loss'], TPCONF_loss_rates, {}), 
\end_layout

\begin_layout Plain Layout

	'tcpalgos' : (['V_tcp_cc_algo'],['tcp'], TPCONF_TCP_algos, {}), 
\end_layout

\begin_layout Plain Layout

	'aqms' : (['V_aqm'], ['aqm'], TPCONF_aqms, {}), 
\end_layout

\begin_layout Plain Layout

	'bsizes' : (['V_bsize'], ['bs'], TPCONF_buffer_sizes, {}), 
\end_layout

\begin_layout Plain Layout

	'runs' : (['V_runs'], ['run'], range(TPCONF_runs), {}), 
\end_layout

\begin_layout Plain Layout

	'bandwidths' : (['V_down_rate', 'V_up_rate'], ['down', 'up'], TPCONF_bandwidths
, {}),
\end_layout

\begin_layout Plain Layout

	'incast_periods': (['V_inc_period'], ['incper'], TPCONF_inc_periods, {}),
 
\end_layout

\begin_layout Plain Layout

	'incast_sizes' : (['V_inc_size'], ['incsz'], TPCONF_inc_content_sizes,{}),
 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

TPCONF_variable_defaults = { 
\end_layout

\begin_layout Plain Layout

	'V_duration' : TPCONF_duration, 
\end_layout

\begin_layout Plain Layout

	'V_delay' : TPCONF_delays[0], 
\end_layout

\begin_layout Plain Layout

	'V_loss' : TPCONF_loss_rates[0], 
\end_layout

\begin_layout Plain Layout

	'V_tcp_cc_algo' : TPCONF_TCP_algos[0], 
\end_layout

\begin_layout Plain Layout

	'V_down_rate' : TPCONF_bandwidths[0][0], 
\end_layout

\begin_layout Plain Layout

	'V_up_rate' : TPCONF_bandwidths[0][1], 
\end_layout

\begin_layout Plain Layout

	'V_aqm' : TPCONF_aqms[0], 
\end_layout

\begin_layout Plain Layout

	'V_bsize' : TPCONF_buffer_sizes[0], 
\end_layout

\begin_layout Plain Layout

	'V_inc_period' : TPCONF_inc_periods[0], 
\end_layout

\begin_layout Plain Layout

	'V_inc_size' : TPCONF_inc_content_sizes[0], 
\end_layout

\begin_layout Plain Layout

	'V_inc_content_sizes_str': TPCONF_inc_content_sizes_str,
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

TPCONF_vary_parameters = ['incast_sizes', 'delays', 'bandwidths', 'aqms',
 'runs',]
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Scenario7-Vary-parameters"

\end_inset

Scenario 7, variable parameter configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Run and analyse experiment
\end_layout

\begin_layout Standard
See scenario 1.
\end_layout

\begin_layout Section
Extending TEACUP Functionality
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Extending"

\end_inset


\end_layout

\begin_layout Standard
This section contains some notes on extending the current implementation.
 We refer to Python functions (which can be Fabric tasks) using the notation
 of <python_file>.py:<function>().
\end_layout

\begin_layout Subsection
Additional host setup
\end_layout

\begin_layout Standard
Any general host setup (e.g.
 sysctl settings for all experiments) should be added in 
\family typewriter
\size footnotesize
hostsetup.py:init_host()
\family default
\size default
.
 Note that in this function there are different sections, one for each OS
 (FreeBSD, Linux, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{
\end_layout

\end_inset

Windows/Cygwin
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, Mac OS X).
 Commands that shall only be executed in certain experiments can be set
 in the config (TPCONF_host_init_custom_cmds).
\end_layout

\begin_layout Subsection
New TCP congestion control algorithm
\end_layout

\begin_layout Standard
Adding support for a new TCP congestion control algorithm requires modifying
 
\family typewriter
\size footnotesize
hostsetup.py:init_cc_algo()
\family default
\size default
.
 The new algorithm needs to be added to the list of supported algorithms
 and in the OS-specific sections code need to be added to load the corresponding
 kernel module (if any).
\end_layout

\begin_layout Subsection
New traffic generator
\end_layout

\begin_layout Standard
Adding a new traffic generator requires adding a new start task in 
\family typewriter
\size small
trafficgens.py
\family default
\size default
.
 The current start tasks always consist of two methods, the actual start
 method is a wrapper around an internal _start method.
 This allows having the host on which the generator is started as explicit
 parameter (and not as Fabric hosts parameter) and having multiple traffic
 generators that actually use the same underlying tool (for example this
 is the case for httperf).
 The new start method must be added to the imports in 
\family typewriter
\size small
experiment.py
\size default
.
\end_layout

\begin_layout Standard
The traffic generator start function must, after the traffic generator process
 has been started, register the started process with its process ID by calling
 
\family typewriter
\size footnotesize
bgproc.register_proc()
\family default
\size default
.
 This ensures that the process will be stopped at the end of the experiment
 and the traffic generator's log file is collected when 
\family typewriter
\size footnotesize
runbg.py:stop_processes()
\family default
\size default
 is called.
 A current limitation is that there can only be one log file per traffic
 generator process.
 
\end_layout

\begin_layout Standard
Some traffic generators also have stop methods.
 Initially, the idea was that traffic generators could be started and stopped
 from the command line directly, but this is not supported at the moment,
 i.e.
 some stop methods are not implemented (empty).
\end_layout

\begin_layout Subsection
New data logger
\end_layout

\begin_layout Standard
To add a new data logger a start method and possibly a stop method need
 to be added in 
\family typewriter
\size footnotesize
loggers.py
\family default
\size default
.
 The new logger's start method should be called from 
\family typewriter
\size footnotesize
loggers.py:start_loggers()
\family default
\size default
 via Fabric's execute(), but could also be called from 
\family typewriter
\size footnotesize
experiment.py:run_experiment()
\family default
\size default
 if required (in the latter case it must be added to the imports in 
\family typewriter
\size small
experiment.py
\family default
\size default
).
 
\end_layout

\begin_layout Standard
If the logger is a userspace process, such as tcpdump, at the end of the
 start function it should register itself (including its process ID) using
 
\family typewriter
\size footnotesize
bgproc.register_proc_later().
 
\family default
\size default
Then it is ensured that the logging process will be stopped at the end of
 the experiment and the log file is collected when 
\family typewriter
\size footnotesize
runbg.py:stop_processes()
\family default
\size default
 is called.
 In this case no stop method needs to be implemented.
 
\end_layout

\begin_layout Standard
If the logger is not a userspace process, for example SIFTR on FreeBSD,
 start 
\emph on
and
\emph default
 stop methods need to be implemented.
 The start method must still call 
\family typewriter
\size footnotesize
bgproc.register_proc_later()
\family default
\size default
, but the process ID must be set to zero.
 The stop method must be called from 
\family typewriter
\size footnotesize
runbg.py:stop_processes()
\family default
\size default
 if the process ID is zero and the internal TEACUP name of the process is
 the name of the new logger.
\end_layout

\begin_layout Subsection
New analysis method
\end_layout

\begin_layout Standard
To add a new analysis method add an analysis task in 
\family typewriter
\size footnotesize
analysis.py
\family default
\size default
.
 If the new analysis should be carried out as part of the analyse_all task,
 the new task must be called from 
\family typewriter
\size footnotesize
analysis.py:analyse_all()
\family default
\size default
 via Fabrics 
\family typewriter
\size footnotesize
execute()
\family default
\size default
 function.
 The new task should implement the common parameters test_id, out_dir, pdf_dir,
 out_name, replot_only, source_filter, min_values, etime, stime, ymin, ymax
 (see existing analyse tasks as examples).
 The new task must be added to the imports in 
\family typewriter
\size footnotesize
fabfile.py
\family default
\size default
.
\end_layout

\begin_layout Section
Known Issues
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Issues"

\end_inset


\end_layout

\begin_layout Standard
During the host setup phase TEACUP enables and disables NICs.
 On Windows the enable and disable NIC commands have permanent effect.
 If TEACUP is interrupted or aborts between a disable and enable command,
 the NIC will stay disabled.
 TEACUP will automatically enable all testbed NICs on Windows prior to each
 experiment, however in the unlikely event that the previous aborted NIC
 configuration left the NIC in an inconsistent state, it may be necessary
 to reconfigure the NIC manually.
\end_layout

\begin_layout Standard
TEACUP logs all output from traffic generators, such as iperf or httperf.
 Some of the tools used only generate output after they completed.
 If an experiment ends 
\emph on
before
\emph default
 a tool completed its task, the resulting log file may be empty.
 Possibly this issue could be mitigated by turning the stdout and stderr
 buffering off for these tools in future versions.
 
\end_layout

\begin_layout Section
Conclusions and Future Work
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Conclusions"

\end_inset


\end_layout

\begin_layout Standard

\change_deleted 193492759 1491909238
In t
\change_inserted 193492759 1491909238
T
\change_unchanged
his report 
\change_deleted 193492759 1491909241
we 
\change_unchanged
describe
\change_deleted 193492759 1491909242
d
\change_inserted 193492759 1491909242
s
\change_unchanged
 TEACUP
\change_inserted 193492759 1491909245
 version 1.1
\change_unchanged
, a Python-based software 
\change_deleted 193492759 1491909248
we 
\change_unchanged
developed to run automated TCP performance tests in a controlled testbed.
 In the future we will continue to extend TEACUP with more features.
\end_layout

\begin_layout Section*
Acknowledgements
\end_layout

\begin_layout Standard
TEACUP versions prior to 1.0 were developed as part of a project funded by
 Cisco Systems and titled "Study in TCP Congestion Control Performance In
 A Data Centre".
 This was a collaborative effort between Swinburne University of Technology's
 
\change_deleted 1685850735 1489036292
Center
\change_inserted 1685850735 1489036292
Centre
\change_unchanged
 for Advanced Internet 
\change_deleted 1685850735 1489036294
Archectures
\change_inserted 1685850735 1489036294
Architectures
\change_unchanged
 and Fred Baker of Cisco Systems.
 These may be found at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://caia.swin.edu.au/tools/teacup/downloads.html
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Starting with TEACUP v1.0, development will be community supported and publicly
 hosted at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sourceforge.net/projects/teacup/
\end_layout

\end_inset

.
\change_inserted 193492759 1517561599

\end_layout

\begin_layout Standard

\change_inserted 193492759 1517562027
Russell Collom and Jonathan Kua contributed additional text in 2017 for
 version 1.1 of this document.
\change_unchanged

\end_layout

\begin_layout Section*
Copyright and License
\begin_inset CommandInset label
LatexCommand label
name "sec:Copying"

\end_inset


\end_layout

\begin_layout Standard
This document
\change_inserted 193492759 1491909077
 is based on 
\change_deleted 193492759 1491909079
, 
\change_unchanged

\begin_inset Quotes eld
\end_inset

TEACUP v1.0 – A System for Automated TCP Testbed Experiments
\begin_inset Quotes erd
\end_inset

 by Sebastian Zander and Grenville Armitage, 
\change_deleted 193492759 1491909087
is 
\change_unchanged

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
copyright
\end_layout

\end_inset


\begin_inset space ~
\end_inset

2015 – 2016 CAIA, Swinburne University of Technology
\change_inserted 193492759 1491909197
.
 The original was released 
\change_deleted 193492759 1491909096
.
 As of 
\change_inserted 193492759 1491909096
in 
\change_unchanged
June 2016 
\change_deleted 193492759 1491909102
this document has been licensed 
\change_unchanged
under a Creative Commons Attribution-ShareAlike 4.0 International License
 (CC BY-SA 4.0, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://creativecommons.org/licenses/by-sa/4.0
\end_layout

\end_inset

).
 Based on a work at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://caia.swin.edu.au/reports/150529A/CAIA-TR-150529A.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
balance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "teacup-system"
options "IEEEtran"

\end_inset


\end_layout

\end_body
\end_document
